
IDGM_Test_11d_2-IGBT_AP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c64c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800c7ec  0800c7ec  0001c7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce20  0800ce20  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce20  0800ce20  0001ce20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce28  0800ce28  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce28  0800ce28  0001ce28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce2c  0800ce2c  0001ce2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800ce30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a188  200001fc  0800d02c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a384  0800d02c  0002a384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3e8  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003039  00000000  00000000  0003e614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00041650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  00042d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262dd  00000000  00000000  000443a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a279  00000000  00000000  0006a685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee14e  00000000  00000000  000848fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172a4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007058  00000000  00000000  00172aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c7d4 	.word	0x0800c7d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800c7d4 	.word	0x0800c7d4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f003 f95e 	bl	800386e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f88f 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 fbcf 	bl	8000d58 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ba:	f000 fb8b 	bl	8000cd4 <MX_DMA_Init>
  MX_ADC1_Init();
 80005be:	f000 f8db 	bl	8000778 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 fb57 	bl	8000c74 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005c6:	f000 f985 	bl	80008d4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005ca:	f000 fac5 	bl	8000b58 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005ce:	f000 fa2f 	bl	8000a30 <MX_TIM2_Init>
  MX_I2C1_Init();
 80005d2:	f000 f93f 	bl	8000854 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //  txBuffer4461 = REG_DATA;
  HAL_I2C_Mem_Write(&hi2c1, MCP4461_ADDR, REG_NVWiper0, 1, &txBuffer4461, 1, 1000);
 80005d6:	235c      	movs	r3, #92	; 0x5c
 80005d8:	b299      	uxth	r1, r3
 80005da:	2302      	movs	r3, #2
 80005dc:	b29a      	uxth	r2, r3
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	9302      	str	r3, [sp, #8]
 80005e4:	2301      	movs	r3, #1
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <main+0x10c>)
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	4832      	ldr	r0, [pc, #200]	; (80006b8 <main+0x110>)
 80005f0:	f005 fcbe 	bl	8005f70 <HAL_I2C_Mem_Write>
  HAL_Delay(500);
 80005f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f8:	f003 f9ae 	bl	8003958 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, TCA9536A_ADDR, REG_Configuration, 1, &txBuffer9536AoEB, 1, 1000);
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	b299      	uxth	r1, r3
 8000600:	2303      	movs	r3, #3
 8000602:	b29a      	uxth	r2, r3
 8000604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000608:	9302      	str	r3, [sp, #8]
 800060a:	2301      	movs	r3, #1
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <main+0x114>)
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2301      	movs	r3, #1
 8000614:	4828      	ldr	r0, [pc, #160]	; (80006b8 <main+0x110>)
 8000616:	f005 fcab 	bl	8005f70 <HAL_I2C_Mem_Write>
  HAL_Delay(500);
 800061a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061e:	f003 f99b 	bl	8003958 <HAL_Delay>
  HAL_I2C_Mem_Write(&hi2c1, TCA9536A_ADDR, REG_OutputPort, 1, &txBuffer9536A, 1, 1000);
 8000622:	2380      	movs	r3, #128	; 0x80
 8000624:	b299      	uxth	r1, r3
 8000626:	2301      	movs	r3, #1
 8000628:	b29a      	uxth	r2, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	2301      	movs	r3, #1
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <main+0x118>)
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	481f      	ldr	r0, [pc, #124]	; (80006b8 <main+0x110>)
 800063c:	f005 fc98 	bl	8005f70 <HAL_I2C_Mem_Write>
  HAL_Delay(500);
 8000640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000644:	f003 f988 	bl	8003958 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //uart Receive Start
  //UART 受信バッファクリア
  __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <main+0x11c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	8b1b      	ldrh	r3, [r3, #24]
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <main+0x11c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f042 0208 	orr.w	r2, r2, #8
 8000658:	b292      	uxth	r2, r2
 800065a:	831a      	strh	r2, [r3, #24]
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <main+0x11c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	8b1b      	ldrh	r3, [r3, #24]
 8000662:	b29a      	uxth	r2, r3
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <main+0x11c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f042 0210 	orr.w	r2, r2, #16
 800066c:	b292      	uxth	r2, r2
 800066e:	831a      	strh	r2, [r3, #24]
  //UART 受信開始 (1バイト受信したら割り込み発生)
  if (HAL_UART_Receive_IT(&huart2, &RxData, 1) !=  HAL_OK)
 8000670:	2201      	movs	r2, #1
 8000672:	4915      	ldr	r1, [pc, #84]	; (80006c8 <main+0x120>)
 8000674:	4813      	ldr	r0, [pc, #76]	; (80006c4 <main+0x11c>)
 8000676:	f009 fa75 	bl	8009b64 <HAL_UART_Receive_IT>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <main+0xdc>
  {
	  Error_Handler();
 8000680:	f002 fc8c 	bl	8002f9c <Error_Handler>
  }

  while (1)
  {
	  //受信data check
	  if (resDataFlg == true) {
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <main+0x124>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d0fb      	beq.n	8000684 <main+0xdc>
		  //コマンド判定&実行
		  chkcommand2();
 800068c:	f000 fbce 	bl	8000e2c <chkcommand2>
		  //受信フラグクリア
		  resDataFlg = false;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <main+0x124>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
		  RxBuffCounter = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <main+0x128>)
 8000698:	2200      	movs	r2, #0
 800069a:	801a      	strh	r2, [r3, #0]
		  //受信再開
		  if (HAL_UART_Receive_IT(&huart2, &RxData, 1) !=  HAL_OK)
 800069c:	2201      	movs	r2, #1
 800069e:	490a      	ldr	r1, [pc, #40]	; (80006c8 <main+0x120>)
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <main+0x11c>)
 80006a2:	f009 fa5f 	bl	8009b64 <HAL_UART_Receive_IT>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0eb      	beq.n	8000684 <main+0xdc>
		  {
			  Error_Handler();
 80006ac:	f002 fc76 	bl	8002f9c <Error_Handler>
	  if (resDataFlg == true) {
 80006b0:	e7e8      	b.n	8000684 <main+0xdc>
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000
 80006b8:	200019a4 	.word	0x200019a4
 80006bc:	20000001 	.word	0x20000001
 80006c0:	20000002 	.word	0x20000002
 80006c4:	2000868c 	.word	0x2000868c
 80006c8:	2000021a 	.word	0x2000021a
 80006cc:	2000021b 	.word	0x2000021b
 80006d0:	2000021c 	.word	0x2000021c

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b096      	sub	sp, #88	; 0x58
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2244      	movs	r2, #68	; 0x44
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f00a fdf6 	bl	800b2d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006fa:	f006 f845 	bl	8006788 <HAL_PWREx_ControlVoltageScaling>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000704:	f002 fc4a 	bl	8002f9c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000710:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000712:	2340      	movs	r3, #64	; 0x40
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071a:	2302      	movs	r3, #2
 800071c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000722:	230a      	movs	r3, #10
 8000724:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000726:	2307      	movs	r3, #7
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4618      	mov	r0, r3
 8000738:	f006 f87c 	bl	8006834 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000742:	f002 fc2b 	bl	8002f9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
 8000748:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2303      	movs	r3, #3
 800074c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	2104      	movs	r1, #4
 800075e:	4618      	mov	r0, r3
 8000760:	f006 fc88 	bl	8007074 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800076a:	f002 fc17 	bl	8002f9c <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3758      	adds	r7, #88	; 0x58
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800078e:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <MX_ADC1_Init+0xd0>)
 8000790:	4a2e      	ldr	r2, [pc, #184]	; (800084c <MX_ADC1_Init+0xd4>)
 8000792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <MX_ADC1_Init+0xd0>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_ADC1_Init+0xd0>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007ae:	2208      	movs	r2, #8
 80007b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007b8:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007ce:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <MX_ADC1_Init+0xd0>)
 80007f4:	f003 fb10 	bl	8003e18 <HAL_ADC_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80007fe:	f002 fbcd 	bl	8002f9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_ADC1_Init+0xd8>)
 8000804:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000806:	2306      	movs	r3, #6
 8000808:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800080e:	237f      	movs	r3, #127	; 0x7f
 8000810:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000812:	2304      	movs	r3, #4
 8000814:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	4619      	mov	r1, r3
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <MX_ADC1_Init+0xd0>)
 8000820:	f003 fef4 	bl	800460c <HAL_ADC_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800082a:	f002 fbb7 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  //ADCのキャリブレーション
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800082e:	217f      	movs	r1, #127	; 0x7f
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_ADC1_Init+0xd0>)
 8000832:	f004 fd25 	bl	8005280 <HAL_ADCEx_Calibration_Start>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0xc8>
  {
	  Error_Handler();
 800083c:	f002 fbae 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000455c 	.word	0x2000455c
 800084c:	50040000 	.word	0x50040000
 8000850:	04300002 	.word	0x04300002

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_I2C1_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_I2C1_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <MX_I2C1_Init+0x7c>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_I2C1_Init+0x74>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000890:	f005 fadf 	bl	8005e52 <HAL_I2C_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800089a:	f002 fb7f 	bl	8002f9c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089e:	2100      	movs	r1, #0
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008a2:	f005 fecb 	bl	800663c <HAL_I2CEx_ConfigAnalogFilter>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f002 fb76 	bl	8002f9c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008b4:	f005 ff0d 	bl	80066d2 <HAL_I2CEx_ConfigDigitalFilter>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008be:	f002 fb6d 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200019a4 	.word	0x200019a4
 80008cc:	40005400 	.word	0x40005400
 80008d0:	10909cec 	.word	0x10909cec

080008d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09a      	sub	sp, #104	; 0x68
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]
 8000906:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	222c      	movs	r2, #44	; 0x2c
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f00a fce0 	bl	800b2d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000914:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <MX_TIM1_Init+0x154>)
 8000916:	4a45      	ldr	r2, [pc, #276]	; (8000a2c <MX_TIM1_Init+0x158>)
 8000918:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800091a:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <MX_TIM1_Init+0x154>)
 800091c:	2200      	movs	r2, #0
 800091e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000920:	4b41      	ldr	r3, [pc, #260]	; (8000a28 <MX_TIM1_Init+0x154>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <MX_TIM1_Init+0x154>)
 8000928:	f240 321f 	movw	r2, #799	; 0x31f
 800092c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092e:	4b3e      	ldr	r3, [pc, #248]	; (8000a28 <MX_TIM1_Init+0x154>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000934:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <MX_TIM1_Init+0x154>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800093a:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <MX_TIM1_Init+0x154>)
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000940:	4839      	ldr	r0, [pc, #228]	; (8000a28 <MX_TIM1_Init+0x154>)
 8000942:	f007 f8fb 	bl	8007b3c <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800094c:	f002 fb26 	bl	8002f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000956:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800095a:	4619      	mov	r1, r3
 800095c:	4832      	ldr	r0, [pc, #200]	; (8000a28 <MX_TIM1_Init+0x154>)
 800095e:	f008 f8d7 	bl	8008b10 <HAL_TIM_ConfigClockSource>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000968:	f002 fb18 	bl	8002f9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800096c:	482e      	ldr	r0, [pc, #184]	; (8000a28 <MX_TIM1_Init+0x154>)
 800096e:	f007 fa29 	bl	8007dc4 <HAL_TIM_PWM_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000978:	f002 fb10 	bl	8002f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800097c:	2340      	movs	r3, #64	; 0x40
 800097e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000988:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800098c:	4619      	mov	r1, r3
 800098e:	4826      	ldr	r0, [pc, #152]	; (8000a28 <MX_TIM1_Init+0x154>)
 8000990:	f008 ff68 	bl	8009864 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800099a:	f002 faff 	bl	8002f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800099e:	2370      	movs	r3, #112	; 0x70
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 800;
 80009a2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009c0:	2200      	movs	r2, #0
 80009c2:	4619      	mov	r1, r3
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <MX_TIM1_Init+0x154>)
 80009c6:	f007 fdc1 	bl	800854c <HAL_TIM_PWM_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80009d0:	f002 fae4 	bl	8002f9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4807      	ldr	r0, [pc, #28]	; (8000a28 <MX_TIM1_Init+0x154>)
 8000a0a:	f008 ff99 	bl	8009940 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000a14:	f002 fac2 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <MX_TIM1_Init+0x154>)
 8000a1a:	f002 fc99 	bl	8003350 <HAL_TIM_MspPostInit>

}
 8000a1e:	bf00      	nop
 8000a20:	3768      	adds	r7, #104	; 0x68
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20006724 	.word	0x20006724
 8000a2c:	40012c00 	.word	0x40012c00

08000a30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b094      	sub	sp, #80	; 0x50
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a72:	4b38      	ldr	r3, [pc, #224]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a7a:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 8000a86:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000a88:	f240 321f 	movw	r2, #799	; 0x31f
 8000a8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a9a:	482e      	ldr	r0, [pc, #184]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000a9c:	f007 f84e 	bl	8007b3c <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000aa6:	f002 fa79 	bl	8002f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4827      	ldr	r0, [pc, #156]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000ab8:	f008 f82a 	bl	8008b10 <HAL_TIM_ConfigClockSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ac2:	f002 fa6b 	bl	8002f9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ac6:	4823      	ldr	r0, [pc, #140]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000ac8:	f007 f91b 	bl	8007d02 <HAL_TIM_OC_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8000ad2:	f002 fa63 	bl	8002f9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	481e      	ldr	r0, [pc, #120]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000ada:	f007 fb43 	bl	8008164 <HAL_TIM_OnePulse_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000ae4:	f002 fa5a 	bl	8002f9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ae8:	2306      	movs	r3, #6
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000aec:	2320      	movs	r3, #32
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af4:	4619      	mov	r1, r3
 8000af6:	4817      	ldr	r0, [pc, #92]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000af8:	f008 f8d3 	bl	8008ca2 <HAL_TIM_SlaveConfigSynchro>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000b02:	f002 fa4b 	bl	8002f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b06:	2320      	movs	r3, #32
 8000b08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	4619      	mov	r1, r3
 8000b14:	480f      	ldr	r0, [pc, #60]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000b16:	f008 fea5 	bl	8009864 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000b20:	f002 fa3c 	bl	8002f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2204      	movs	r2, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_TIM2_Init+0x124>)
 8000b3c:	f007 fc8c 	bl	8008458 <HAL_TIM_OC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000b46:	f002 fa29 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3750      	adds	r7, #80	; 0x50
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20008190 	.word	0x20008190

08000b58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b094      	sub	sp, #80	; 0x50
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
 8000b96:	615a      	str	r2, [r3, #20]
 8000b98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000b9c:	4a34      	ldr	r2, [pc, #208]	; (8000c70 <MX_TIM3_Init+0x118>)
 8000b9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ba0:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8000bac:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000bae:	224f      	movs	r2, #79	; 0x4f
 8000bb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb8:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bbe:	482b      	ldr	r0, [pc, #172]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000bc0:	f006 ffbc 	bl	8007b3c <HAL_TIM_Base_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000bca:	f002 f9e7 	bl	8002f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4824      	ldr	r0, [pc, #144]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000bdc:	f007 ff98 	bl	8008b10 <HAL_TIM_ConfigClockSource>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000be6:	f002 f9d9 	bl	8002f9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bea:	4820      	ldr	r0, [pc, #128]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000bec:	f007 f8ea 	bl	8007dc4 <HAL_TIM_PWM_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000bf6:	f002 f9d1 	bl	8002f9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c06:	4619      	mov	r1, r3
 8000c08:	4818      	ldr	r0, [pc, #96]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000c0a:	f008 f84a 	bl	8008ca2 <HAL_TIM_SlaveConfigSynchro>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000c14:	f002 f9c2 	bl	8002f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8000c18:	2340      	movs	r3, #64	; 0x40
 8000c1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	4619      	mov	r1, r3
 8000c26:	4811      	ldr	r0, [pc, #68]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000c28:	f008 fe1c 	bl	8009864 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000c32:	f002 f9b3 	bl	8002f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000c36:	2370      	movs	r3, #112	; 0x70
 8000c38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 80;
 8000c3a:	2350      	movs	r3, #80	; 0x50
 8000c3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4807      	ldr	r0, [pc, #28]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000c4e:	f007 fc7d 	bl	800854c <HAL_TIM_PWM_ConfigChannel>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000c58:	f002 f9a0 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <MX_TIM3_Init+0x114>)
 8000c5e:	f002 fb77 	bl	8003350 <HAL_TIM_MspPostInit>

}
 8000c62:	bf00      	nop
 8000c64:	3750      	adds	r7, #80	; 0x50
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20003ca0 	.word	0x20003ca0
 8000c70:	40000400 	.word	0x40000400

08000c74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c7a:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <MX_USART2_UART_Init+0x5c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cb8:	f008 ff06 	bl	8009ac8 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cc2:	f002 f96b 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000868c 	.word	0x2000868c
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <MX_DMA_Init+0x80>)
 8000cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cde:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <MX_DMA_Init+0x80>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_DMA_Init+0x80>)
 8000ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_DMA_Init+0x80>)
 8000cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cf6:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x80>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6493      	str	r3, [r2, #72]	; 0x48
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x80>)
 8000d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	200d      	movs	r0, #13
 8000d10:	f004 fc23 	bl	800555a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d14:	200d      	movs	r0, #13
 8000d16:	f004 fc3c 	bl	8005592 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2010      	movs	r0, #16
 8000d20:	f004 fc1b 	bl	800555a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d24:	2010      	movs	r0, #16
 8000d26:	f004 fc34 	bl	8005592 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2011      	movs	r0, #17
 8000d30:	f004 fc13 	bl	800555a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d34:	2011      	movs	r0, #17
 8000d36:	f004 fc2c 	bl	8005592 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	203a      	movs	r0, #58	; 0x3a
 8000d40:	f004 fc0b 	bl	800555a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000d44:	203a      	movs	r0, #58	; 0x3a
 8000d46:	f004 fc24 	bl	8005592 <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <MX_GPIO_Init+0xcc>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a2c      	ldr	r2, [pc, #176]	; (8000e24 <MX_GPIO_Init+0xcc>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <MX_GPIO_Init+0xcc>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <MX_GPIO_Init+0xcc>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <MX_GPIO_Init+0xcc>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <MX_GPIO_Init+0xcc>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_GPIO_Init+0xcc>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <MX_GPIO_Init+0xcc>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_GPIO_Init+0xcc>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8000dbc:	481a      	ldr	r0, [pc, #104]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000dbe:	f004 fff3 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB5 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8000dc2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000dc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4813      	ldr	r0, [pc, #76]	; (8000e28 <MX_GPIO_Init+0xd0>)
 8000ddc:	f004 fe6a 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_0;
 8000de0:	2321      	movs	r3, #33	; 0x21
 8000de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f004 fe5c 	bl	8005ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2006      	movs	r0, #6
 8000e02:	f004 fbaa 	bl	800555a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e06:	2006      	movs	r0, #6
 8000e08:	f004 fbc3 	bl	8005592 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2017      	movs	r0, #23
 8000e12:	f004 fba2 	bl	800555a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e16:	2017      	movs	r0, #23
 8000e18:	f004 fbbb 	bl	8005592 <HAL_NVIC_EnableIRQ>

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	48000400 	.word	0x48000400

08000e2c <chkcommand2>:
  * @brief 受信コマンド解析
  * @param None
  * @retval None
  */
void chkcommand2(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b09e      	sub	sp, #120	; 0x78
 8000e30:	af00      	add	r7, sp, #0
	char * para;
	char paraData[30];
	uint32_t data = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	677b      	str	r3, [r7, #116]	; 0x74
	char strouttemp[80];

	if ((RxBuff[0] == 'S' || RxBuff[0] == 's') && (RxBuff[1] == '\r' ) &&  (RxBuff[2] == '\n')  ) {
 8000e36:	4baa      	ldr	r3, [pc, #680]	; (80010e0 <chkcommand2+0x2b4>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b53      	cmp	r3, #83	; 0x53
 8000e3c:	d004      	beq.n	8000e48 <chkcommand2+0x1c>
 8000e3e:	4ba8      	ldr	r3, [pc, #672]	; (80010e0 <chkcommand2+0x2b4>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b73      	cmp	r3, #115	; 0x73
 8000e44:	f041 8212 	bne.w	800226c <chkcommand2+0x1440>
 8000e48:	4ba5      	ldr	r3, [pc, #660]	; (80010e0 <chkcommand2+0x2b4>)
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	2b0d      	cmp	r3, #13
 8000e4e:	f041 820d 	bne.w	800226c <chkcommand2+0x1440>
 8000e52:	4ba3      	ldr	r3, [pc, #652]	; (80010e0 <chkcommand2+0x2b4>)
 8000e54:	789b      	ldrb	r3, [r3, #2]
 8000e56:	2b0a      	cmp	r3, #10
 8000e58:	f041 8208 	bne.w	800226c <chkcommand2+0x1440>
		TestStart_Heating();						//加熱
 8000e5c:	f001 fca0 	bl	80027a0 <TestStart_Heating>

		//double pulse test
		TestStart(u32ADC_StartDelay, ADCValues00);	//ADC
 8000e60:	4ba0      	ldr	r3, [pc, #640]	; (80010e4 <chkcommand2+0x2b8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	49a0      	ldr	r1, [pc, #640]	; (80010e8 <chkcommand2+0x2bc>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fd52 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues01);	//ADC
 8000e6c:	4b9d      	ldr	r3, [pc, #628]	; (80010e4 <chkcommand2+0x2b8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	499e      	ldr	r1, [pc, #632]	; (80010ec <chkcommand2+0x2c0>)
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 fd4c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues02);	//ADC
 8000e78:	4b9a      	ldr	r3, [pc, #616]	; (80010e4 <chkcommand2+0x2b8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	499c      	ldr	r1, [pc, #624]	; (80010f0 <chkcommand2+0x2c4>)
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fd46 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues03);	//ADC
 8000e84:	4b97      	ldr	r3, [pc, #604]	; (80010e4 <chkcommand2+0x2b8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	499a      	ldr	r1, [pc, #616]	; (80010f4 <chkcommand2+0x2c8>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 fd40 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues04);	//ADC
 8000e90:	4b94      	ldr	r3, [pc, #592]	; (80010e4 <chkcommand2+0x2b8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4998      	ldr	r1, [pc, #608]	; (80010f8 <chkcommand2+0x2cc>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 fd3a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues05);	//ADC
 8000e9c:	4b91      	ldr	r3, [pc, #580]	; (80010e4 <chkcommand2+0x2b8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4996      	ldr	r1, [pc, #600]	; (80010fc <chkcommand2+0x2d0>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 fd34 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues06);	//ADC
 8000ea8:	4b8e      	ldr	r3, [pc, #568]	; (80010e4 <chkcommand2+0x2b8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4994      	ldr	r1, [pc, #592]	; (8001100 <chkcommand2+0x2d4>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fd2e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues07);	//ADC
 8000eb4:	4b8b      	ldr	r3, [pc, #556]	; (80010e4 <chkcommand2+0x2b8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4992      	ldr	r1, [pc, #584]	; (8001104 <chkcommand2+0x2d8>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fd28 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues08);	//ADC
 8000ec0:	4b88      	ldr	r3, [pc, #544]	; (80010e4 <chkcommand2+0x2b8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4990      	ldr	r1, [pc, #576]	; (8001108 <chkcommand2+0x2dc>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fd22 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues09);	//ADC
 8000ecc:	4b85      	ldr	r3, [pc, #532]	; (80010e4 <chkcommand2+0x2b8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	498e      	ldr	r1, [pc, #568]	; (800110c <chkcommand2+0x2e0>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fd1c 	bl	8002910 <TestStart>

		TestStart(u32ADC_StartDelay, ADCValues10);	//ADC
 8000ed8:	4b82      	ldr	r3, [pc, #520]	; (80010e4 <chkcommand2+0x2b8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	498c      	ldr	r1, [pc, #560]	; (8001110 <chkcommand2+0x2e4>)
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fd16 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues11);	//ADC
 8000ee4:	4b7f      	ldr	r3, [pc, #508]	; (80010e4 <chkcommand2+0x2b8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	498a      	ldr	r1, [pc, #552]	; (8001114 <chkcommand2+0x2e8>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fd10 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues12);	//ADC
 8000ef0:	4b7c      	ldr	r3, [pc, #496]	; (80010e4 <chkcommand2+0x2b8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4988      	ldr	r1, [pc, #544]	; (8001118 <chkcommand2+0x2ec>)
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fd0a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues13);	//ADC
 8000efc:	4b79      	ldr	r3, [pc, #484]	; (80010e4 <chkcommand2+0x2b8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4986      	ldr	r1, [pc, #536]	; (800111c <chkcommand2+0x2f0>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fd04 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues14);	//ADC
 8000f08:	4b76      	ldr	r3, [pc, #472]	; (80010e4 <chkcommand2+0x2b8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4984      	ldr	r1, [pc, #528]	; (8001120 <chkcommand2+0x2f4>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fcfe 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues15);	//ADC
 8000f14:	4b73      	ldr	r3, [pc, #460]	; (80010e4 <chkcommand2+0x2b8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4982      	ldr	r1, [pc, #520]	; (8001124 <chkcommand2+0x2f8>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fcf8 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues16);	//ADC
 8000f20:	4b70      	ldr	r3, [pc, #448]	; (80010e4 <chkcommand2+0x2b8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4980      	ldr	r1, [pc, #512]	; (8001128 <chkcommand2+0x2fc>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fcf2 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues17);	//ADC
 8000f2c:	4b6d      	ldr	r3, [pc, #436]	; (80010e4 <chkcommand2+0x2b8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	497e      	ldr	r1, [pc, #504]	; (800112c <chkcommand2+0x300>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fcec 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues18);	//ADC
 8000f38:	4b6a      	ldr	r3, [pc, #424]	; (80010e4 <chkcommand2+0x2b8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	497c      	ldr	r1, [pc, #496]	; (8001130 <chkcommand2+0x304>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fce6 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues19);	//ADC
 8000f44:	4b67      	ldr	r3, [pc, #412]	; (80010e4 <chkcommand2+0x2b8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	497a      	ldr	r1, [pc, #488]	; (8001134 <chkcommand2+0x308>)
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fce0 	bl	8002910 <TestStart>

		TestStart(u32ADC_StartDelay, ADCValues20);	//ADC
 8000f50:	4b64      	ldr	r3, [pc, #400]	; (80010e4 <chkcommand2+0x2b8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4978      	ldr	r1, [pc, #480]	; (8001138 <chkcommand2+0x30c>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 fcda 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues21);	//ADC
 8000f5c:	4b61      	ldr	r3, [pc, #388]	; (80010e4 <chkcommand2+0x2b8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4976      	ldr	r1, [pc, #472]	; (800113c <chkcommand2+0x310>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fcd4 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues22);	//ADC
 8000f68:	4b5e      	ldr	r3, [pc, #376]	; (80010e4 <chkcommand2+0x2b8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4974      	ldr	r1, [pc, #464]	; (8001140 <chkcommand2+0x314>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fcce 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues23);	//ADC
 8000f74:	4b5b      	ldr	r3, [pc, #364]	; (80010e4 <chkcommand2+0x2b8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4972      	ldr	r1, [pc, #456]	; (8001144 <chkcommand2+0x318>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fcc8 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues24);	//ADC
 8000f80:	4b58      	ldr	r3, [pc, #352]	; (80010e4 <chkcommand2+0x2b8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4970      	ldr	r1, [pc, #448]	; (8001148 <chkcommand2+0x31c>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 fcc2 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues25);	//ADC
 8000f8c:	4b55      	ldr	r3, [pc, #340]	; (80010e4 <chkcommand2+0x2b8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	496e      	ldr	r1, [pc, #440]	; (800114c <chkcommand2+0x320>)
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 fcbc 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues26);	//ADC
 8000f98:	4b52      	ldr	r3, [pc, #328]	; (80010e4 <chkcommand2+0x2b8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	496c      	ldr	r1, [pc, #432]	; (8001150 <chkcommand2+0x324>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fcb6 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues27);	//ADC
 8000fa4:	4b4f      	ldr	r3, [pc, #316]	; (80010e4 <chkcommand2+0x2b8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	496a      	ldr	r1, [pc, #424]	; (8001154 <chkcommand2+0x328>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 fcb0 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues28);	//ADC
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <chkcommand2+0x2b8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4968      	ldr	r1, [pc, #416]	; (8001158 <chkcommand2+0x32c>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fcaa 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues29);	//ADC
 8000fbc:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <chkcommand2+0x2b8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4966      	ldr	r1, [pc, #408]	; (800115c <chkcommand2+0x330>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 fca4 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues30);	//ADC
 8000fc8:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <chkcommand2+0x2b8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4964      	ldr	r1, [pc, #400]	; (8001160 <chkcommand2+0x334>)
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fc9e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues31);	//ADC
 8000fd4:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <chkcommand2+0x2b8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4962      	ldr	r1, [pc, #392]	; (8001164 <chkcommand2+0x338>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fc98 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues32);	//ADC
 8000fe0:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <chkcommand2+0x2b8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4960      	ldr	r1, [pc, #384]	; (8001168 <chkcommand2+0x33c>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fc92 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues33);	//ADC
 8000fec:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <chkcommand2+0x2b8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	495e      	ldr	r1, [pc, #376]	; (800116c <chkcommand2+0x340>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fc8c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues34);	//ADC
 8000ff8:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <chkcommand2+0x2b8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	495c      	ldr	r1, [pc, #368]	; (8001170 <chkcommand2+0x344>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fc86 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues35);	//ADC
 8001004:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <chkcommand2+0x2b8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	495a      	ldr	r1, [pc, #360]	; (8001174 <chkcommand2+0x348>)
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fc80 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues36);	//ADC
 8001010:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <chkcommand2+0x2b8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4958      	ldr	r1, [pc, #352]	; (8001178 <chkcommand2+0x34c>)
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fc7a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues37);	//ADC
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <chkcommand2+0x2b8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4956      	ldr	r1, [pc, #344]	; (800117c <chkcommand2+0x350>)
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fc74 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues38);	//ADC
 8001028:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <chkcommand2+0x2b8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4954      	ldr	r1, [pc, #336]	; (8001180 <chkcommand2+0x354>)
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fc6e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues39);	//ADC
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <chkcommand2+0x2b8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4952      	ldr	r1, [pc, #328]	; (8001184 <chkcommand2+0x358>)
 800103a:	4618      	mov	r0, r3
 800103c:	f001 fc68 	bl	8002910 <TestStart>

		TestStart(u32ADC_StartDelay, ADCValues40);	//ADC
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <chkcommand2+0x2b8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4950      	ldr	r1, [pc, #320]	; (8001188 <chkcommand2+0x35c>)
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fc62 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues41);	//ADC
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <chkcommand2+0x2b8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	494e      	ldr	r1, [pc, #312]	; (800118c <chkcommand2+0x360>)
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fc5c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues42);	//ADC
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <chkcommand2+0x2b8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	494c      	ldr	r1, [pc, #304]	; (8001190 <chkcommand2+0x364>)
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fc56 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues43);	//ADC
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <chkcommand2+0x2b8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	494a      	ldr	r1, [pc, #296]	; (8001194 <chkcommand2+0x368>)
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fc50 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues44);	//ADC
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <chkcommand2+0x2b8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4948      	ldr	r1, [pc, #288]	; (8001198 <chkcommand2+0x36c>)
 8001076:	4618      	mov	r0, r3
 8001078:	f001 fc4a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues45);	//ADC
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <chkcommand2+0x2b8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4946      	ldr	r1, [pc, #280]	; (800119c <chkcommand2+0x370>)
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fc44 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues46);	//ADC
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <chkcommand2+0x2b8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4944      	ldr	r1, [pc, #272]	; (80011a0 <chkcommand2+0x374>)
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fc3e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues47);	//ADC
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <chkcommand2+0x2b8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4942      	ldr	r1, [pc, #264]	; (80011a4 <chkcommand2+0x378>)
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fc38 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues48);	//ADC
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <chkcommand2+0x2b8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4940      	ldr	r1, [pc, #256]	; (80011a8 <chkcommand2+0x37c>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 fc32 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues49);	//ADC
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <chkcommand2+0x2b8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	493e      	ldr	r1, [pc, #248]	; (80011ac <chkcommand2+0x380>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 fc2c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues50);	//ADC
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <chkcommand2+0x2b8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	493c      	ldr	r1, [pc, #240]	; (80011b0 <chkcommand2+0x384>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 fc26 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues51);	//ADC
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <chkcommand2+0x2b8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	493a      	ldr	r1, [pc, #232]	; (80011b4 <chkcommand2+0x388>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fc20 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues52);	//ADC
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <chkcommand2+0x2b8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4938      	ldr	r1, [pc, #224]	; (80011b8 <chkcommand2+0x38c>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fc1a 	bl	8002910 <TestStart>
 80010dc:	e06e      	b.n	80011bc <chkcommand2+0x390>
 80010de:	bf00      	nop
 80010e0:	20007bb0 	.word	0x20007bb0
 80010e4:	20000188 	.word	0x20000188
 80010e8:	20000e64 	.word	0x20000e64
 80010ec:	20003610 	.word	0x20003610
 80010f0:	20003ac0 	.word	0x20003ac0
 80010f4:	20002530 	.word	0x20002530
 80010f8:	20005e6c 	.word	0x20005e6c
 80010fc:	20001224 	.word	0x20001224
 8001100:	20009470 	.word	0x20009470
 8001104:	2000505c 	.word	0x2000505c
 8001108:	200046b4 	.word	0x200046b4
 800110c:	20002260 	.word	0x20002260
 8001110:	200090b0 	.word	0x200090b0
 8001114:	20006184 	.word	0x20006184
 8001118:	20000f54 	.word	0x20000f54
 800111c:	20000324 	.word	0x20000324
 8001120:	20008c00 	.word	0x20008c00
 8001124:	20003160 	.word	0x20003160
 8001128:	20006c20 	.word	0x20006c20
 800112c:	20000234 	.word	0x20000234
 8001130:	20004f6c 	.word	0x20004f6c
 8001134:	20002620 	.word	0x20002620
 8001138:	20001ae0 	.word	0x20001ae0
 800113c:	200049cc 	.word	0x200049cc
 8001140:	2000419c 	.word	0x2000419c
 8001144:	200028f0 	.word	0x200028f0
 8001148:	20007430 	.word	0x20007430
 800114c:	20003250 	.word	0x20003250
 8001150:	20006454 	.word	0x20006454
 8001154:	20000b94 	.word	0x20000b94
 8001158:	20008cf0 	.word	0x20008cf0
 800115c:	200084ac 	.word	0x200084ac
 8001160:	20002170 	.word	0x20002170
 8001164:	20009a10 	.word	0x20009a10
 8001168:	200057dc 	.word	0x200057dc
 800116c:	20009b00 	.word	0x20009b00
 8001170:	200047ec 	.word	0x200047ec
 8001174:	20006e00 	.word	0x20006e00
 8001178:	200078e0 	.word	0x200078e0
 800117c:	200091a0 	.word	0x200091a0
 8001180:	20001bd0 	.word	0x20001bd0
 8001184:	20007160 	.word	0x20007160
 8001188:	2000550c 	.word	0x2000550c
 800118c:	20006770 	.word	0x20006770
 8001190:	20003700 	.word	0x20003700
 8001194:	2000a0a0 	.word	0x2000a0a0
 8001198:	200058cc 	.word	0x200058cc
 800119c:	200006e4 	.word	0x200006e4
 80011a0:	20003070 	.word	0x20003070
 80011a4:	20003430 	.word	0x20003430
 80011a8:	20002800 	.word	0x20002800
 80011ac:	20006094 	.word	0x20006094
 80011b0:	20007ac0 	.word	0x20007ac0
 80011b4:	200016d4 	.word	0x200016d4
 80011b8:	20002cb0 	.word	0x20002cb0
		TestStart(u32ADC_StartDelay, ADCValues53);	//ADC
 80011bc:	4ba9      	ldr	r3, [pc, #676]	; (8001464 <chkcommand2+0x638>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	49a9      	ldr	r1, [pc, #676]	; (8001468 <chkcommand2+0x63c>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fba4 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues54);	//ADC
 80011c8:	4ba6      	ldr	r3, [pc, #664]	; (8001464 <chkcommand2+0x638>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	49a7      	ldr	r1, [pc, #668]	; (800146c <chkcommand2+0x640>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fb9e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues55);	//ADC
 80011d4:	4ba3      	ldr	r3, [pc, #652]	; (8001464 <chkcommand2+0x638>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	49a5      	ldr	r1, [pc, #660]	; (8001470 <chkcommand2+0x644>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 fb98 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues56);	//ADC
 80011e0:	4ba0      	ldr	r3, [pc, #640]	; (8001464 <chkcommand2+0x638>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	49a3      	ldr	r1, [pc, #652]	; (8001474 <chkcommand2+0x648>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fb92 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues57);	//ADC
 80011ec:	4b9d      	ldr	r3, [pc, #628]	; (8001464 <chkcommand2+0x638>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	49a1      	ldr	r1, [pc, #644]	; (8001478 <chkcommand2+0x64c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 fb8c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues58);	//ADC
 80011f8:	4b9a      	ldr	r3, [pc, #616]	; (8001464 <chkcommand2+0x638>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	499f      	ldr	r1, [pc, #636]	; (800147c <chkcommand2+0x650>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fb86 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues59);	//ADC
 8001204:	4b97      	ldr	r3, [pc, #604]	; (8001464 <chkcommand2+0x638>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	499d      	ldr	r1, [pc, #628]	; (8001480 <chkcommand2+0x654>)
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fb80 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues60);	//ADC
 8001210:	4b94      	ldr	r3, [pc, #592]	; (8001464 <chkcommand2+0x638>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	499b      	ldr	r1, [pc, #620]	; (8001484 <chkcommand2+0x658>)
 8001216:	4618      	mov	r0, r3
 8001218:	f001 fb7a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues61);	//ADC
 800121c:	4b91      	ldr	r3, [pc, #580]	; (8001464 <chkcommand2+0x638>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4999      	ldr	r1, [pc, #612]	; (8001488 <chkcommand2+0x65c>)
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fb74 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues62);	//ADC
 8001228:	4b8e      	ldr	r3, [pc, #568]	; (8001464 <chkcommand2+0x638>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4997      	ldr	r1, [pc, #604]	; (800148c <chkcommand2+0x660>)
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fb6e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues63);	//ADC
 8001234:	4b8b      	ldr	r3, [pc, #556]	; (8001464 <chkcommand2+0x638>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4995      	ldr	r1, [pc, #596]	; (8001490 <chkcommand2+0x664>)
 800123a:	4618      	mov	r0, r3
 800123c:	f001 fb68 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues64);	//ADC
 8001240:	4b88      	ldr	r3, [pc, #544]	; (8001464 <chkcommand2+0x638>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4993      	ldr	r1, [pc, #588]	; (8001494 <chkcommand2+0x668>)
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fb62 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues65);	//ADC
 800124c:	4b85      	ldr	r3, [pc, #532]	; (8001464 <chkcommand2+0x638>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4991      	ldr	r1, [pc, #580]	; (8001498 <chkcommand2+0x66c>)
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fb5c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues66);	//ADC
 8001258:	4b82      	ldr	r3, [pc, #520]	; (8001464 <chkcommand2+0x638>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	498f      	ldr	r1, [pc, #572]	; (800149c <chkcommand2+0x670>)
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fb56 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues67);	//ADC
 8001264:	4b7f      	ldr	r3, [pc, #508]	; (8001464 <chkcommand2+0x638>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	498d      	ldr	r1, [pc, #564]	; (80014a0 <chkcommand2+0x674>)
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fb50 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues68);	//ADC
 8001270:	4b7c      	ldr	r3, [pc, #496]	; (8001464 <chkcommand2+0x638>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	498b      	ldr	r1, [pc, #556]	; (80014a4 <chkcommand2+0x678>)
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fb4a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues69);	//ADC
 800127c:	4b79      	ldr	r3, [pc, #484]	; (8001464 <chkcommand2+0x638>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4989      	ldr	r1, [pc, #548]	; (80014a8 <chkcommand2+0x67c>)
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fb44 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues70);	//ADC
 8001288:	4b76      	ldr	r3, [pc, #472]	; (8001464 <chkcommand2+0x638>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4987      	ldr	r1, [pc, #540]	; (80014ac <chkcommand2+0x680>)
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fb3e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues71);	//ADC
 8001294:	4b73      	ldr	r3, [pc, #460]	; (8001464 <chkcommand2+0x638>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4985      	ldr	r1, [pc, #532]	; (80014b0 <chkcommand2+0x684>)
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fb38 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues72);	//ADC
 80012a0:	4b70      	ldr	r3, [pc, #448]	; (8001464 <chkcommand2+0x638>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4983      	ldr	r1, [pc, #524]	; (80014b4 <chkcommand2+0x688>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fb32 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues73);	//ADC
 80012ac:	4b6d      	ldr	r3, [pc, #436]	; (8001464 <chkcommand2+0x638>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4981      	ldr	r1, [pc, #516]	; (80014b8 <chkcommand2+0x68c>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fb2c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues74);	//ADC
 80012b8:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <chkcommand2+0x638>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	497f      	ldr	r1, [pc, #508]	; (80014bc <chkcommand2+0x690>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fb26 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues75);	//ADC
 80012c4:	4b67      	ldr	r3, [pc, #412]	; (8001464 <chkcommand2+0x638>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	497d      	ldr	r1, [pc, #500]	; (80014c0 <chkcommand2+0x694>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 fb20 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues76);	//ADC
 80012d0:	4b64      	ldr	r3, [pc, #400]	; (8001464 <chkcommand2+0x638>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	497b      	ldr	r1, [pc, #492]	; (80014c4 <chkcommand2+0x698>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fb1a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues77);	//ADC
 80012dc:	4b61      	ldr	r3, [pc, #388]	; (8001464 <chkcommand2+0x638>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4979      	ldr	r1, [pc, #484]	; (80014c8 <chkcommand2+0x69c>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 fb14 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues78);	//ADC
 80012e8:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <chkcommand2+0x638>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4977      	ldr	r1, [pc, #476]	; (80014cc <chkcommand2+0x6a0>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 fb0e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues79);	//ADC
 80012f4:	4b5b      	ldr	r3, [pc, #364]	; (8001464 <chkcommand2+0x638>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4975      	ldr	r1, [pc, #468]	; (80014d0 <chkcommand2+0x6a4>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 fb08 	bl	8002910 <TestStart>

		TestStart(u32ADC_StartDelay, ADCValues80);	//ADC
 8001300:	4b58      	ldr	r3, [pc, #352]	; (8001464 <chkcommand2+0x638>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4973      	ldr	r1, [pc, #460]	; (80014d4 <chkcommand2+0x6a8>)
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fb02 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues81);	//ADC
 800130c:	4b55      	ldr	r3, [pc, #340]	; (8001464 <chkcommand2+0x638>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4971      	ldr	r1, [pc, #452]	; (80014d8 <chkcommand2+0x6ac>)
 8001312:	4618      	mov	r0, r3
 8001314:	f001 fafc 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues82);	//ADC
 8001318:	4b52      	ldr	r3, [pc, #328]	; (8001464 <chkcommand2+0x638>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	496f      	ldr	r1, [pc, #444]	; (80014dc <chkcommand2+0x6b0>)
 800131e:	4618      	mov	r0, r3
 8001320:	f001 faf6 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues83);	//ADC
 8001324:	4b4f      	ldr	r3, [pc, #316]	; (8001464 <chkcommand2+0x638>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	496d      	ldr	r1, [pc, #436]	; (80014e0 <chkcommand2+0x6b4>)
 800132a:	4618      	mov	r0, r3
 800132c:	f001 faf0 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues84);	//ADC
 8001330:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <chkcommand2+0x638>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	496b      	ldr	r1, [pc, #428]	; (80014e4 <chkcommand2+0x6b8>)
 8001336:	4618      	mov	r0, r3
 8001338:	f001 faea 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues85);	//ADC
 800133c:	4b49      	ldr	r3, [pc, #292]	; (8001464 <chkcommand2+0x638>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4969      	ldr	r1, [pc, #420]	; (80014e8 <chkcommand2+0x6bc>)
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fae4 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues86);	//ADC
 8001348:	4b46      	ldr	r3, [pc, #280]	; (8001464 <chkcommand2+0x638>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4967      	ldr	r1, [pc, #412]	; (80014ec <chkcommand2+0x6c0>)
 800134e:	4618      	mov	r0, r3
 8001350:	f001 fade 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues87);	//ADC
 8001354:	4b43      	ldr	r3, [pc, #268]	; (8001464 <chkcommand2+0x638>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4965      	ldr	r1, [pc, #404]	; (80014f0 <chkcommand2+0x6c4>)
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fad8 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues88);	//ADC
 8001360:	4b40      	ldr	r3, [pc, #256]	; (8001464 <chkcommand2+0x638>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4963      	ldr	r1, [pc, #396]	; (80014f4 <chkcommand2+0x6c8>)
 8001366:	4618      	mov	r0, r3
 8001368:	f001 fad2 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues89);	//ADC
 800136c:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <chkcommand2+0x638>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4961      	ldr	r1, [pc, #388]	; (80014f8 <chkcommand2+0x6cc>)
 8001372:	4618      	mov	r0, r3
 8001374:	f001 facc 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues90);	//ADC
 8001378:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <chkcommand2+0x638>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	495f      	ldr	r1, [pc, #380]	; (80014fc <chkcommand2+0x6d0>)
 800137e:	4618      	mov	r0, r3
 8001380:	f001 fac6 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues91);	//ADC
 8001384:	4b37      	ldr	r3, [pc, #220]	; (8001464 <chkcommand2+0x638>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	495d      	ldr	r1, [pc, #372]	; (8001500 <chkcommand2+0x6d4>)
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fac0 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues92);	//ADC
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <chkcommand2+0x638>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	495b      	ldr	r1, [pc, #364]	; (8001504 <chkcommand2+0x6d8>)
 8001396:	4618      	mov	r0, r3
 8001398:	f001 faba 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues93);	//ADC
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <chkcommand2+0x638>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4959      	ldr	r1, [pc, #356]	; (8001508 <chkcommand2+0x6dc>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fab4 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues94);	//ADC
 80013a8:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <chkcommand2+0x638>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4957      	ldr	r1, [pc, #348]	; (800150c <chkcommand2+0x6e0>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 faae 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues95);	//ADC
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <chkcommand2+0x638>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4955      	ldr	r1, [pc, #340]	; (8001510 <chkcommand2+0x6e4>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 faa8 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues96);	//ADC
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <chkcommand2+0x638>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4953      	ldr	r1, [pc, #332]	; (8001514 <chkcommand2+0x6e8>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 faa2 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues97);	//ADC
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <chkcommand2+0x638>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4951      	ldr	r1, [pc, #324]	; (8001518 <chkcommand2+0x6ec>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fa9c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues98);	//ADC
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <chkcommand2+0x638>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	494f      	ldr	r1, [pc, #316]	; (800151c <chkcommand2+0x6f0>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fa96 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValues99);	//ADC
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <chkcommand2+0x638>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	494d      	ldr	r1, [pc, #308]	; (8001520 <chkcommand2+0x6f4>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fa90 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesA0);	//ADC
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <chkcommand2+0x638>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	494b      	ldr	r1, [pc, #300]	; (8001524 <chkcommand2+0x6f8>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fa8a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesA1);	//ADC
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <chkcommand2+0x638>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4949      	ldr	r1, [pc, #292]	; (8001528 <chkcommand2+0x6fc>)
 8001402:	4618      	mov	r0, r3
 8001404:	f001 fa84 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesA2);	//ADC
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <chkcommand2+0x638>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4947      	ldr	r1, [pc, #284]	; (800152c <chkcommand2+0x700>)
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fa7e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesA3);	//ADC
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <chkcommand2+0x638>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4945      	ldr	r1, [pc, #276]	; (8001530 <chkcommand2+0x704>)
 800141a:	4618      	mov	r0, r3
 800141c:	f001 fa78 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesA4);	//ADC
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <chkcommand2+0x638>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4943      	ldr	r1, [pc, #268]	; (8001534 <chkcommand2+0x708>)
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fa72 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesA5);	//ADC
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <chkcommand2+0x638>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4941      	ldr	r1, [pc, #260]	; (8001538 <chkcommand2+0x70c>)
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fa6c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesA6);	//ADC
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <chkcommand2+0x638>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	493f      	ldr	r1, [pc, #252]	; (800153c <chkcommand2+0x710>)
 800143e:	4618      	mov	r0, r3
 8001440:	f001 fa66 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesA7);	//ADC
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <chkcommand2+0x638>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	493d      	ldr	r1, [pc, #244]	; (8001540 <chkcommand2+0x714>)
 800144a:	4618      	mov	r0, r3
 800144c:	f001 fa60 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesA8);	//ADC
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <chkcommand2+0x638>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	493b      	ldr	r1, [pc, #236]	; (8001544 <chkcommand2+0x718>)
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fa5a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesA9);	//ADC
 800145c:	4b01      	ldr	r3, [pc, #4]	; (8001464 <chkcommand2+0x638>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	e072      	b.n	8001548 <chkcommand2+0x71c>
 8001462:	bf00      	nop
 8001464:	20000188 	.word	0x20000188
 8001468:	20009290 	.word	0x20009290
 800146c:	20005d7c 	.word	0x20005d7c
 8001470:	200008c4 	.word	0x200008c4
 8001474:	2000a190 	.word	0x2000a190
 8001478:	20008de0 	.word	0x20008de0
 800147c:	200037f0 	.word	0x200037f0
 8001480:	20007028 	.word	0x20007028
 8001484:	20001cc0 	.word	0x20001cc0
 8001488:	200019f0 	.word	0x200019f0
 800148c:	200079d0 	.word	0x200079d0
 8001490:	20009830 	.word	0x20009830
 8001494:	2000514c 	.word	0x2000514c
 8001498:	200017c4 	.word	0x200017c4
 800149c:	20004bac 	.word	0x20004bac
 80014a0:	2000428c 	.word	0x2000428c
 80014a4:	20002e90 	.word	0x20002e90
 80014a8:	20007610 	.word	0x20007610
 80014ac:	200038e0 	.word	0x200038e0
 80014b0:	200009b4 	.word	0x200009b4
 80014b4:	20001044 	.word	0x20001044
 80014b8:	20001ea0 	.word	0x20001ea0
 80014bc:	20009650 	.word	0x20009650
 80014c0:	20005b9c 	.word	0x20005b9c
 80014c4:	20009ce0 	.word	0x20009ce0
 80014c8:	200048dc 	.word	0x200048dc
 80014cc:	20006f38 	.word	0x20006f38
 80014d0:	20007340 	.word	0x20007340
 80014d4:	20006950 	.word	0x20006950
 80014d8:	200055fc 	.word	0x200055fc
 80014dc:	20006860 	.word	0x20006860
 80014e0:	20003bb0 	.word	0x20003bb0
 80014e4:	2000a280 	.word	0x2000a280
 80014e8:	20005aac 	.word	0x20005aac
 80014ec:	200005f4 	.word	0x200005f4
 80014f0:	20002f80 	.word	0x20002f80
 80014f4:	20003520 	.word	0x20003520
 80014f8:	20002ad0 	.word	0x20002ad0
 80014fc:	2000437c 	.word	0x2000437c
 8001500:	20006d10 	.word	0x20006d10
 8001504:	200018b4 	.word	0x200018b4
 8001508:	20002350 	.word	0x20002350
 800150c:	20009920 	.word	0x20009920
 8001510:	200045c4 	.word	0x200045c4
 8001514:	200077f0 	.word	0x200077f0
 8001518:	20007520 	.word	0x20007520
 800151c:	200015e4 	.word	0x200015e4
 8001520:	20002da0 	.word	0x20002da0
 8001524:	20006544 	.word	0x20006544
 8001528:	20003cec 	.word	0x20003cec
 800152c:	20000414 	.word	0x20000414
 8001530:	20003340 	.word	0x20003340
 8001534:	200080a0 	.word	0x200080a0
 8001538:	20009740 	.word	0x20009740
 800153c:	20005fa4 	.word	0x20005fa4
 8001540:	20001134 	.word	0x20001134
 8001544:	20000c84 	.word	0x20000c84
 8001548:	49ae      	ldr	r1, [pc, #696]	; (8001804 <chkcommand2+0x9d8>)
 800154a:	4618      	mov	r0, r3
 800154c:	f001 f9e0 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesB0);	//ADC
 8001550:	4bad      	ldr	r3, [pc, #692]	; (8001808 <chkcommand2+0x9dc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	49ad      	ldr	r1, [pc, #692]	; (800180c <chkcommand2+0x9e0>)
 8001556:	4618      	mov	r0, r3
 8001558:	f001 f9da 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesB1);	//ADC
 800155c:	4baa      	ldr	r3, [pc, #680]	; (8001808 <chkcommand2+0x9dc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	49ab      	ldr	r1, [pc, #684]	; (8001810 <chkcommand2+0x9e4>)
 8001562:	4618      	mov	r0, r3
 8001564:	f001 f9d4 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesB2);	//ADC
 8001568:	4ba7      	ldr	r3, [pc, #668]	; (8001808 <chkcommand2+0x9dc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	49a9      	ldr	r1, [pc, #676]	; (8001814 <chkcommand2+0x9e8>)
 800156e:	4618      	mov	r0, r3
 8001570:	f001 f9ce 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesB3);	//ADC
 8001574:	4ba4      	ldr	r3, [pc, #656]	; (8001808 <chkcommand2+0x9dc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	49a7      	ldr	r1, [pc, #668]	; (8001818 <chkcommand2+0x9ec>)
 800157a:	4618      	mov	r0, r3
 800157c:	f001 f9c8 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesB4);	//ADC
 8001580:	4ba1      	ldr	r3, [pc, #644]	; (8001808 <chkcommand2+0x9dc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	49a5      	ldr	r1, [pc, #660]	; (800181c <chkcommand2+0x9f0>)
 8001586:	4618      	mov	r0, r3
 8001588:	f001 f9c2 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesB5);	//ADC
 800158c:	4b9e      	ldr	r3, [pc, #632]	; (8001808 <chkcommand2+0x9dc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	49a3      	ldr	r1, [pc, #652]	; (8001820 <chkcommand2+0x9f4>)
 8001592:	4618      	mov	r0, r3
 8001594:	f001 f9bc 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesB6);	//ADC
 8001598:	4b9b      	ldr	r3, [pc, #620]	; (8001808 <chkcommand2+0x9dc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	49a1      	ldr	r1, [pc, #644]	; (8001824 <chkcommand2+0x9f8>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 f9b6 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesB7);	//ADC
 80015a4:	4b98      	ldr	r3, [pc, #608]	; (8001808 <chkcommand2+0x9dc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	499f      	ldr	r1, [pc, #636]	; (8001828 <chkcommand2+0x9fc>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 f9b0 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesB8);	//ADC
 80015b0:	4b95      	ldr	r3, [pc, #596]	; (8001808 <chkcommand2+0x9dc>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	499d      	ldr	r1, [pc, #628]	; (800182c <chkcommand2+0xa00>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 f9aa 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesB9);	//ADC
 80015bc:	4b92      	ldr	r3, [pc, #584]	; (8001808 <chkcommand2+0x9dc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	499b      	ldr	r1, [pc, #620]	; (8001830 <chkcommand2+0xa04>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 f9a4 	bl	8002910 <TestStart>

		TestStart(u32ADC_StartDelay, ADCValuesC0);	//ADC
 80015c8:	4b8f      	ldr	r3, [pc, #572]	; (8001808 <chkcommand2+0x9dc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4999      	ldr	r1, [pc, #612]	; (8001834 <chkcommand2+0xa08>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f001 f99e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesC1);	//ADC
 80015d4:	4b8c      	ldr	r3, [pc, #560]	; (8001808 <chkcommand2+0x9dc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4997      	ldr	r1, [pc, #604]	; (8001838 <chkcommand2+0xa0c>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 f998 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesC2);	//ADC
 80015e0:	4b89      	ldr	r3, [pc, #548]	; (8001808 <chkcommand2+0x9dc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4995      	ldr	r1, [pc, #596]	; (800183c <chkcommand2+0xa10>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 f992 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesC3);	//ADC
 80015ec:	4b86      	ldr	r3, [pc, #536]	; (8001808 <chkcommand2+0x9dc>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4993      	ldr	r1, [pc, #588]	; (8001840 <chkcommand2+0xa14>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 f98c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesC4);	//ADC
 80015f8:	4b83      	ldr	r3, [pc, #524]	; (8001808 <chkcommand2+0x9dc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4991      	ldr	r1, [pc, #580]	; (8001844 <chkcommand2+0xa18>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 f986 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesC5);	//ADC
 8001604:	4b80      	ldr	r3, [pc, #512]	; (8001808 <chkcommand2+0x9dc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	498f      	ldr	r1, [pc, #572]	; (8001848 <chkcommand2+0xa1c>)
 800160a:	4618      	mov	r0, r3
 800160c:	f001 f980 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesC6);	//ADC
 8001610:	4b7d      	ldr	r3, [pc, #500]	; (8001808 <chkcommand2+0x9dc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	498d      	ldr	r1, [pc, #564]	; (800184c <chkcommand2+0xa20>)
 8001616:	4618      	mov	r0, r3
 8001618:	f001 f97a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesC7);	//ADC
 800161c:	4b7a      	ldr	r3, [pc, #488]	; (8001808 <chkcommand2+0x9dc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	498b      	ldr	r1, [pc, #556]	; (8001850 <chkcommand2+0xa24>)
 8001622:	4618      	mov	r0, r3
 8001624:	f001 f974 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesC8);	//ADC
 8001628:	4b77      	ldr	r3, [pc, #476]	; (8001808 <chkcommand2+0x9dc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4989      	ldr	r1, [pc, #548]	; (8001854 <chkcommand2+0xa28>)
 800162e:	4618      	mov	r0, r3
 8001630:	f001 f96e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesC9);	//ADC
 8001634:	4b74      	ldr	r3, [pc, #464]	; (8001808 <chkcommand2+0x9dc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4987      	ldr	r1, [pc, #540]	; (8001858 <chkcommand2+0xa2c>)
 800163a:	4618      	mov	r0, r3
 800163c:	f001 f968 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesD0);	//ADC
 8001640:	4b71      	ldr	r3, [pc, #452]	; (8001808 <chkcommand2+0x9dc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4985      	ldr	r1, [pc, #532]	; (800185c <chkcommand2+0xa30>)
 8001646:	4618      	mov	r0, r3
 8001648:	f001 f962 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesD1);	//ADC
 800164c:	4b6e      	ldr	r3, [pc, #440]	; (8001808 <chkcommand2+0x9dc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4983      	ldr	r1, [pc, #524]	; (8001860 <chkcommand2+0xa34>)
 8001652:	4618      	mov	r0, r3
 8001654:	f001 f95c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesD2);	//ADC
 8001658:	4b6b      	ldr	r3, [pc, #428]	; (8001808 <chkcommand2+0x9dc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4981      	ldr	r1, [pc, #516]	; (8001864 <chkcommand2+0xa38>)
 800165e:	4618      	mov	r0, r3
 8001660:	f001 f956 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesD3);	//ADC
 8001664:	4b68      	ldr	r3, [pc, #416]	; (8001808 <chkcommand2+0x9dc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	497f      	ldr	r1, [pc, #508]	; (8001868 <chkcommand2+0xa3c>)
 800166a:	4618      	mov	r0, r3
 800166c:	f001 f950 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesD4);	//ADC
 8001670:	4b65      	ldr	r3, [pc, #404]	; (8001808 <chkcommand2+0x9dc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	497d      	ldr	r1, [pc, #500]	; (800186c <chkcommand2+0xa40>)
 8001676:	4618      	mov	r0, r3
 8001678:	f001 f94a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesD5);	//ADC
 800167c:	4b62      	ldr	r3, [pc, #392]	; (8001808 <chkcommand2+0x9dc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	497b      	ldr	r1, [pc, #492]	; (8001870 <chkcommand2+0xa44>)
 8001682:	4618      	mov	r0, r3
 8001684:	f001 f944 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesD6);	//ADC
 8001688:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <chkcommand2+0x9dc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4979      	ldr	r1, [pc, #484]	; (8001874 <chkcommand2+0xa48>)
 800168e:	4618      	mov	r0, r3
 8001690:	f001 f93e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesD7);	//ADC
 8001694:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <chkcommand2+0x9dc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4977      	ldr	r1, [pc, #476]	; (8001878 <chkcommand2+0xa4c>)
 800169a:	4618      	mov	r0, r3
 800169c:	f001 f938 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesD8);	//ADC
 80016a0:	4b59      	ldr	r3, [pc, #356]	; (8001808 <chkcommand2+0x9dc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4975      	ldr	r1, [pc, #468]	; (800187c <chkcommand2+0xa50>)
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 f932 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesD9);	//ADC
 80016ac:	4b56      	ldr	r3, [pc, #344]	; (8001808 <chkcommand2+0x9dc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4973      	ldr	r1, [pc, #460]	; (8001880 <chkcommand2+0xa54>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 f92c 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesE0);	//ADC
 80016b8:	4b53      	ldr	r3, [pc, #332]	; (8001808 <chkcommand2+0x9dc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4971      	ldr	r1, [pc, #452]	; (8001884 <chkcommand2+0xa58>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 f926 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesE1);	//ADC
 80016c4:	4b50      	ldr	r3, [pc, #320]	; (8001808 <chkcommand2+0x9dc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	496f      	ldr	r1, [pc, #444]	; (8001888 <chkcommand2+0xa5c>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 f920 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesE2);	//ADC
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <chkcommand2+0x9dc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	496d      	ldr	r1, [pc, #436]	; (800188c <chkcommand2+0xa60>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 f91a 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesE3);	//ADC
 80016dc:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <chkcommand2+0x9dc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	496b      	ldr	r1, [pc, #428]	; (8001890 <chkcommand2+0xa64>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 f914 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesE4);	//ADC
 80016e8:	4b47      	ldr	r3, [pc, #284]	; (8001808 <chkcommand2+0x9dc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4969      	ldr	r1, [pc, #420]	; (8001894 <chkcommand2+0xa68>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 f90e 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesE5);	//ADC
 80016f4:	4b44      	ldr	r3, [pc, #272]	; (8001808 <chkcommand2+0x9dc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4967      	ldr	r1, [pc, #412]	; (8001898 <chkcommand2+0xa6c>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 f908 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesE6);	//ADC
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <chkcommand2+0x9dc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4965      	ldr	r1, [pc, #404]	; (800189c <chkcommand2+0xa70>)
 8001706:	4618      	mov	r0, r3
 8001708:	f001 f902 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesE7);	//ADC
 800170c:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <chkcommand2+0x9dc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4963      	ldr	r1, [pc, #396]	; (80018a0 <chkcommand2+0xa74>)
 8001712:	4618      	mov	r0, r3
 8001714:	f001 f8fc 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesE8);	//ADC
 8001718:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <chkcommand2+0x9dc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4961      	ldr	r1, [pc, #388]	; (80018a4 <chkcommand2+0xa78>)
 800171e:	4618      	mov	r0, r3
 8001720:	f001 f8f6 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesE9);	//ADC
 8001724:	4b38      	ldr	r3, [pc, #224]	; (8001808 <chkcommand2+0x9dc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	495f      	ldr	r1, [pc, #380]	; (80018a8 <chkcommand2+0xa7c>)
 800172a:	4618      	mov	r0, r3
 800172c:	f001 f8f0 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesF0);	//ADC
 8001730:	4b35      	ldr	r3, [pc, #212]	; (8001808 <chkcommand2+0x9dc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	495d      	ldr	r1, [pc, #372]	; (80018ac <chkcommand2+0xa80>)
 8001736:	4618      	mov	r0, r3
 8001738:	f001 f8ea 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesF1);	//ADC
 800173c:	4b32      	ldr	r3, [pc, #200]	; (8001808 <chkcommand2+0x9dc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	495b      	ldr	r1, [pc, #364]	; (80018b0 <chkcommand2+0xa84>)
 8001742:	4618      	mov	r0, r3
 8001744:	f001 f8e4 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesF2);	//ADC
 8001748:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <chkcommand2+0x9dc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4959      	ldr	r1, [pc, #356]	; (80018b4 <chkcommand2+0xa88>)
 800174e:	4618      	mov	r0, r3
 8001750:	f001 f8de 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesF3);	//ADC
 8001754:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <chkcommand2+0x9dc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4957      	ldr	r1, [pc, #348]	; (80018b8 <chkcommand2+0xa8c>)
 800175a:	4618      	mov	r0, r3
 800175c:	f001 f8d8 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesF4);	//ADC
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <chkcommand2+0x9dc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4955      	ldr	r1, [pc, #340]	; (80018bc <chkcommand2+0xa90>)
 8001766:	4618      	mov	r0, r3
 8001768:	f001 f8d2 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesF5);	//ADC
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <chkcommand2+0x9dc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4953      	ldr	r1, [pc, #332]	; (80018c0 <chkcommand2+0xa94>)
 8001772:	4618      	mov	r0, r3
 8001774:	f001 f8cc 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesF6);	//ADC
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <chkcommand2+0x9dc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4951      	ldr	r1, [pc, #324]	; (80018c4 <chkcommand2+0xa98>)
 800177e:	4618      	mov	r0, r3
 8001780:	f001 f8c6 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesF7);	//ADC
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <chkcommand2+0x9dc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	494f      	ldr	r1, [pc, #316]	; (80018c8 <chkcommand2+0xa9c>)
 800178a:	4618      	mov	r0, r3
 800178c:	f001 f8c0 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesF8);	//ADC
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <chkcommand2+0x9dc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	494d      	ldr	r1, [pc, #308]	; (80018cc <chkcommand2+0xaa0>)
 8001796:	4618      	mov	r0, r3
 8001798:	f001 f8ba 	bl	8002910 <TestStart>
		TestStart(u32ADC_StartDelay, ADCValuesF9);	//ADC
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <chkcommand2+0x9dc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	494b      	ldr	r1, [pc, #300]	; (80018d0 <chkcommand2+0xaa4>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 f8b4 	bl	8002910 <TestStart>

		TestStart_Damping();						//減衰
 80017a8:	f001 f856 	bl	8002858 <TestStart_Damping>

		// ADC data send UART
		uartSendADCData(ADCValues00);	//UART
 80017ac:	4849      	ldr	r0, [pc, #292]	; (80018d4 <chkcommand2+0xaa8>)
 80017ae:	f001 faad 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80017b2:	2064      	movs	r0, #100	; 0x64
 80017b4:	f002 f8d0 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues01);	//UART
 80017b8:	4847      	ldr	r0, [pc, #284]	; (80018d8 <chkcommand2+0xaac>)
 80017ba:	f001 faa7 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80017be:	2064      	movs	r0, #100	; 0x64
 80017c0:	f002 f8ca 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues02);	//UART
 80017c4:	4845      	ldr	r0, [pc, #276]	; (80018dc <chkcommand2+0xab0>)
 80017c6:	f001 faa1 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80017ca:	2064      	movs	r0, #100	; 0x64
 80017cc:	f002 f8c4 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues03);	//UART
 80017d0:	4843      	ldr	r0, [pc, #268]	; (80018e0 <chkcommand2+0xab4>)
 80017d2:	f001 fa9b 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80017d6:	2064      	movs	r0, #100	; 0x64
 80017d8:	f002 f8be 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues04);	//UART
 80017dc:	4841      	ldr	r0, [pc, #260]	; (80018e4 <chkcommand2+0xab8>)
 80017de:	f001 fa95 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80017e2:	2064      	movs	r0, #100	; 0x64
 80017e4:	f002 f8b8 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues05);	//UART
 80017e8:	483f      	ldr	r0, [pc, #252]	; (80018e8 <chkcommand2+0xabc>)
 80017ea:	f001 fa8f 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80017ee:	2064      	movs	r0, #100	; 0x64
 80017f0:	f002 f8b2 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues06);	//UART
 80017f4:	483d      	ldr	r0, [pc, #244]	; (80018ec <chkcommand2+0xac0>)
 80017f6:	f001 fa89 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80017fa:	2064      	movs	r0, #100	; 0x64
 80017fc:	f002 f8ac 	bl	8003958 <HAL_Delay>
 8001800:	e076      	b.n	80018f0 <chkcommand2+0xac4>
 8001802:	bf00      	nop
 8001804:	20003ecc 	.word	0x20003ecc
 8001808:	20000188 	.word	0x20000188
 800180c:	20007fb0 	.word	0x20007fb0
 8001810:	20006364 	.word	0x20006364
 8001814:	20009bf0 	.word	0x20009bf0
 8001818:	2000446c 	.word	0x2000446c
 800181c:	200056ec 	.word	0x200056ec
 8001820:	20009ec0 	.word	0x20009ec0
 8001824:	20004abc 	.word	0x20004abc
 8001828:	2000523c 	.word	0x2000523c
 800182c:	200083bc 	.word	0x200083bc
 8001830:	20001314 	.word	0x20001314
 8001834:	200014f4 	.word	0x200014f4
 8001838:	20009dd0 	.word	0x20009dd0
 800183c:	20006b30 	.word	0x20006b30
 8001840:	20007700 	.word	0x20007700
 8001844:	20009380 	.word	0x20009380
 8001848:	20002440 	.word	0x20002440
 800184c:	20001db0 	.word	0x20001db0
 8001850:	20002bc0 	.word	0x20002bc0
 8001854:	200081dc 	.word	0x200081dc
 8001858:	20000504 	.word	0x20000504
 800185c:	200082cc 	.word	0x200082cc
 8001860:	20007250 	.word	0x20007250
 8001864:	20005c8c 	.word	0x20005c8c
 8001868:	200029e0 	.word	0x200029e0
 800186c:	20001404 	.word	0x20001404
 8001870:	20002710 	.word	0x20002710
 8001874:	20006a40 	.word	0x20006a40
 8001878:	20006274 	.word	0x20006274
 800187c:	20008fc0 	.word	0x20008fc0
 8001880:	200040ac 	.word	0x200040ac
 8001884:	20008ed0 	.word	0x20008ed0
 8001888:	200059bc 	.word	0x200059bc
 800188c:	200007d4 	.word	0x200007d4
 8001890:	20000d74 	.word	0x20000d74
 8001894:	20003fbc 	.word	0x20003fbc
 8001898:	20004e7c 	.word	0x20004e7c
 800189c:	20006634 	.word	0x20006634
 80018a0:	20002080 	.word	0x20002080
 80018a4:	20009560 	.word	0x20009560
 80018a8:	200039d0 	.word	0x200039d0
 80018ac:	20003ddc 	.word	0x20003ddc
 80018b0:	20004d8c 	.word	0x20004d8c
 80018b4:	20009fb0 	.word	0x20009fb0
 80018b8:	20004c9c 	.word	0x20004c9c
 80018bc:	2000541c 	.word	0x2000541c
 80018c0:	2000859c 	.word	0x2000859c
 80018c4:	20000aa4 	.word	0x20000aa4
 80018c8:	20001f90 	.word	0x20001f90
 80018cc:	20008710 	.word	0x20008710
 80018d0:	2000532c 	.word	0x2000532c
 80018d4:	20000e64 	.word	0x20000e64
 80018d8:	20003610 	.word	0x20003610
 80018dc:	20003ac0 	.word	0x20003ac0
 80018e0:	20002530 	.word	0x20002530
 80018e4:	20005e6c 	.word	0x20005e6c
 80018e8:	20001224 	.word	0x20001224
 80018ec:	20009470 	.word	0x20009470
		uartSendADCData(ADCValues07);	//UART
 80018f0:	48d9      	ldr	r0, [pc, #868]	; (8001c58 <chkcommand2+0xe2c>)
 80018f2:	f001 fa0b 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80018f6:	2064      	movs	r0, #100	; 0x64
 80018f8:	f002 f82e 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues08);	//UART
 80018fc:	48d7      	ldr	r0, [pc, #860]	; (8001c5c <chkcommand2+0xe30>)
 80018fe:	f001 fa05 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001902:	2064      	movs	r0, #100	; 0x64
 8001904:	f002 f828 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues09);	//UART
 8001908:	48d5      	ldr	r0, [pc, #852]	; (8001c60 <chkcommand2+0xe34>)
 800190a:	f001 f9ff 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800190e:	2064      	movs	r0, #100	; 0x64
 8001910:	f002 f822 	bl	8003958 <HAL_Delay>

		uartSendADCData(ADCValues10);	//UART
 8001914:	48d3      	ldr	r0, [pc, #844]	; (8001c64 <chkcommand2+0xe38>)
 8001916:	f001 f9f9 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800191a:	2064      	movs	r0, #100	; 0x64
 800191c:	f002 f81c 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues11);	//UART
 8001920:	48d1      	ldr	r0, [pc, #836]	; (8001c68 <chkcommand2+0xe3c>)
 8001922:	f001 f9f3 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001926:	2064      	movs	r0, #100	; 0x64
 8001928:	f002 f816 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues12);	//UART
 800192c:	48cf      	ldr	r0, [pc, #828]	; (8001c6c <chkcommand2+0xe40>)
 800192e:	f001 f9ed 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001932:	2064      	movs	r0, #100	; 0x64
 8001934:	f002 f810 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues13);	//UART
 8001938:	48cd      	ldr	r0, [pc, #820]	; (8001c70 <chkcommand2+0xe44>)
 800193a:	f001 f9e7 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800193e:	2064      	movs	r0, #100	; 0x64
 8001940:	f002 f80a 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues14);	//UART
 8001944:	48cb      	ldr	r0, [pc, #812]	; (8001c74 <chkcommand2+0xe48>)
 8001946:	f001 f9e1 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800194a:	2064      	movs	r0, #100	; 0x64
 800194c:	f002 f804 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues15);	//UART
 8001950:	48c9      	ldr	r0, [pc, #804]	; (8001c78 <chkcommand2+0xe4c>)
 8001952:	f001 f9db 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001956:	2064      	movs	r0, #100	; 0x64
 8001958:	f001 fffe 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues16);	//UART
 800195c:	48c7      	ldr	r0, [pc, #796]	; (8001c7c <chkcommand2+0xe50>)
 800195e:	f001 f9d5 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001962:	2064      	movs	r0, #100	; 0x64
 8001964:	f001 fff8 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues17);	//UART
 8001968:	48c5      	ldr	r0, [pc, #788]	; (8001c80 <chkcommand2+0xe54>)
 800196a:	f001 f9cf 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800196e:	2064      	movs	r0, #100	; 0x64
 8001970:	f001 fff2 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues18);	//UART
 8001974:	48c3      	ldr	r0, [pc, #780]	; (8001c84 <chkcommand2+0xe58>)
 8001976:	f001 f9c9 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800197a:	2064      	movs	r0, #100	; 0x64
 800197c:	f001 ffec 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues19);	//UART
 8001980:	48c1      	ldr	r0, [pc, #772]	; (8001c88 <chkcommand2+0xe5c>)
 8001982:	f001 f9c3 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001986:	2064      	movs	r0, #100	; 0x64
 8001988:	f001 ffe6 	bl	8003958 <HAL_Delay>

		uartSendADCData(ADCValues20);	//UART
 800198c:	48bf      	ldr	r0, [pc, #764]	; (8001c8c <chkcommand2+0xe60>)
 800198e:	f001 f9bd 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001992:	2064      	movs	r0, #100	; 0x64
 8001994:	f001 ffe0 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues21);	//UART
 8001998:	48bd      	ldr	r0, [pc, #756]	; (8001c90 <chkcommand2+0xe64>)
 800199a:	f001 f9b7 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800199e:	2064      	movs	r0, #100	; 0x64
 80019a0:	f001 ffda 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues22);	//UART
 80019a4:	48bb      	ldr	r0, [pc, #748]	; (8001c94 <chkcommand2+0xe68>)
 80019a6:	f001 f9b1 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80019aa:	2064      	movs	r0, #100	; 0x64
 80019ac:	f001 ffd4 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues23);	//UART
 80019b0:	48b9      	ldr	r0, [pc, #740]	; (8001c98 <chkcommand2+0xe6c>)
 80019b2:	f001 f9ab 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80019b6:	2064      	movs	r0, #100	; 0x64
 80019b8:	f001 ffce 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues24);	//UART
 80019bc:	48b7      	ldr	r0, [pc, #732]	; (8001c9c <chkcommand2+0xe70>)
 80019be:	f001 f9a5 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80019c2:	2064      	movs	r0, #100	; 0x64
 80019c4:	f001 ffc8 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues25);	//UART
 80019c8:	48b5      	ldr	r0, [pc, #724]	; (8001ca0 <chkcommand2+0xe74>)
 80019ca:	f001 f99f 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80019ce:	2064      	movs	r0, #100	; 0x64
 80019d0:	f001 ffc2 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues26);	//UART
 80019d4:	48b3      	ldr	r0, [pc, #716]	; (8001ca4 <chkcommand2+0xe78>)
 80019d6:	f001 f999 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80019da:	2064      	movs	r0, #100	; 0x64
 80019dc:	f001 ffbc 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues27);	//UART
 80019e0:	48b1      	ldr	r0, [pc, #708]	; (8001ca8 <chkcommand2+0xe7c>)
 80019e2:	f001 f993 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80019e6:	2064      	movs	r0, #100	; 0x64
 80019e8:	f001 ffb6 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues28);	//UART
 80019ec:	48af      	ldr	r0, [pc, #700]	; (8001cac <chkcommand2+0xe80>)
 80019ee:	f001 f98d 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80019f2:	2064      	movs	r0, #100	; 0x64
 80019f4:	f001 ffb0 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues29);	//UART
 80019f8:	48ad      	ldr	r0, [pc, #692]	; (8001cb0 <chkcommand2+0xe84>)
 80019fa:	f001 f987 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80019fe:	2064      	movs	r0, #100	; 0x64
 8001a00:	f001 ffaa 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues30);	//UART
 8001a04:	48ab      	ldr	r0, [pc, #684]	; (8001cb4 <chkcommand2+0xe88>)
 8001a06:	f001 f981 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a0a:	2064      	movs	r0, #100	; 0x64
 8001a0c:	f001 ffa4 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues31);	//UART
 8001a10:	48a9      	ldr	r0, [pc, #676]	; (8001cb8 <chkcommand2+0xe8c>)
 8001a12:	f001 f97b 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a16:	2064      	movs	r0, #100	; 0x64
 8001a18:	f001 ff9e 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues32);	//UART
 8001a1c:	48a7      	ldr	r0, [pc, #668]	; (8001cbc <chkcommand2+0xe90>)
 8001a1e:	f001 f975 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a22:	2064      	movs	r0, #100	; 0x64
 8001a24:	f001 ff98 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues33);	//UART
 8001a28:	48a5      	ldr	r0, [pc, #660]	; (8001cc0 <chkcommand2+0xe94>)
 8001a2a:	f001 f96f 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a2e:	2064      	movs	r0, #100	; 0x64
 8001a30:	f001 ff92 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues34);	//UART
 8001a34:	48a3      	ldr	r0, [pc, #652]	; (8001cc4 <chkcommand2+0xe98>)
 8001a36:	f001 f969 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a3a:	2064      	movs	r0, #100	; 0x64
 8001a3c:	f001 ff8c 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues35);	//UART
 8001a40:	48a1      	ldr	r0, [pc, #644]	; (8001cc8 <chkcommand2+0xe9c>)
 8001a42:	f001 f963 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a46:	2064      	movs	r0, #100	; 0x64
 8001a48:	f001 ff86 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues36);	//UART
 8001a4c:	489f      	ldr	r0, [pc, #636]	; (8001ccc <chkcommand2+0xea0>)
 8001a4e:	f001 f95d 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a52:	2064      	movs	r0, #100	; 0x64
 8001a54:	f001 ff80 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues37);	//UART
 8001a58:	489d      	ldr	r0, [pc, #628]	; (8001cd0 <chkcommand2+0xea4>)
 8001a5a:	f001 f957 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a5e:	2064      	movs	r0, #100	; 0x64
 8001a60:	f001 ff7a 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues38);	//UART
 8001a64:	489b      	ldr	r0, [pc, #620]	; (8001cd4 <chkcommand2+0xea8>)
 8001a66:	f001 f951 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a6a:	2064      	movs	r0, #100	; 0x64
 8001a6c:	f001 ff74 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues39);	//UART
 8001a70:	4899      	ldr	r0, [pc, #612]	; (8001cd8 <chkcommand2+0xeac>)
 8001a72:	f001 f94b 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a76:	2064      	movs	r0, #100	; 0x64
 8001a78:	f001 ff6e 	bl	8003958 <HAL_Delay>

		uartSendADCData(ADCValues40);	//UART
 8001a7c:	4897      	ldr	r0, [pc, #604]	; (8001cdc <chkcommand2+0xeb0>)
 8001a7e:	f001 f945 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a82:	2064      	movs	r0, #100	; 0x64
 8001a84:	f001 ff68 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues41);	//UART
 8001a88:	4895      	ldr	r0, [pc, #596]	; (8001ce0 <chkcommand2+0xeb4>)
 8001a8a:	f001 f93f 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a8e:	2064      	movs	r0, #100	; 0x64
 8001a90:	f001 ff62 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues42);	//UART
 8001a94:	4893      	ldr	r0, [pc, #588]	; (8001ce4 <chkcommand2+0xeb8>)
 8001a96:	f001 f939 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001a9a:	2064      	movs	r0, #100	; 0x64
 8001a9c:	f001 ff5c 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues43);	//UART
 8001aa0:	4891      	ldr	r0, [pc, #580]	; (8001ce8 <chkcommand2+0xebc>)
 8001aa2:	f001 f933 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001aa6:	2064      	movs	r0, #100	; 0x64
 8001aa8:	f001 ff56 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues44);	//UART
 8001aac:	488f      	ldr	r0, [pc, #572]	; (8001cec <chkcommand2+0xec0>)
 8001aae:	f001 f92d 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ab2:	2064      	movs	r0, #100	; 0x64
 8001ab4:	f001 ff50 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues45);	//UART
 8001ab8:	488d      	ldr	r0, [pc, #564]	; (8001cf0 <chkcommand2+0xec4>)
 8001aba:	f001 f927 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001abe:	2064      	movs	r0, #100	; 0x64
 8001ac0:	f001 ff4a 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues46);	//UART
 8001ac4:	488b      	ldr	r0, [pc, #556]	; (8001cf4 <chkcommand2+0xec8>)
 8001ac6:	f001 f921 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001aca:	2064      	movs	r0, #100	; 0x64
 8001acc:	f001 ff44 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues47);	//UART
 8001ad0:	4889      	ldr	r0, [pc, #548]	; (8001cf8 <chkcommand2+0xecc>)
 8001ad2:	f001 f91b 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ad6:	2064      	movs	r0, #100	; 0x64
 8001ad8:	f001 ff3e 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues48);	//UART
 8001adc:	4887      	ldr	r0, [pc, #540]	; (8001cfc <chkcommand2+0xed0>)
 8001ade:	f001 f915 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ae2:	2064      	movs	r0, #100	; 0x64
 8001ae4:	f001 ff38 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues49);	//UART
 8001ae8:	4885      	ldr	r0, [pc, #532]	; (8001d00 <chkcommand2+0xed4>)
 8001aea:	f001 f90f 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001aee:	2064      	movs	r0, #100	; 0x64
 8001af0:	f001 ff32 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues50);	//UART
 8001af4:	4883      	ldr	r0, [pc, #524]	; (8001d04 <chkcommand2+0xed8>)
 8001af6:	f001 f909 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001afa:	2064      	movs	r0, #100	; 0x64
 8001afc:	f001 ff2c 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues51);	//UART
 8001b00:	4881      	ldr	r0, [pc, #516]	; (8001d08 <chkcommand2+0xedc>)
 8001b02:	f001 f903 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b06:	2064      	movs	r0, #100	; 0x64
 8001b08:	f001 ff26 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues52);	//UART
 8001b0c:	487f      	ldr	r0, [pc, #508]	; (8001d0c <chkcommand2+0xee0>)
 8001b0e:	f001 f8fd 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b12:	2064      	movs	r0, #100	; 0x64
 8001b14:	f001 ff20 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues53);	//UART
 8001b18:	487d      	ldr	r0, [pc, #500]	; (8001d10 <chkcommand2+0xee4>)
 8001b1a:	f001 f8f7 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b1e:	2064      	movs	r0, #100	; 0x64
 8001b20:	f001 ff1a 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues54);	//UART
 8001b24:	487b      	ldr	r0, [pc, #492]	; (8001d14 <chkcommand2+0xee8>)
 8001b26:	f001 f8f1 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b2a:	2064      	movs	r0, #100	; 0x64
 8001b2c:	f001 ff14 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues55);	//UART
 8001b30:	4879      	ldr	r0, [pc, #484]	; (8001d18 <chkcommand2+0xeec>)
 8001b32:	f001 f8eb 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b36:	2064      	movs	r0, #100	; 0x64
 8001b38:	f001 ff0e 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues56);	//UART
 8001b3c:	4877      	ldr	r0, [pc, #476]	; (8001d1c <chkcommand2+0xef0>)
 8001b3e:	f001 f8e5 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b42:	2064      	movs	r0, #100	; 0x64
 8001b44:	f001 ff08 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues57);	//UART
 8001b48:	4875      	ldr	r0, [pc, #468]	; (8001d20 <chkcommand2+0xef4>)
 8001b4a:	f001 f8df 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b4e:	2064      	movs	r0, #100	; 0x64
 8001b50:	f001 ff02 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues58);	//UART
 8001b54:	4873      	ldr	r0, [pc, #460]	; (8001d24 <chkcommand2+0xef8>)
 8001b56:	f001 f8d9 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b5a:	2064      	movs	r0, #100	; 0x64
 8001b5c:	f001 fefc 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues59);	//UART
 8001b60:	4871      	ldr	r0, [pc, #452]	; (8001d28 <chkcommand2+0xefc>)
 8001b62:	f001 f8d3 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b66:	2064      	movs	r0, #100	; 0x64
 8001b68:	f001 fef6 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues60);	//UART
 8001b6c:	486f      	ldr	r0, [pc, #444]	; (8001d2c <chkcommand2+0xf00>)
 8001b6e:	f001 f8cd 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b72:	2064      	movs	r0, #100	; 0x64
 8001b74:	f001 fef0 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues61);	//UART
 8001b78:	486d      	ldr	r0, [pc, #436]	; (8001d30 <chkcommand2+0xf04>)
 8001b7a:	f001 f8c7 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b7e:	2064      	movs	r0, #100	; 0x64
 8001b80:	f001 feea 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues62);	//UART
 8001b84:	486b      	ldr	r0, [pc, #428]	; (8001d34 <chkcommand2+0xf08>)
 8001b86:	f001 f8c1 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b8a:	2064      	movs	r0, #100	; 0x64
 8001b8c:	f001 fee4 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues63);	//UART
 8001b90:	4869      	ldr	r0, [pc, #420]	; (8001d38 <chkcommand2+0xf0c>)
 8001b92:	f001 f8bb 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001b96:	2064      	movs	r0, #100	; 0x64
 8001b98:	f001 fede 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues64);	//UART
 8001b9c:	4867      	ldr	r0, [pc, #412]	; (8001d3c <chkcommand2+0xf10>)
 8001b9e:	f001 f8b5 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ba2:	2064      	movs	r0, #100	; 0x64
 8001ba4:	f001 fed8 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues65);	//UART
 8001ba8:	4865      	ldr	r0, [pc, #404]	; (8001d40 <chkcommand2+0xf14>)
 8001baa:	f001 f8af 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001bae:	2064      	movs	r0, #100	; 0x64
 8001bb0:	f001 fed2 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues66);	//UART
 8001bb4:	4863      	ldr	r0, [pc, #396]	; (8001d44 <chkcommand2+0xf18>)
 8001bb6:	f001 f8a9 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001bba:	2064      	movs	r0, #100	; 0x64
 8001bbc:	f001 fecc 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues67);	//UART
 8001bc0:	4861      	ldr	r0, [pc, #388]	; (8001d48 <chkcommand2+0xf1c>)
 8001bc2:	f001 f8a3 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001bc6:	2064      	movs	r0, #100	; 0x64
 8001bc8:	f001 fec6 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues68);	//UART
 8001bcc:	485f      	ldr	r0, [pc, #380]	; (8001d4c <chkcommand2+0xf20>)
 8001bce:	f001 f89d 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001bd2:	2064      	movs	r0, #100	; 0x64
 8001bd4:	f001 fec0 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues69);	//UART
 8001bd8:	485d      	ldr	r0, [pc, #372]	; (8001d50 <chkcommand2+0xf24>)
 8001bda:	f001 f897 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001bde:	2064      	movs	r0, #100	; 0x64
 8001be0:	f001 feba 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues70);	//UART
 8001be4:	485b      	ldr	r0, [pc, #364]	; (8001d54 <chkcommand2+0xf28>)
 8001be6:	f001 f891 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001bea:	2064      	movs	r0, #100	; 0x64
 8001bec:	f001 feb4 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues71);	//UART
 8001bf0:	4859      	ldr	r0, [pc, #356]	; (8001d58 <chkcommand2+0xf2c>)
 8001bf2:	f001 f88b 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001bf6:	2064      	movs	r0, #100	; 0x64
 8001bf8:	f001 feae 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues72);	//UART
 8001bfc:	4857      	ldr	r0, [pc, #348]	; (8001d5c <chkcommand2+0xf30>)
 8001bfe:	f001 f885 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001c02:	2064      	movs	r0, #100	; 0x64
 8001c04:	f001 fea8 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues73);	//UART
 8001c08:	4855      	ldr	r0, [pc, #340]	; (8001d60 <chkcommand2+0xf34>)
 8001c0a:	f001 f87f 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001c0e:	2064      	movs	r0, #100	; 0x64
 8001c10:	f001 fea2 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues74);	//UART
 8001c14:	4853      	ldr	r0, [pc, #332]	; (8001d64 <chkcommand2+0xf38>)
 8001c16:	f001 f879 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001c1a:	2064      	movs	r0, #100	; 0x64
 8001c1c:	f001 fe9c 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues75);	//UART
 8001c20:	4851      	ldr	r0, [pc, #324]	; (8001d68 <chkcommand2+0xf3c>)
 8001c22:	f001 f873 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001c26:	2064      	movs	r0, #100	; 0x64
 8001c28:	f001 fe96 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues76);	//UART
 8001c2c:	484f      	ldr	r0, [pc, #316]	; (8001d6c <chkcommand2+0xf40>)
 8001c2e:	f001 f86d 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001c32:	2064      	movs	r0, #100	; 0x64
 8001c34:	f001 fe90 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues77);	//UART
 8001c38:	484d      	ldr	r0, [pc, #308]	; (8001d70 <chkcommand2+0xf44>)
 8001c3a:	f001 f867 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001c3e:	2064      	movs	r0, #100	; 0x64
 8001c40:	f001 fe8a 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues78);	//UART
 8001c44:	484b      	ldr	r0, [pc, #300]	; (8001d74 <chkcommand2+0xf48>)
 8001c46:	f001 f861 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001c4a:	2064      	movs	r0, #100	; 0x64
 8001c4c:	f001 fe84 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues79);	//UART
 8001c50:	4849      	ldr	r0, [pc, #292]	; (8001d78 <chkcommand2+0xf4c>)
 8001c52:	f001 f85b 	bl	8002d0c <uartSendADCData>
 8001c56:	e091      	b.n	8001d7c <chkcommand2+0xf50>
 8001c58:	2000505c 	.word	0x2000505c
 8001c5c:	200046b4 	.word	0x200046b4
 8001c60:	20002260 	.word	0x20002260
 8001c64:	200090b0 	.word	0x200090b0
 8001c68:	20006184 	.word	0x20006184
 8001c6c:	20000f54 	.word	0x20000f54
 8001c70:	20000324 	.word	0x20000324
 8001c74:	20008c00 	.word	0x20008c00
 8001c78:	20003160 	.word	0x20003160
 8001c7c:	20006c20 	.word	0x20006c20
 8001c80:	20000234 	.word	0x20000234
 8001c84:	20004f6c 	.word	0x20004f6c
 8001c88:	20002620 	.word	0x20002620
 8001c8c:	20001ae0 	.word	0x20001ae0
 8001c90:	200049cc 	.word	0x200049cc
 8001c94:	2000419c 	.word	0x2000419c
 8001c98:	200028f0 	.word	0x200028f0
 8001c9c:	20007430 	.word	0x20007430
 8001ca0:	20003250 	.word	0x20003250
 8001ca4:	20006454 	.word	0x20006454
 8001ca8:	20000b94 	.word	0x20000b94
 8001cac:	20008cf0 	.word	0x20008cf0
 8001cb0:	200084ac 	.word	0x200084ac
 8001cb4:	20002170 	.word	0x20002170
 8001cb8:	20009a10 	.word	0x20009a10
 8001cbc:	200057dc 	.word	0x200057dc
 8001cc0:	20009b00 	.word	0x20009b00
 8001cc4:	200047ec 	.word	0x200047ec
 8001cc8:	20006e00 	.word	0x20006e00
 8001ccc:	200078e0 	.word	0x200078e0
 8001cd0:	200091a0 	.word	0x200091a0
 8001cd4:	20001bd0 	.word	0x20001bd0
 8001cd8:	20007160 	.word	0x20007160
 8001cdc:	2000550c 	.word	0x2000550c
 8001ce0:	20006770 	.word	0x20006770
 8001ce4:	20003700 	.word	0x20003700
 8001ce8:	2000a0a0 	.word	0x2000a0a0
 8001cec:	200058cc 	.word	0x200058cc
 8001cf0:	200006e4 	.word	0x200006e4
 8001cf4:	20003070 	.word	0x20003070
 8001cf8:	20003430 	.word	0x20003430
 8001cfc:	20002800 	.word	0x20002800
 8001d00:	20006094 	.word	0x20006094
 8001d04:	20007ac0 	.word	0x20007ac0
 8001d08:	200016d4 	.word	0x200016d4
 8001d0c:	20002cb0 	.word	0x20002cb0
 8001d10:	20009290 	.word	0x20009290
 8001d14:	20005d7c 	.word	0x20005d7c
 8001d18:	200008c4 	.word	0x200008c4
 8001d1c:	2000a190 	.word	0x2000a190
 8001d20:	20008de0 	.word	0x20008de0
 8001d24:	200037f0 	.word	0x200037f0
 8001d28:	20007028 	.word	0x20007028
 8001d2c:	20001cc0 	.word	0x20001cc0
 8001d30:	200019f0 	.word	0x200019f0
 8001d34:	200079d0 	.word	0x200079d0
 8001d38:	20009830 	.word	0x20009830
 8001d3c:	2000514c 	.word	0x2000514c
 8001d40:	200017c4 	.word	0x200017c4
 8001d44:	20004bac 	.word	0x20004bac
 8001d48:	2000428c 	.word	0x2000428c
 8001d4c:	20002e90 	.word	0x20002e90
 8001d50:	20007610 	.word	0x20007610
 8001d54:	200038e0 	.word	0x200038e0
 8001d58:	200009b4 	.word	0x200009b4
 8001d5c:	20001044 	.word	0x20001044
 8001d60:	20001ea0 	.word	0x20001ea0
 8001d64:	20009650 	.word	0x20009650
 8001d68:	20005b9c 	.word	0x20005b9c
 8001d6c:	20009ce0 	.word	0x20009ce0
 8001d70:	200048dc 	.word	0x200048dc
 8001d74:	20006f38 	.word	0x20006f38
 8001d78:	20007340 	.word	0x20007340
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001d7c:	2064      	movs	r0, #100	; 0x64
 8001d7e:	f001 fdeb 	bl	8003958 <HAL_Delay>

		uartSendADCData(ADCValues80);	//UART
 8001d82:	48da      	ldr	r0, [pc, #872]	; (80020ec <chkcommand2+0x12c0>)
 8001d84:	f000 ffc2 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001d88:	2064      	movs	r0, #100	; 0x64
 8001d8a:	f001 fde5 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues81);	//UART
 8001d8e:	48d8      	ldr	r0, [pc, #864]	; (80020f0 <chkcommand2+0x12c4>)
 8001d90:	f000 ffbc 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001d94:	2064      	movs	r0, #100	; 0x64
 8001d96:	f001 fddf 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues82);	//UART
 8001d9a:	48d6      	ldr	r0, [pc, #856]	; (80020f4 <chkcommand2+0x12c8>)
 8001d9c:	f000 ffb6 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001da0:	2064      	movs	r0, #100	; 0x64
 8001da2:	f001 fdd9 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues83);	//UART
 8001da6:	48d4      	ldr	r0, [pc, #848]	; (80020f8 <chkcommand2+0x12cc>)
 8001da8:	f000 ffb0 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001dac:	2064      	movs	r0, #100	; 0x64
 8001dae:	f001 fdd3 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues84);	//UART
 8001db2:	48d2      	ldr	r0, [pc, #840]	; (80020fc <chkcommand2+0x12d0>)
 8001db4:	f000 ffaa 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001db8:	2064      	movs	r0, #100	; 0x64
 8001dba:	f001 fdcd 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues85);	//UART
 8001dbe:	48d0      	ldr	r0, [pc, #832]	; (8002100 <chkcommand2+0x12d4>)
 8001dc0:	f000 ffa4 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001dc4:	2064      	movs	r0, #100	; 0x64
 8001dc6:	f001 fdc7 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues86);	//UART
 8001dca:	48ce      	ldr	r0, [pc, #824]	; (8002104 <chkcommand2+0x12d8>)
 8001dcc:	f000 ff9e 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001dd0:	2064      	movs	r0, #100	; 0x64
 8001dd2:	f001 fdc1 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues87);	//UART
 8001dd6:	48cc      	ldr	r0, [pc, #816]	; (8002108 <chkcommand2+0x12dc>)
 8001dd8:	f000 ff98 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ddc:	2064      	movs	r0, #100	; 0x64
 8001dde:	f001 fdbb 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues88);	//UART
 8001de2:	48ca      	ldr	r0, [pc, #808]	; (800210c <chkcommand2+0x12e0>)
 8001de4:	f000 ff92 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001de8:	2064      	movs	r0, #100	; 0x64
 8001dea:	f001 fdb5 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues89);	//UART
 8001dee:	48c8      	ldr	r0, [pc, #800]	; (8002110 <chkcommand2+0x12e4>)
 8001df0:	f000 ff8c 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001df4:	2064      	movs	r0, #100	; 0x64
 8001df6:	f001 fdaf 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues90);	//UART
 8001dfa:	48c6      	ldr	r0, [pc, #792]	; (8002114 <chkcommand2+0x12e8>)
 8001dfc:	f000 ff86 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e00:	2064      	movs	r0, #100	; 0x64
 8001e02:	f001 fda9 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues91);	//UART
 8001e06:	48c4      	ldr	r0, [pc, #784]	; (8002118 <chkcommand2+0x12ec>)
 8001e08:	f000 ff80 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e0c:	2064      	movs	r0, #100	; 0x64
 8001e0e:	f001 fda3 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues92);	//UART
 8001e12:	48c2      	ldr	r0, [pc, #776]	; (800211c <chkcommand2+0x12f0>)
 8001e14:	f000 ff7a 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e18:	2064      	movs	r0, #100	; 0x64
 8001e1a:	f001 fd9d 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues93);	//UART
 8001e1e:	48c0      	ldr	r0, [pc, #768]	; (8002120 <chkcommand2+0x12f4>)
 8001e20:	f000 ff74 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e24:	2064      	movs	r0, #100	; 0x64
 8001e26:	f001 fd97 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues94);	//UART
 8001e2a:	48be      	ldr	r0, [pc, #760]	; (8002124 <chkcommand2+0x12f8>)
 8001e2c:	f000 ff6e 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e30:	2064      	movs	r0, #100	; 0x64
 8001e32:	f001 fd91 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues95);	//UART
 8001e36:	48bc      	ldr	r0, [pc, #752]	; (8002128 <chkcommand2+0x12fc>)
 8001e38:	f000 ff68 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e3c:	2064      	movs	r0, #100	; 0x64
 8001e3e:	f001 fd8b 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues96);	//UART
 8001e42:	48ba      	ldr	r0, [pc, #744]	; (800212c <chkcommand2+0x1300>)
 8001e44:	f000 ff62 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e48:	2064      	movs	r0, #100	; 0x64
 8001e4a:	f001 fd85 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues97);	//UART
 8001e4e:	48b8      	ldr	r0, [pc, #736]	; (8002130 <chkcommand2+0x1304>)
 8001e50:	f000 ff5c 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e54:	2064      	movs	r0, #100	; 0x64
 8001e56:	f001 fd7f 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues98);	//UART
 8001e5a:	48b6      	ldr	r0, [pc, #728]	; (8002134 <chkcommand2+0x1308>)
 8001e5c:	f000 ff56 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e60:	2064      	movs	r0, #100	; 0x64
 8001e62:	f001 fd79 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValues99);	//UART
 8001e66:	48b4      	ldr	r0, [pc, #720]	; (8002138 <chkcommand2+0x130c>)
 8001e68:	f000 ff50 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e6c:	2064      	movs	r0, #100	; 0x64
 8001e6e:	f001 fd73 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesA0);	//UART
 8001e72:	48b2      	ldr	r0, [pc, #712]	; (800213c <chkcommand2+0x1310>)
 8001e74:	f000 ff4a 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e78:	2064      	movs	r0, #100	; 0x64
 8001e7a:	f001 fd6d 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesA1);	//UART
 8001e7e:	48b0      	ldr	r0, [pc, #704]	; (8002140 <chkcommand2+0x1314>)
 8001e80:	f000 ff44 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e84:	2064      	movs	r0, #100	; 0x64
 8001e86:	f001 fd67 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesA2);	//UART
 8001e8a:	48ae      	ldr	r0, [pc, #696]	; (8002144 <chkcommand2+0x1318>)
 8001e8c:	f000 ff3e 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e90:	2064      	movs	r0, #100	; 0x64
 8001e92:	f001 fd61 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesA3);	//UART
 8001e96:	48ac      	ldr	r0, [pc, #688]	; (8002148 <chkcommand2+0x131c>)
 8001e98:	f000 ff38 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001e9c:	2064      	movs	r0, #100	; 0x64
 8001e9e:	f001 fd5b 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesA4);	//UART
 8001ea2:	48aa      	ldr	r0, [pc, #680]	; (800214c <chkcommand2+0x1320>)
 8001ea4:	f000 ff32 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ea8:	2064      	movs	r0, #100	; 0x64
 8001eaa:	f001 fd55 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesA5);	//UART
 8001eae:	48a8      	ldr	r0, [pc, #672]	; (8002150 <chkcommand2+0x1324>)
 8001eb0:	f000 ff2c 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001eb4:	2064      	movs	r0, #100	; 0x64
 8001eb6:	f001 fd4f 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesA6);	//UART
 8001eba:	48a6      	ldr	r0, [pc, #664]	; (8002154 <chkcommand2+0x1328>)
 8001ebc:	f000 ff26 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ec0:	2064      	movs	r0, #100	; 0x64
 8001ec2:	f001 fd49 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesA7);	//UART
 8001ec6:	48a4      	ldr	r0, [pc, #656]	; (8002158 <chkcommand2+0x132c>)
 8001ec8:	f000 ff20 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ecc:	2064      	movs	r0, #100	; 0x64
 8001ece:	f001 fd43 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesA8);	//UART
 8001ed2:	48a2      	ldr	r0, [pc, #648]	; (800215c <chkcommand2+0x1330>)
 8001ed4:	f000 ff1a 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ed8:	2064      	movs	r0, #100	; 0x64
 8001eda:	f001 fd3d 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesA9);	//UART
 8001ede:	48a0      	ldr	r0, [pc, #640]	; (8002160 <chkcommand2+0x1334>)
 8001ee0:	f000 ff14 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ee4:	2064      	movs	r0, #100	; 0x64
 8001ee6:	f001 fd37 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesB0);	//UART
 8001eea:	489e      	ldr	r0, [pc, #632]	; (8002164 <chkcommand2+0x1338>)
 8001eec:	f000 ff0e 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ef0:	2064      	movs	r0, #100	; 0x64
 8001ef2:	f001 fd31 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesB1);	//UART
 8001ef6:	489c      	ldr	r0, [pc, #624]	; (8002168 <chkcommand2+0x133c>)
 8001ef8:	f000 ff08 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001efc:	2064      	movs	r0, #100	; 0x64
 8001efe:	f001 fd2b 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesB2);	//UART
 8001f02:	489a      	ldr	r0, [pc, #616]	; (800216c <chkcommand2+0x1340>)
 8001f04:	f000 ff02 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f08:	2064      	movs	r0, #100	; 0x64
 8001f0a:	f001 fd25 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesB3);	//UART
 8001f0e:	4898      	ldr	r0, [pc, #608]	; (8002170 <chkcommand2+0x1344>)
 8001f10:	f000 fefc 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f14:	2064      	movs	r0, #100	; 0x64
 8001f16:	f001 fd1f 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesB4);	//UART
 8001f1a:	4896      	ldr	r0, [pc, #600]	; (8002174 <chkcommand2+0x1348>)
 8001f1c:	f000 fef6 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f20:	2064      	movs	r0, #100	; 0x64
 8001f22:	f001 fd19 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesB5);	//UART
 8001f26:	4894      	ldr	r0, [pc, #592]	; (8002178 <chkcommand2+0x134c>)
 8001f28:	f000 fef0 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f2c:	2064      	movs	r0, #100	; 0x64
 8001f2e:	f001 fd13 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesB6);	//UART
 8001f32:	4892      	ldr	r0, [pc, #584]	; (800217c <chkcommand2+0x1350>)
 8001f34:	f000 feea 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f38:	2064      	movs	r0, #100	; 0x64
 8001f3a:	f001 fd0d 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesB7);	//UART
 8001f3e:	4890      	ldr	r0, [pc, #576]	; (8002180 <chkcommand2+0x1354>)
 8001f40:	f000 fee4 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f44:	2064      	movs	r0, #100	; 0x64
 8001f46:	f001 fd07 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesB8);	//UART
 8001f4a:	488e      	ldr	r0, [pc, #568]	; (8002184 <chkcommand2+0x1358>)
 8001f4c:	f000 fede 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f50:	2064      	movs	r0, #100	; 0x64
 8001f52:	f001 fd01 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesB9);	//UART
 8001f56:	488c      	ldr	r0, [pc, #560]	; (8002188 <chkcommand2+0x135c>)
 8001f58:	f000 fed8 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f5c:	2064      	movs	r0, #100	; 0x64
 8001f5e:	f001 fcfb 	bl	8003958 <HAL_Delay>

		uartSendADCData(ADCValuesC0);	//UART
 8001f62:	488a      	ldr	r0, [pc, #552]	; (800218c <chkcommand2+0x1360>)
 8001f64:	f000 fed2 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f68:	2064      	movs	r0, #100	; 0x64
 8001f6a:	f001 fcf5 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesC1);	//UART
 8001f6e:	4888      	ldr	r0, [pc, #544]	; (8002190 <chkcommand2+0x1364>)
 8001f70:	f000 fecc 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f74:	2064      	movs	r0, #100	; 0x64
 8001f76:	f001 fcef 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesC2);	//UART
 8001f7a:	4886      	ldr	r0, [pc, #536]	; (8002194 <chkcommand2+0x1368>)
 8001f7c:	f000 fec6 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f80:	2064      	movs	r0, #100	; 0x64
 8001f82:	f001 fce9 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesC3);	//UART
 8001f86:	4884      	ldr	r0, [pc, #528]	; (8002198 <chkcommand2+0x136c>)
 8001f88:	f000 fec0 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f8c:	2064      	movs	r0, #100	; 0x64
 8001f8e:	f001 fce3 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesC4);	//UART
 8001f92:	4882      	ldr	r0, [pc, #520]	; (800219c <chkcommand2+0x1370>)
 8001f94:	f000 feba 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001f98:	2064      	movs	r0, #100	; 0x64
 8001f9a:	f001 fcdd 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesC5);	//UART
 8001f9e:	4880      	ldr	r0, [pc, #512]	; (80021a0 <chkcommand2+0x1374>)
 8001fa0:	f000 feb4 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001fa4:	2064      	movs	r0, #100	; 0x64
 8001fa6:	f001 fcd7 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesC6);	//UART
 8001faa:	487e      	ldr	r0, [pc, #504]	; (80021a4 <chkcommand2+0x1378>)
 8001fac:	f000 feae 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001fb0:	2064      	movs	r0, #100	; 0x64
 8001fb2:	f001 fcd1 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesC7);	//UART
 8001fb6:	487c      	ldr	r0, [pc, #496]	; (80021a8 <chkcommand2+0x137c>)
 8001fb8:	f000 fea8 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001fbc:	2064      	movs	r0, #100	; 0x64
 8001fbe:	f001 fccb 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesC8);	//UART
 8001fc2:	487a      	ldr	r0, [pc, #488]	; (80021ac <chkcommand2+0x1380>)
 8001fc4:	f000 fea2 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001fc8:	2064      	movs	r0, #100	; 0x64
 8001fca:	f001 fcc5 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesC9);	//UART
 8001fce:	4878      	ldr	r0, [pc, #480]	; (80021b0 <chkcommand2+0x1384>)
 8001fd0:	f000 fe9c 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001fd4:	2064      	movs	r0, #100	; 0x64
 8001fd6:	f001 fcbf 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesD0);	//UART
 8001fda:	4876      	ldr	r0, [pc, #472]	; (80021b4 <chkcommand2+0x1388>)
 8001fdc:	f000 fe96 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001fe0:	2064      	movs	r0, #100	; 0x64
 8001fe2:	f001 fcb9 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesD1);	//UART
 8001fe6:	4874      	ldr	r0, [pc, #464]	; (80021b8 <chkcommand2+0x138c>)
 8001fe8:	f000 fe90 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001fec:	2064      	movs	r0, #100	; 0x64
 8001fee:	f001 fcb3 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesD2);	//UART
 8001ff2:	4872      	ldr	r0, [pc, #456]	; (80021bc <chkcommand2+0x1390>)
 8001ff4:	f000 fe8a 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8001ff8:	2064      	movs	r0, #100	; 0x64
 8001ffa:	f001 fcad 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesD3);	//UART
 8001ffe:	4870      	ldr	r0, [pc, #448]	; (80021c0 <chkcommand2+0x1394>)
 8002000:	f000 fe84 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002004:	2064      	movs	r0, #100	; 0x64
 8002006:	f001 fca7 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesD4);	//UART
 800200a:	486e      	ldr	r0, [pc, #440]	; (80021c4 <chkcommand2+0x1398>)
 800200c:	f000 fe7e 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002010:	2064      	movs	r0, #100	; 0x64
 8002012:	f001 fca1 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesD5);	//UART
 8002016:	486c      	ldr	r0, [pc, #432]	; (80021c8 <chkcommand2+0x139c>)
 8002018:	f000 fe78 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800201c:	2064      	movs	r0, #100	; 0x64
 800201e:	f001 fc9b 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesD6);	//UART
 8002022:	486a      	ldr	r0, [pc, #424]	; (80021cc <chkcommand2+0x13a0>)
 8002024:	f000 fe72 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002028:	2064      	movs	r0, #100	; 0x64
 800202a:	f001 fc95 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesD7);	//UART
 800202e:	4868      	ldr	r0, [pc, #416]	; (80021d0 <chkcommand2+0x13a4>)
 8002030:	f000 fe6c 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002034:	2064      	movs	r0, #100	; 0x64
 8002036:	f001 fc8f 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesD8);	//UART
 800203a:	4866      	ldr	r0, [pc, #408]	; (80021d4 <chkcommand2+0x13a8>)
 800203c:	f000 fe66 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002040:	2064      	movs	r0, #100	; 0x64
 8002042:	f001 fc89 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesD9);	//UART
 8002046:	4864      	ldr	r0, [pc, #400]	; (80021d8 <chkcommand2+0x13ac>)
 8002048:	f000 fe60 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800204c:	2064      	movs	r0, #100	; 0x64
 800204e:	f001 fc83 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesE0);	//UART
 8002052:	4862      	ldr	r0, [pc, #392]	; (80021dc <chkcommand2+0x13b0>)
 8002054:	f000 fe5a 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002058:	2064      	movs	r0, #100	; 0x64
 800205a:	f001 fc7d 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesE1);	//UART
 800205e:	4860      	ldr	r0, [pc, #384]	; (80021e0 <chkcommand2+0x13b4>)
 8002060:	f000 fe54 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002064:	2064      	movs	r0, #100	; 0x64
 8002066:	f001 fc77 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesE2);	//UART
 800206a:	485e      	ldr	r0, [pc, #376]	; (80021e4 <chkcommand2+0x13b8>)
 800206c:	f000 fe4e 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002070:	2064      	movs	r0, #100	; 0x64
 8002072:	f001 fc71 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesE3);	//UART
 8002076:	485c      	ldr	r0, [pc, #368]	; (80021e8 <chkcommand2+0x13bc>)
 8002078:	f000 fe48 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800207c:	2064      	movs	r0, #100	; 0x64
 800207e:	f001 fc6b 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesE4);	//UART
 8002082:	485a      	ldr	r0, [pc, #360]	; (80021ec <chkcommand2+0x13c0>)
 8002084:	f000 fe42 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002088:	2064      	movs	r0, #100	; 0x64
 800208a:	f001 fc65 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesE5);	//UART
 800208e:	4858      	ldr	r0, [pc, #352]	; (80021f0 <chkcommand2+0x13c4>)
 8002090:	f000 fe3c 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002094:	2064      	movs	r0, #100	; 0x64
 8002096:	f001 fc5f 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesE6);	//UART
 800209a:	4856      	ldr	r0, [pc, #344]	; (80021f4 <chkcommand2+0x13c8>)
 800209c:	f000 fe36 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80020a0:	2064      	movs	r0, #100	; 0x64
 80020a2:	f001 fc59 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesE7);	//UART
 80020a6:	4854      	ldr	r0, [pc, #336]	; (80021f8 <chkcommand2+0x13cc>)
 80020a8:	f000 fe30 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80020ac:	2064      	movs	r0, #100	; 0x64
 80020ae:	f001 fc53 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesE8);	//UART
 80020b2:	4852      	ldr	r0, [pc, #328]	; (80021fc <chkcommand2+0x13d0>)
 80020b4:	f000 fe2a 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80020b8:	2064      	movs	r0, #100	; 0x64
 80020ba:	f001 fc4d 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesE9);	//UART
 80020be:	4850      	ldr	r0, [pc, #320]	; (8002200 <chkcommand2+0x13d4>)
 80020c0:	f000 fe24 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80020c4:	2064      	movs	r0, #100	; 0x64
 80020c6:	f001 fc47 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesF0);	//UART
 80020ca:	484e      	ldr	r0, [pc, #312]	; (8002204 <chkcommand2+0x13d8>)
 80020cc:	f000 fe1e 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80020d0:	2064      	movs	r0, #100	; 0x64
 80020d2:	f001 fc41 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesF1);	//UART
 80020d6:	484c      	ldr	r0, [pc, #304]	; (8002208 <chkcommand2+0x13dc>)
 80020d8:	f000 fe18 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 80020dc:	2064      	movs	r0, #100	; 0x64
 80020de:	f001 fc3b 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesF2);	//UART
 80020e2:	484a      	ldr	r0, [pc, #296]	; (800220c <chkcommand2+0x13e0>)
 80020e4:	f000 fe12 	bl	8002d0c <uartSendADCData>
 80020e8:	e092      	b.n	8002210 <chkcommand2+0x13e4>
 80020ea:	bf00      	nop
 80020ec:	20006950 	.word	0x20006950
 80020f0:	200055fc 	.word	0x200055fc
 80020f4:	20006860 	.word	0x20006860
 80020f8:	20003bb0 	.word	0x20003bb0
 80020fc:	2000a280 	.word	0x2000a280
 8002100:	20005aac 	.word	0x20005aac
 8002104:	200005f4 	.word	0x200005f4
 8002108:	20002f80 	.word	0x20002f80
 800210c:	20003520 	.word	0x20003520
 8002110:	20002ad0 	.word	0x20002ad0
 8002114:	2000437c 	.word	0x2000437c
 8002118:	20006d10 	.word	0x20006d10
 800211c:	200018b4 	.word	0x200018b4
 8002120:	20002350 	.word	0x20002350
 8002124:	20009920 	.word	0x20009920
 8002128:	200045c4 	.word	0x200045c4
 800212c:	200077f0 	.word	0x200077f0
 8002130:	20007520 	.word	0x20007520
 8002134:	200015e4 	.word	0x200015e4
 8002138:	20002da0 	.word	0x20002da0
 800213c:	20006544 	.word	0x20006544
 8002140:	20003cec 	.word	0x20003cec
 8002144:	20000414 	.word	0x20000414
 8002148:	20003340 	.word	0x20003340
 800214c:	200080a0 	.word	0x200080a0
 8002150:	20009740 	.word	0x20009740
 8002154:	20005fa4 	.word	0x20005fa4
 8002158:	20001134 	.word	0x20001134
 800215c:	20000c84 	.word	0x20000c84
 8002160:	20003ecc 	.word	0x20003ecc
 8002164:	20007fb0 	.word	0x20007fb0
 8002168:	20006364 	.word	0x20006364
 800216c:	20009bf0 	.word	0x20009bf0
 8002170:	2000446c 	.word	0x2000446c
 8002174:	200056ec 	.word	0x200056ec
 8002178:	20009ec0 	.word	0x20009ec0
 800217c:	20004abc 	.word	0x20004abc
 8002180:	2000523c 	.word	0x2000523c
 8002184:	200083bc 	.word	0x200083bc
 8002188:	20001314 	.word	0x20001314
 800218c:	200014f4 	.word	0x200014f4
 8002190:	20009dd0 	.word	0x20009dd0
 8002194:	20006b30 	.word	0x20006b30
 8002198:	20007700 	.word	0x20007700
 800219c:	20009380 	.word	0x20009380
 80021a0:	20002440 	.word	0x20002440
 80021a4:	20001db0 	.word	0x20001db0
 80021a8:	20002bc0 	.word	0x20002bc0
 80021ac:	200081dc 	.word	0x200081dc
 80021b0:	20000504 	.word	0x20000504
 80021b4:	200082cc 	.word	0x200082cc
 80021b8:	20007250 	.word	0x20007250
 80021bc:	20005c8c 	.word	0x20005c8c
 80021c0:	200029e0 	.word	0x200029e0
 80021c4:	20001404 	.word	0x20001404
 80021c8:	20002710 	.word	0x20002710
 80021cc:	20006a40 	.word	0x20006a40
 80021d0:	20006274 	.word	0x20006274
 80021d4:	20008fc0 	.word	0x20008fc0
 80021d8:	200040ac 	.word	0x200040ac
 80021dc:	20008ed0 	.word	0x20008ed0
 80021e0:	200059bc 	.word	0x200059bc
 80021e4:	200007d4 	.word	0x200007d4
 80021e8:	20000d74 	.word	0x20000d74
 80021ec:	20003fbc 	.word	0x20003fbc
 80021f0:	20004e7c 	.word	0x20004e7c
 80021f4:	20006634 	.word	0x20006634
 80021f8:	20002080 	.word	0x20002080
 80021fc:	20009560 	.word	0x20009560
 8002200:	200039d0 	.word	0x200039d0
 8002204:	20003ddc 	.word	0x20003ddc
 8002208:	20004d8c 	.word	0x20004d8c
 800220c:	20009fb0 	.word	0x20009fb0
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002210:	2064      	movs	r0, #100	; 0x64
 8002212:	f001 fba1 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesF3);	//UART
 8002216:	48b0      	ldr	r0, [pc, #704]	; (80024d8 <chkcommand2+0x16ac>)
 8002218:	f000 fd78 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800221c:	2064      	movs	r0, #100	; 0x64
 800221e:	f001 fb9b 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesF4);	//UART
 8002222:	48ae      	ldr	r0, [pc, #696]	; (80024dc <chkcommand2+0x16b0>)
 8002224:	f000 fd72 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002228:	2064      	movs	r0, #100	; 0x64
 800222a:	f001 fb95 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesF5);	//UART
 800222e:	48ac      	ldr	r0, [pc, #688]	; (80024e0 <chkcommand2+0x16b4>)
 8002230:	f000 fd6c 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002234:	2064      	movs	r0, #100	; 0x64
 8002236:	f001 fb8f 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesF6);	//UART
 800223a:	48aa      	ldr	r0, [pc, #680]	; (80024e4 <chkcommand2+0x16b8>)
 800223c:	f000 fd66 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002240:	2064      	movs	r0, #100	; 0x64
 8002242:	f001 fb89 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesF7);	//UART
 8002246:	48a8      	ldr	r0, [pc, #672]	; (80024e8 <chkcommand2+0x16bc>)
 8002248:	f000 fd60 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 800224c:	2064      	movs	r0, #100	; 0x64
 800224e:	f001 fb83 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesF8);	//UART
 8002252:	48a6      	ldr	r0, [pc, #664]	; (80024ec <chkcommand2+0x16c0>)
 8002254:	f000 fd5a 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002258:	2064      	movs	r0, #100	; 0x64
 800225a:	f001 fb7d 	bl	8003958 <HAL_Delay>
		uartSendADCData(ADCValuesF9);	//UART
 800225e:	48a4      	ldr	r0, [pc, #656]	; (80024f0 <chkcommand2+0x16c4>)
 8002260:	f000 fd54 	bl	8002d0c <uartSendADCData>
		HAL_Delay(100); 				// 転送完了待ち100ms
 8002264:	2064      	movs	r0, #100	; 0x64
 8002266:	f001 fb77 	bl	8003958 <HAL_Delay>
 800226a:	e26d      	b.n	8002748 <chkcommand2+0x191c>

	}
	else if  ((RxBuff[0] == 'd' ) &&  (RxBuff[1] == 's') &&  (RxBuff[2] == 'p')&& (RxBuff[3] == '\r' ) &&  (RxBuff[4] == '\n')) {
 800226c:	4ba1      	ldr	r3, [pc, #644]	; (80024f4 <chkcommand2+0x16c8>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b64      	cmp	r3, #100	; 0x64
 8002272:	d17c      	bne.n	800236e <chkcommand2+0x1542>
 8002274:	4b9f      	ldr	r3, [pc, #636]	; (80024f4 <chkcommand2+0x16c8>)
 8002276:	785b      	ldrb	r3, [r3, #1]
 8002278:	2b73      	cmp	r3, #115	; 0x73
 800227a:	d178      	bne.n	800236e <chkcommand2+0x1542>
 800227c:	4b9d      	ldr	r3, [pc, #628]	; (80024f4 <chkcommand2+0x16c8>)
 800227e:	789b      	ldrb	r3, [r3, #2]
 8002280:	2b70      	cmp	r3, #112	; 0x70
 8002282:	d174      	bne.n	800236e <chkcommand2+0x1542>
 8002284:	4b9b      	ldr	r3, [pc, #620]	; (80024f4 <chkcommand2+0x16c8>)
 8002286:	78db      	ldrb	r3, [r3, #3]
 8002288:	2b0d      	cmp	r3, #13
 800228a:	d170      	bne.n	800236e <chkcommand2+0x1542>
 800228c:	4b99      	ldr	r3, [pc, #612]	; (80024f4 <chkcommand2+0x16c8>)
 800228e:	791b      	ldrb	r3, [r3, #4]
 8002290:	2b0a      	cmp	r3, #10
 8002292:	d16c      	bne.n	800236e <chkcommand2+0x1542>
		/*
		 * 表示する文字列をstrouttempに格納し、TxBuffに結合して最終的に出力する文字列を作成する
		 */

		//TxBuff クリア
		memset((char*)TxBuff,0 ,USART_TX_BUFFSIZE);
 8002294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002298:	2100      	movs	r1, #0
 800229a:	4897      	ldr	r0, [pc, #604]	; (80024f8 <chkcommand2+0x16cc>)
 800229c:	f009 f81a 	bl	800b2d4 <memset>
		//送信文字列作成
		sprintf(TxBuff,"Settings......\r\n");
 80022a0:	4996      	ldr	r1, [pc, #600]	; (80024fc <chkcommand2+0x16d0>)
 80022a2:	4895      	ldr	r0, [pc, #596]	; (80024f8 <chkcommand2+0x16cc>)
 80022a4:	f009 f81e 	bl	800b2e4 <siprintf>
		sprintf(strouttemp,"ADC Channel                = %d\r\n",u8ADC_ChNo);
 80022a8:	4b95      	ldr	r3, [pc, #596]	; (8002500 <chkcommand2+0x16d4>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	463b      	mov	r3, r7
 80022b0:	4994      	ldr	r1, [pc, #592]	; (8002504 <chkcommand2+0x16d8>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f009 f816 	bl	800b2e4 <siprintf>
		strcat(TxBuff,strouttemp);
 80022b8:	463b      	mov	r3, r7
 80022ba:	4619      	mov	r1, r3
 80022bc:	488e      	ldr	r0, [pc, #568]	; (80024f8 <chkcommand2+0x16cc>)
 80022be:	f009 f831 	bl	800b324 <strcat>
		sprintf(strouttemp,"ADC Resolution             = %d\r\n",u8ADC_Resolution);
 80022c2:	4b91      	ldr	r3, [pc, #580]	; (8002508 <chkcommand2+0x16dc>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	463b      	mov	r3, r7
 80022ca:	4990      	ldr	r1, [pc, #576]	; (800250c <chkcommand2+0x16e0>)
 80022cc:	4618      	mov	r0, r3
 80022ce:	f009 f809 	bl	800b2e4 <siprintf>
		strcat(TxBuff,strouttemp);
 80022d2:	463b      	mov	r3, r7
 80022d4:	4619      	mov	r1, r3
 80022d6:	4888      	ldr	r0, [pc, #544]	; (80024f8 <chkcommand2+0x16cc>)
 80022d8:	f009 f824 	bl	800b324 <strcat>
		sprintf(strouttemp,"ADC Sampling Time          = %d\r\n",u16ADC_SMPLTime);
 80022dc:	4b8c      	ldr	r3, [pc, #560]	; (8002510 <chkcommand2+0x16e4>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	463b      	mov	r3, r7
 80022e4:	498b      	ldr	r1, [pc, #556]	; (8002514 <chkcommand2+0x16e8>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f008 fffc 	bl	800b2e4 <siprintf>
		strcat(TxBuff,strouttemp);
 80022ec:	463b      	mov	r3, r7
 80022ee:	4619      	mov	r1, r3
 80022f0:	4881      	ldr	r0, [pc, #516]	; (80024f8 <chkcommand2+0x16cc>)
 80022f2:	f009 f817 	bl	800b324 <strcat>
		sprintf(strouttemp,"ADC Start delay Time       = %ld\r\n",u32ADC_StartDelay);
 80022f6:	4b88      	ldr	r3, [pc, #544]	; (8002518 <chkcommand2+0x16ec>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	463b      	mov	r3, r7
 80022fc:	4987      	ldr	r1, [pc, #540]	; (800251c <chkcommand2+0x16f0>)
 80022fe:	4618      	mov	r0, r3
 8002300:	f008 fff0 	bl	800b2e4 <siprintf>
		strcat(TxBuff,strouttemp);
 8002304:	463b      	mov	r3, r7
 8002306:	4619      	mov	r1, r3
 8002308:	487b      	ldr	r0, [pc, #492]	; (80024f8 <chkcommand2+0x16cc>)
 800230a:	f009 f80b 	bl	800b324 <strcat>
		sprintf(strouttemp,"Pulse 1(ARR , CCR)         = %d , %d\r\n",(uint16_t)aSRC_Buffer[1],(uint16_t)aSRC_Buffer[3]);
 800230e:	4b84      	ldr	r3, [pc, #528]	; (8002520 <chkcommand2+0x16f4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4b82      	ldr	r3, [pc, #520]	; (8002520 <chkcommand2+0x16f4>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4638      	mov	r0, r7
 800231e:	4981      	ldr	r1, [pc, #516]	; (8002524 <chkcommand2+0x16f8>)
 8002320:	f008 ffe0 	bl	800b2e4 <siprintf>
		strcat(TxBuff,strouttemp);
 8002324:	463b      	mov	r3, r7
 8002326:	4619      	mov	r1, r3
 8002328:	4873      	ldr	r0, [pc, #460]	; (80024f8 <chkcommand2+0x16cc>)
 800232a:	f008 fffb 	bl	800b324 <strcat>
		sprintf(strouttemp,"Pulse 2(ARR , CCR)         = %d , %d\r\n",(uint16_t)aSRC_Buffer[5],(uint16_t)aSRC_Buffer[7]);
 800232e:	4b7c      	ldr	r3, [pc, #496]	; (8002520 <chkcommand2+0x16f4>)
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	4b7a      	ldr	r3, [pc, #488]	; (8002520 <chkcommand2+0x16f4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4638      	mov	r0, r7
 800233e:	497a      	ldr	r1, [pc, #488]	; (8002528 <chkcommand2+0x16fc>)
 8002340:	f008 ffd0 	bl	800b2e4 <siprintf>
		strcat(TxBuff,strouttemp);
 8002344:	463b      	mov	r3, r7
 8002346:	4619      	mov	r1, r3
 8002348:	486b      	ldr	r0, [pc, #428]	; (80024f8 <chkcommand2+0x16cc>)
 800234a:	f008 ffeb 	bl	800b324 <strcat>
		strcat(TxBuff,CMD_OK);
 800234e:	486a      	ldr	r0, [pc, #424]	; (80024f8 <chkcommand2+0x16cc>)
 8002350:	f7fd ff50 	bl	80001f4 <strlen>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	4b67      	ldr	r3, [pc, #412]	; (80024f8 <chkcommand2+0x16cc>)
 800235a:	4413      	add	r3, r2
 800235c:	4a73      	ldr	r2, [pc, #460]	; (800252c <chkcommand2+0x1700>)
 800235e:	6810      	ldr	r0, [r2, #0]
 8002360:	6018      	str	r0, [r3, #0]
 8002362:	7912      	ldrb	r2, [r2, #4]
 8002364:	711a      	strb	r2, [r3, #4]
		// UART送信
		uartSendData(TxBuff);
 8002366:	4864      	ldr	r0, [pc, #400]	; (80024f8 <chkcommand2+0x16cc>)
 8002368:	f000 fc92 	bl	8002c90 <uartSendData>
 800236c:	e1ec      	b.n	8002748 <chkcommand2+0x191c>
		 * 一致した場合、" "以降文字を取り出し数値変換してパラメータにセットする
		 *
		 */

		//受信データを内部バッファにコピー
		memcpy(paraData, RxBuff, strlen(RxBuff) );
 800236e:	4861      	ldr	r0, [pc, #388]	; (80024f4 <chkcommand2+0x16c8>)
 8002370:	f7fd ff40 	bl	80001f4 <strlen>
 8002374:	4602      	mov	r2, r0
 8002376:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800237a:	495e      	ldr	r1, [pc, #376]	; (80024f4 <chkcommand2+0x16c8>)
 800237c:	4618      	mov	r0, r3
 800237e:	f008 ff9b 	bl	800b2b8 <memcpy>
		// スペースまでの位置を取得
		para = strtok(paraData, " ");
 8002382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002386:	496a      	ldr	r1, [pc, #424]	; (8002530 <chkcommand2+0x1704>)
 8002388:	4618      	mov	r0, r3
 800238a:	f008 ffdb 	bl	800b344 <strtok>
 800238e:	6738      	str	r0, [r7, #112]	; 0x70
		//取り出した文字列がコマンドと一致してるか判定
		if (strcmp(para , CMD_SET_CH_No) == 0){
 8002390:	4968      	ldr	r1, [pc, #416]	; (8002534 <chkcommand2+0x1708>)
 8002392:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002394:	f7fd ff24 	bl	80001e0 <strcmp>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d11c      	bne.n	80023d8 <chkcommand2+0x15ac>
			// 引数を取り出し
			para = strtok(NULL, " ");
 800239e:	4964      	ldr	r1, [pc, #400]	; (8002530 <chkcommand2+0x1704>)
 80023a0:	2000      	movs	r0, #0
 80023a2:	f008 ffcf 	bl	800b344 <strtok>
 80023a6:	6738      	str	r0, [r7, #112]	; 0x70
			data = strtoul(para, NULL, 10);
 80023a8:	220a      	movs	r2, #10
 80023aa:	2100      	movs	r1, #0
 80023ac:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80023ae:	f009 f8a1 	bl	800b4f4 <strtoul>
 80023b2:	6778      	str	r0, [r7, #116]	; 0x74
			//引数check
			if (data == 1 ||  data  == 2 ) {
 80023b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d002      	beq.n	80023c0 <chkcommand2+0x1594>
 80023ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d107      	bne.n	80023d0 <chkcommand2+0x15a4>
				u8ADC_ChNo = data;
 80023c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	4b4e      	ldr	r3, [pc, #312]	; (8002500 <chkcommand2+0x16d4>)
 80023c6:	701a      	strb	r2, [r3, #0]
				uartSendData(CMD_OK);				// OK送信
 80023c8:	4858      	ldr	r0, [pc, #352]	; (800252c <chkcommand2+0x1700>)
 80023ca:	f000 fc61 	bl	8002c90 <uartSendData>
 80023ce:	e1bb      	b.n	8002748 <chkcommand2+0x191c>
			}
			else{
				uartSendData(CMD_ERR);				// ERR送信
 80023d0:	4859      	ldr	r0, [pc, #356]	; (8002538 <chkcommand2+0x170c>)
 80023d2:	f000 fc5d 	bl	8002c90 <uartSendData>
			sprintf(strouttemp,"Set Pulse 2 CCR (us) .................. pc2 X (0-65535)\r\n");
			strcat(TxBuff,strouttemp);
			uartSendData(TxBuff);
		}
	}
}
 80023d6:	e1b7      	b.n	8002748 <chkcommand2+0x191c>
		else if (strcmp(para , CMD_SET_ADC_RESO) == 0){
 80023d8:	4958      	ldr	r1, [pc, #352]	; (800253c <chkcommand2+0x1710>)
 80023da:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80023dc:	f7fd ff00 	bl	80001e0 <strcmp>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d122      	bne.n	800242c <chkcommand2+0x1600>
			para = strtok(NULL, " ");
 80023e6:	4952      	ldr	r1, [pc, #328]	; (8002530 <chkcommand2+0x1704>)
 80023e8:	2000      	movs	r0, #0
 80023ea:	f008 ffab 	bl	800b344 <strtok>
 80023ee:	6738      	str	r0, [r7, #112]	; 0x70
			data = strtoul(para, NULL, 10);
 80023f0:	220a      	movs	r2, #10
 80023f2:	2100      	movs	r1, #0
 80023f4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80023f6:	f009 f87d 	bl	800b4f4 <strtoul>
 80023fa:	6778      	str	r0, [r7, #116]	; 0x74
			if (( data == 6 ) || ( data == 8 ) || (data ==10 ) || ( data == 12 )){
 80023fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d008      	beq.n	8002414 <chkcommand2+0x15e8>
 8002402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002404:	2b08      	cmp	r3, #8
 8002406:	d005      	beq.n	8002414 <chkcommand2+0x15e8>
 8002408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800240a:	2b0a      	cmp	r3, #10
 800240c:	d002      	beq.n	8002414 <chkcommand2+0x15e8>
 800240e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002410:	2b0c      	cmp	r3, #12
 8002412:	d107      	bne.n	8002424 <chkcommand2+0x15f8>
				u8ADC_Resolution = data;
 8002414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002416:	b2da      	uxtb	r2, r3
 8002418:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <chkcommand2+0x16dc>)
 800241a:	701a      	strb	r2, [r3, #0]
				uartSendData(CMD_OK);
 800241c:	4843      	ldr	r0, [pc, #268]	; (800252c <chkcommand2+0x1700>)
 800241e:	f000 fc37 	bl	8002c90 <uartSendData>
 8002422:	e191      	b.n	8002748 <chkcommand2+0x191c>
				uartSendData(CMD_ERR);
 8002424:	4844      	ldr	r0, [pc, #272]	; (8002538 <chkcommand2+0x170c>)
 8002426:	f000 fc33 	bl	8002c90 <uartSendData>
}
 800242a:	e18d      	b.n	8002748 <chkcommand2+0x191c>
		else if (strcmp(para , CMD_SET_ADC_SMPLTIME) == 0){
 800242c:	4944      	ldr	r1, [pc, #272]	; (8002540 <chkcommand2+0x1714>)
 800242e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002430:	f7fd fed6 	bl	80001e0 <strcmp>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d132      	bne.n	80024a0 <chkcommand2+0x1674>
			para = strtok(NULL, " ");
 800243a:	493d      	ldr	r1, [pc, #244]	; (8002530 <chkcommand2+0x1704>)
 800243c:	2000      	movs	r0, #0
 800243e:	f008 ff81 	bl	800b344 <strtok>
 8002442:	6738      	str	r0, [r7, #112]	; 0x70
			data = strtoul(para, NULL, 10);
 8002444:	220a      	movs	r2, #10
 8002446:	2100      	movs	r1, #0
 8002448:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800244a:	f009 f853 	bl	800b4f4 <strtoul>
 800244e:	6778      	str	r0, [r7, #116]	; 0x74
			if (( data == 2 ) || ( data == 6 ) || (data ==12 ) || ( data == 24 ) || ( data == 47 ) || ( data == 47 )|| ( data == 92 )|| ( data == 247 )|| ( data == 640 )){
 8002450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002452:	2b02      	cmp	r3, #2
 8002454:	d018      	beq.n	8002488 <chkcommand2+0x165c>
 8002456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002458:	2b06      	cmp	r3, #6
 800245a:	d015      	beq.n	8002488 <chkcommand2+0x165c>
 800245c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800245e:	2b0c      	cmp	r3, #12
 8002460:	d012      	beq.n	8002488 <chkcommand2+0x165c>
 8002462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002464:	2b18      	cmp	r3, #24
 8002466:	d00f      	beq.n	8002488 <chkcommand2+0x165c>
 8002468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800246a:	2b2f      	cmp	r3, #47	; 0x2f
 800246c:	d00c      	beq.n	8002488 <chkcommand2+0x165c>
 800246e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002470:	2b2f      	cmp	r3, #47	; 0x2f
 8002472:	d009      	beq.n	8002488 <chkcommand2+0x165c>
 8002474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002476:	2b5c      	cmp	r3, #92	; 0x5c
 8002478:	d006      	beq.n	8002488 <chkcommand2+0x165c>
 800247a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800247c:	2bf7      	cmp	r3, #247	; 0xf7
 800247e:	d003      	beq.n	8002488 <chkcommand2+0x165c>
 8002480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002482:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8002486:	d107      	bne.n	8002498 <chkcommand2+0x166c>
				u16ADC_SMPLTime = data;
 8002488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248a:	b29a      	uxth	r2, r3
 800248c:	4b20      	ldr	r3, [pc, #128]	; (8002510 <chkcommand2+0x16e4>)
 800248e:	801a      	strh	r2, [r3, #0]
				uartSendData(CMD_OK);
 8002490:	4826      	ldr	r0, [pc, #152]	; (800252c <chkcommand2+0x1700>)
 8002492:	f000 fbfd 	bl	8002c90 <uartSendData>
 8002496:	e157      	b.n	8002748 <chkcommand2+0x191c>
				uartSendData(CMD_ERR);
 8002498:	4827      	ldr	r0, [pc, #156]	; (8002538 <chkcommand2+0x170c>)
 800249a:	f000 fbf9 	bl	8002c90 <uartSendData>
}
 800249e:	e153      	b.n	8002748 <chkcommand2+0x191c>
		else if (strcmp(para , CMD_SET_ADC_DELAY) == 0){
 80024a0:	4928      	ldr	r1, [pc, #160]	; (8002544 <chkcommand2+0x1718>)
 80024a2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80024a4:	f7fd fe9c 	bl	80001e0 <strcmp>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d150      	bne.n	8002550 <chkcommand2+0x1724>
			para = strtok(NULL, " ");
 80024ae:	4920      	ldr	r1, [pc, #128]	; (8002530 <chkcommand2+0x1704>)
 80024b0:	2000      	movs	r0, #0
 80024b2:	f008 ff47 	bl	800b344 <strtok>
 80024b6:	6738      	str	r0, [r7, #112]	; 0x70
			data = strtoul(para, NULL, 10);
 80024b8:	220a      	movs	r2, #10
 80024ba:	2100      	movs	r1, #0
 80024bc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80024be:	f009 f819 	bl	800b4f4 <strtoul>
 80024c2:	6778      	str	r0, [r7, #116]	; 0x74
			if (( data >= 39) && (data <= 0xFFFFFFFF)){
 80024c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c6:	2b26      	cmp	r3, #38	; 0x26
 80024c8:	d93e      	bls.n	8002548 <chkcommand2+0x171c>
				u32ADC_StartDelay = data;
 80024ca:	4a13      	ldr	r2, [pc, #76]	; (8002518 <chkcommand2+0x16ec>)
 80024cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ce:	6013      	str	r3, [r2, #0]
				uartSendData(CMD_OK);
 80024d0:	4816      	ldr	r0, [pc, #88]	; (800252c <chkcommand2+0x1700>)
 80024d2:	f000 fbdd 	bl	8002c90 <uartSendData>
}
 80024d6:	e137      	b.n	8002748 <chkcommand2+0x191c>
 80024d8:	20004c9c 	.word	0x20004c9c
 80024dc:	2000541c 	.word	0x2000541c
 80024e0:	2000859c 	.word	0x2000859c
 80024e4:	20000aa4 	.word	0x20000aa4
 80024e8:	20001f90 	.word	0x20001f90
 80024ec:	20008710 	.word	0x20008710
 80024f0:	2000532c 	.word	0x2000532c
 80024f4:	20007bb0 	.word	0x20007bb0
 80024f8:	20008800 	.word	0x20008800
 80024fc:	0800c7ec 	.word	0x0800c7ec
 8002500:	20000184 	.word	0x20000184
 8002504:	0800c800 	.word	0x0800c800
 8002508:	20000185 	.word	0x20000185
 800250c:	0800c824 	.word	0x0800c824
 8002510:	20000186 	.word	0x20000186
 8002514:	0800c848 	.word	0x0800c848
 8002518:	20000188 	.word	0x20000188
 800251c:	0800c86c 	.word	0x0800c86c
 8002520:	20000104 	.word	0x20000104
 8002524:	0800c890 	.word	0x0800c890
 8002528:	0800c8b8 	.word	0x0800c8b8
 800252c:	0800c8e0 	.word	0x0800c8e0
 8002530:	0800c8e8 	.word	0x0800c8e8
 8002534:	0800c8ec 	.word	0x0800c8ec
 8002538:	0800c8f0 	.word	0x0800c8f0
 800253c:	0800c8f8 	.word	0x0800c8f8
 8002540:	0800c8fc 	.word	0x0800c8fc
 8002544:	0800c900 	.word	0x0800c900
				uartSendData(CMD_ERR);
 8002548:	4881      	ldr	r0, [pc, #516]	; (8002750 <chkcommand2+0x1924>)
 800254a:	f000 fba1 	bl	8002c90 <uartSendData>
}
 800254e:	e0fb      	b.n	8002748 <chkcommand2+0x191c>
		else if (strcmp(para , CMD_SET_PWM_ARR1) == 0){
 8002550:	4980      	ldr	r1, [pc, #512]	; (8002754 <chkcommand2+0x1928>)
 8002552:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002554:	f7fd fe44 	bl	80001e0 <strcmp>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d11c      	bne.n	8002598 <chkcommand2+0x176c>
			para = strtok(NULL, " ");
 800255e:	497e      	ldr	r1, [pc, #504]	; (8002758 <chkcommand2+0x192c>)
 8002560:	2000      	movs	r0, #0
 8002562:	f008 feef 	bl	800b344 <strtok>
 8002566:	6738      	str	r0, [r7, #112]	; 0x70
			data = strtoul(para, NULL, 10);
 8002568:	220a      	movs	r2, #10
 800256a:	2100      	movs	r1, #0
 800256c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800256e:	f008 ffc1 	bl	800b4f4 <strtoul>
 8002572:	6778      	str	r0, [r7, #116]	; 0x74
			if (( data >= 1) && (data <= 0xFFFF)){
 8002574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <chkcommand2+0x1764>
 800257a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d206      	bcs.n	8002590 <chkcommand2+0x1764>
				aSRC_Buffer[1] = data;
 8002582:	4a76      	ldr	r2, [pc, #472]	; (800275c <chkcommand2+0x1930>)
 8002584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002586:	6053      	str	r3, [r2, #4]
				uartSendData(CMD_OK);
 8002588:	4875      	ldr	r0, [pc, #468]	; (8002760 <chkcommand2+0x1934>)
 800258a:	f000 fb81 	bl	8002c90 <uartSendData>
 800258e:	e0db      	b.n	8002748 <chkcommand2+0x191c>
				uartSendData(CMD_ERR);
 8002590:	486f      	ldr	r0, [pc, #444]	; (8002750 <chkcommand2+0x1924>)
 8002592:	f000 fb7d 	bl	8002c90 <uartSendData>
}
 8002596:	e0d7      	b.n	8002748 <chkcommand2+0x191c>
		else if (strcmp(para , CMD_SET_PWM_ARR2) == 0){
 8002598:	4972      	ldr	r1, [pc, #456]	; (8002764 <chkcommand2+0x1938>)
 800259a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800259c:	f7fd fe20 	bl	80001e0 <strcmp>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11c      	bne.n	80025e0 <chkcommand2+0x17b4>
			para = strtok(NULL, " ");
 80025a6:	496c      	ldr	r1, [pc, #432]	; (8002758 <chkcommand2+0x192c>)
 80025a8:	2000      	movs	r0, #0
 80025aa:	f008 fecb 	bl	800b344 <strtok>
 80025ae:	6738      	str	r0, [r7, #112]	; 0x70
			data = strtoul(para, NULL, 10);
 80025b0:	220a      	movs	r2, #10
 80025b2:	2100      	movs	r1, #0
 80025b4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80025b6:	f008 ff9d 	bl	800b4f4 <strtoul>
 80025ba:	6778      	str	r0, [r7, #116]	; 0x74
			if (( data >= 1) && (data <= 0xFFFF)){
 80025bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <chkcommand2+0x17ac>
 80025c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c8:	d206      	bcs.n	80025d8 <chkcommand2+0x17ac>
				aSRC_Buffer[5] = data;
 80025ca:	4a64      	ldr	r2, [pc, #400]	; (800275c <chkcommand2+0x1930>)
 80025cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ce:	6153      	str	r3, [r2, #20]
				uartSendData(CMD_OK);
 80025d0:	4863      	ldr	r0, [pc, #396]	; (8002760 <chkcommand2+0x1934>)
 80025d2:	f000 fb5d 	bl	8002c90 <uartSendData>
 80025d6:	e0b7      	b.n	8002748 <chkcommand2+0x191c>
				uartSendData(CMD_ERR);
 80025d8:	485d      	ldr	r0, [pc, #372]	; (8002750 <chkcommand2+0x1924>)
 80025da:	f000 fb59 	bl	8002c90 <uartSendData>
}
 80025de:	e0b3      	b.n	8002748 <chkcommand2+0x191c>
		else if (strcmp(para , CMD_SET_PWM_CCR1) == 0){
 80025e0:	4961      	ldr	r1, [pc, #388]	; (8002768 <chkcommand2+0x193c>)
 80025e2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80025e4:	f7fd fdfc 	bl	80001e0 <strcmp>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d119      	bne.n	8002622 <chkcommand2+0x17f6>
			para = strtok(NULL, " ");
 80025ee:	495a      	ldr	r1, [pc, #360]	; (8002758 <chkcommand2+0x192c>)
 80025f0:	2000      	movs	r0, #0
 80025f2:	f008 fea7 	bl	800b344 <strtok>
 80025f6:	6738      	str	r0, [r7, #112]	; 0x70
			data = strtoul(para, NULL, 10);
 80025f8:	220a      	movs	r2, #10
 80025fa:	2100      	movs	r1, #0
 80025fc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80025fe:	f008 ff79 	bl	800b4f4 <strtoul>
 8002602:	6778      	str	r0, [r7, #116]	; 0x74
			if (( data >= 0) && (data <= 0xFFFF)){
 8002604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260a:	d206      	bcs.n	800261a <chkcommand2+0x17ee>
				aSRC_Buffer[3] = data;
 800260c:	4a53      	ldr	r2, [pc, #332]	; (800275c <chkcommand2+0x1930>)
 800260e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002610:	60d3      	str	r3, [r2, #12]
				uartSendData(CMD_OK);
 8002612:	4853      	ldr	r0, [pc, #332]	; (8002760 <chkcommand2+0x1934>)
 8002614:	f000 fb3c 	bl	8002c90 <uartSendData>
}
 8002618:	e096      	b.n	8002748 <chkcommand2+0x191c>
				uartSendData(CMD_ERR);
 800261a:	484d      	ldr	r0, [pc, #308]	; (8002750 <chkcommand2+0x1924>)
 800261c:	f000 fb38 	bl	8002c90 <uartSendData>
}
 8002620:	e092      	b.n	8002748 <chkcommand2+0x191c>
		else if (strcmp(para , CMD_SET_PWM_CCR2) == 0){
 8002622:	4952      	ldr	r1, [pc, #328]	; (800276c <chkcommand2+0x1940>)
 8002624:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002626:	f7fd fddb 	bl	80001e0 <strcmp>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d119      	bne.n	8002664 <chkcommand2+0x1838>
			para = strtok(NULL, " ");
 8002630:	4949      	ldr	r1, [pc, #292]	; (8002758 <chkcommand2+0x192c>)
 8002632:	2000      	movs	r0, #0
 8002634:	f008 fe86 	bl	800b344 <strtok>
 8002638:	6738      	str	r0, [r7, #112]	; 0x70
			data = strtoul(para, NULL, 10);
 800263a:	220a      	movs	r2, #10
 800263c:	2100      	movs	r1, #0
 800263e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002640:	f008 ff58 	bl	800b4f4 <strtoul>
 8002644:	6778      	str	r0, [r7, #116]	; 0x74
			if (( data >= 0) && (data <= 0xFFFF)){
 8002646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d206      	bcs.n	800265c <chkcommand2+0x1830>
				aSRC_Buffer[7] = data;
 800264e:	4a43      	ldr	r2, [pc, #268]	; (800275c <chkcommand2+0x1930>)
 8002650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002652:	61d3      	str	r3, [r2, #28]
				uartSendData(CMD_OK);
 8002654:	4842      	ldr	r0, [pc, #264]	; (8002760 <chkcommand2+0x1934>)
 8002656:	f000 fb1b 	bl	8002c90 <uartSendData>
}
 800265a:	e075      	b.n	8002748 <chkcommand2+0x191c>
				uartSendData(CMD_ERR);
 800265c:	483c      	ldr	r0, [pc, #240]	; (8002750 <chkcommand2+0x1924>)
 800265e:	f000 fb17 	bl	8002c90 <uartSendData>
}
 8002662:	e071      	b.n	8002748 <chkcommand2+0x191c>
			memset((char*)TxBuff,0 ,USART_TX_BUFFSIZE);
 8002664:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002668:	2100      	movs	r1, #0
 800266a:	4841      	ldr	r0, [pc, #260]	; (8002770 <chkcommand2+0x1944>)
 800266c:	f008 fe32 	bl	800b2d4 <memset>
			sprintf(TxBuff,"Command......\r\n");
 8002670:	4940      	ldr	r1, [pc, #256]	; (8002774 <chkcommand2+0x1948>)
 8002672:	483f      	ldr	r0, [pc, #252]	; (8002770 <chkcommand2+0x1944>)
 8002674:	f008 fe36 	bl	800b2e4 <siprintf>
			sprintf(strouttemp,"Test start(Single).................... s or S\r\n");
 8002678:	463b      	mov	r3, r7
 800267a:	493f      	ldr	r1, [pc, #252]	; (8002778 <chkcommand2+0x194c>)
 800267c:	4618      	mov	r0, r3
 800267e:	f008 fe31 	bl	800b2e4 <siprintf>
			strcat(TxBuff,strouttemp);
 8002682:	463b      	mov	r3, r7
 8002684:	4619      	mov	r1, r3
 8002686:	483a      	ldr	r0, [pc, #232]	; (8002770 <chkcommand2+0x1944>)
 8002688:	f008 fe4c 	bl	800b324 <strcat>
			sprintf(strouttemp,"Display Test settings ................ dsp\r\n\r\n");
 800268c:	463b      	mov	r3, r7
 800268e:	493b      	ldr	r1, [pc, #236]	; (800277c <chkcommand2+0x1950>)
 8002690:	4618      	mov	r0, r3
 8002692:	f008 fe27 	bl	800b2e4 <siprintf>
			strcat(TxBuff,strouttemp);
 8002696:	463b      	mov	r3, r7
 8002698:	4619      	mov	r1, r3
 800269a:	4835      	ldr	r0, [pc, #212]	; (8002770 <chkcommand2+0x1944>)
 800269c:	f008 fe42 	bl	800b324 <strcat>
			sprintf(strouttemp,"Set ADC Channel ...................... ch X (1/2)\r\n");
 80026a0:	463b      	mov	r3, r7
 80026a2:	4937      	ldr	r1, [pc, #220]	; (8002780 <chkcommand2+0x1954>)
 80026a4:	4618      	mov	r0, r3
 80026a6:	f008 fe1d 	bl	800b2e4 <siprintf>
			strcat(TxBuff,strouttemp);
 80026aa:	463b      	mov	r3, r7
 80026ac:	4619      	mov	r1, r3
 80026ae:	4830      	ldr	r0, [pc, #192]	; (8002770 <chkcommand2+0x1944>)
 80026b0:	f008 fe38 	bl	800b324 <strcat>
			sprintf(strouttemp,"Set ADC Resolution (bit) .............. ar X (6/8/10/12)\r\n");
 80026b4:	463b      	mov	r3, r7
 80026b6:	4933      	ldr	r1, [pc, #204]	; (8002784 <chkcommand2+0x1958>)
 80026b8:	4618      	mov	r0, r3
 80026ba:	f008 fe13 	bl	800b2e4 <siprintf>
			strcat(TxBuff,strouttemp);
 80026be:	463b      	mov	r3, r7
 80026c0:	4619      	mov	r1, r3
 80026c2:	482b      	ldr	r0, [pc, #172]	; (8002770 <chkcommand2+0x1944>)
 80026c4:	f008 fe2e 	bl	800b324 <strcat>
			sprintf(strouttemp,"Set ADC Sampling Time (cycle) ......... as X (2/6/12/24/47/92/247/640)\r\n");
 80026c8:	463b      	mov	r3, r7
 80026ca:	492f      	ldr	r1, [pc, #188]	; (8002788 <chkcommand2+0x195c>)
 80026cc:	4618      	mov	r0, r3
 80026ce:	f008 fe09 	bl	800b2e4 <siprintf>
			strcat(TxBuff,strouttemp);
 80026d2:	463b      	mov	r3, r7
 80026d4:	4619      	mov	r1, r3
 80026d6:	4826      	ldr	r0, [pc, #152]	; (8002770 <chkcommand2+0x1944>)
 80026d8:	f008 fe24 	bl	800b324 <strcat>
			sprintf(strouttemp,"Set ADC Start delay Time (cycle) ...... ad X (39-65535)\r\n");
 80026dc:	463b      	mov	r3, r7
 80026de:	492b      	ldr	r1, [pc, #172]	; (800278c <chkcommand2+0x1960>)
 80026e0:	4618      	mov	r0, r3
 80026e2:	f008 fdff 	bl	800b2e4 <siprintf>
			strcat(TxBuff,strouttemp);
 80026e6:	463b      	mov	r3, r7
 80026e8:	4619      	mov	r1, r3
 80026ea:	4821      	ldr	r0, [pc, #132]	; (8002770 <chkcommand2+0x1944>)
 80026ec:	f008 fe1a 	bl	800b324 <strcat>
			sprintf(strouttemp,"Set Pulse 1 ARR (us) .................. pa1 X (1-65535)\r\n");
 80026f0:	463b      	mov	r3, r7
 80026f2:	4927      	ldr	r1, [pc, #156]	; (8002790 <chkcommand2+0x1964>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f008 fdf5 	bl	800b2e4 <siprintf>
			strcat(TxBuff,strouttemp);
 80026fa:	463b      	mov	r3, r7
 80026fc:	4619      	mov	r1, r3
 80026fe:	481c      	ldr	r0, [pc, #112]	; (8002770 <chkcommand2+0x1944>)
 8002700:	f008 fe10 	bl	800b324 <strcat>
			sprintf(strouttemp,"Set Pulse 2 ARR (us) .................. pa2 X (1-65535)\r\n");
 8002704:	463b      	mov	r3, r7
 8002706:	4923      	ldr	r1, [pc, #140]	; (8002794 <chkcommand2+0x1968>)
 8002708:	4618      	mov	r0, r3
 800270a:	f008 fdeb 	bl	800b2e4 <siprintf>
			strcat(TxBuff,strouttemp);
 800270e:	463b      	mov	r3, r7
 8002710:	4619      	mov	r1, r3
 8002712:	4817      	ldr	r0, [pc, #92]	; (8002770 <chkcommand2+0x1944>)
 8002714:	f008 fe06 	bl	800b324 <strcat>
			sprintf(strouttemp,"Set Pulse 1 CCR (us) .................. pc1 X (0-65535)\r\n");
 8002718:	463b      	mov	r3, r7
 800271a:	491f      	ldr	r1, [pc, #124]	; (8002798 <chkcommand2+0x196c>)
 800271c:	4618      	mov	r0, r3
 800271e:	f008 fde1 	bl	800b2e4 <siprintf>
			strcat(TxBuff,strouttemp);
 8002722:	463b      	mov	r3, r7
 8002724:	4619      	mov	r1, r3
 8002726:	4812      	ldr	r0, [pc, #72]	; (8002770 <chkcommand2+0x1944>)
 8002728:	f008 fdfc 	bl	800b324 <strcat>
			sprintf(strouttemp,"Set Pulse 2 CCR (us) .................. pc2 X (0-65535)\r\n");
 800272c:	463b      	mov	r3, r7
 800272e:	491b      	ldr	r1, [pc, #108]	; (800279c <chkcommand2+0x1970>)
 8002730:	4618      	mov	r0, r3
 8002732:	f008 fdd7 	bl	800b2e4 <siprintf>
			strcat(TxBuff,strouttemp);
 8002736:	463b      	mov	r3, r7
 8002738:	4619      	mov	r1, r3
 800273a:	480d      	ldr	r0, [pc, #52]	; (8002770 <chkcommand2+0x1944>)
 800273c:	f008 fdf2 	bl	800b324 <strcat>
			uartSendData(TxBuff);
 8002740:	480b      	ldr	r0, [pc, #44]	; (8002770 <chkcommand2+0x1944>)
 8002742:	f000 faa5 	bl	8002c90 <uartSendData>
}
 8002746:	e7ff      	b.n	8002748 <chkcommand2+0x191c>
 8002748:	bf00      	nop
 800274a:	3778      	adds	r7, #120	; 0x78
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	0800c8f0 	.word	0x0800c8f0
 8002754:	0800c904 	.word	0x0800c904
 8002758:	0800c8e8 	.word	0x0800c8e8
 800275c:	20000104 	.word	0x20000104
 8002760:	0800c8e0 	.word	0x0800c8e0
 8002764:	0800c908 	.word	0x0800c908
 8002768:	0800c90c 	.word	0x0800c90c
 800276c:	0800c910 	.word	0x0800c910
 8002770:	20008800 	.word	0x20008800
 8002774:	0800c914 	.word	0x0800c914
 8002778:	0800c924 	.word	0x0800c924
 800277c:	0800c954 	.word	0x0800c954
 8002780:	0800c984 	.word	0x0800c984
 8002784:	0800c9b8 	.word	0x0800c9b8
 8002788:	0800c9f4 	.word	0x0800c9f4
 800278c:	0800ca40 	.word	0x0800ca40
 8002790:	0800ca7c 	.word	0x0800ca7c
 8002794:	0800cab8 	.word	0x0800cab8
 8002798:	0800caf4 	.word	0x0800caf4
 800279c:	0800cb30 	.word	0x0800cb30

080027a0 <TestStart_Heating>:
  * @brief Heating for thermal time constant test
  * @param None
  * @retval None
  */
ErrorStatus TestStart_Heating(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af02      	add	r7, sp, #8
	ErrorStatus sts = SUCCESS;
 80027a6:	2300      	movs	r3, #0
 80027a8:	71fb      	strb	r3, [r7, #7]
	//前回のタイマ設定をクリアするためタイマを再設定する
	MX_TIM1_Init();
 80027aa:	f7fe f893 	bl	80008d4 <MX_TIM1_Init>
	MX_TIM3_Init();
 80027ae:	f7fe f9d3 	bl	8000b58 <MX_TIM3_Init>
	   // PWM start
	   //TIM1 for upper IGBT
		  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80027b2:	2100      	movs	r1, #0
 80027b4:	4821      	ldr	r0, [pc, #132]	; (800283c <TestStart_Heating+0x9c>)
 80027b6:	f005 fb67 	bl	8007e88 <HAL_TIM_PWM_Start>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <TestStart_Heating+0x24>
		  {
			   /* PWM Generation Error */
			   Error_Handler();
 80027c0:	f000 fbec 	bl	8002f9c <Error_Handler>
		  }
		  //PWM DMA Burst transfer start
		  PWMBusy1 = SET;
 80027c4:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <TestStart_Heating+0xa0>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_DMABurst_MultiWriteStart(&htim1, TIM_DMABASE_PSC, TIM_DMA_UPDATE, (uint32_t*) aSRC_Buffer_uH, TIM_DMABURSTLENGTH_4TRANSFERS,16);
 80027ca:	2310      	movs	r3, #16
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <TestStart_Heating+0xa4>)
 80027d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027da:	210a      	movs	r1, #10
 80027dc:	4817      	ldr	r0, [pc, #92]	; (800283c <TestStart_Heating+0x9c>)
 80027de:	f005 ffc9 	bl	8008774 <HAL_TIM_DMABurst_MultiWriteStart>

		  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80027e2:	2100      	movs	r1, #0
 80027e4:	4818      	ldr	r0, [pc, #96]	; (8002848 <TestStart_Heating+0xa8>)
 80027e6:	f005 fb4f 	bl	8007e88 <HAL_TIM_PWM_Start>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <TestStart_Heating+0x54>
		  {
			   /* PWM Generation Error */
			   Error_Handler();
 80027f0:	f000 fbd4 	bl	8002f9c <Error_Handler>
		  }
		  //PWM DMA Burst transfer start
		  PWMBusy3 = SET;
 80027f4:	4b15      	ldr	r3, [pc, #84]	; (800284c <TestStart_Heating+0xac>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_DMABurst_MultiWriteStart(&htim3, TIM_DMABASE_PSC, TIM_DMA_UPDATE, (uint32_t*) aSRC_Buffer_H, TIM_DMABURSTLENGTH_4TRANSFERS,16);
 80027fa:	2310      	movs	r3, #16
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <TestStart_Heating+0xb0>)
 8002806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800280a:	210a      	movs	r1, #10
 800280c:	480e      	ldr	r0, [pc, #56]	; (8002848 <TestStart_Heating+0xa8>)
 800280e:	f005 ffb1 	bl	8008774 <HAL_TIM_DMABurst_MultiWriteStart>
	 //ADCの変換とPWMの出力が終了するまで待つ
	 while(ADCBusy ==SET || PWMBusy1 == SET || PWMBusy3 == SET){
 8002812:	bf00      	nop
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <TestStart_Heating+0xb4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d0fa      	beq.n	8002814 <TestStart_Heating+0x74>
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <TestStart_Heating+0xa0>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d0f5      	beq.n	8002814 <TestStart_Heating+0x74>
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <TestStart_Heating+0xac>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d0f0      	beq.n	8002814 <TestStart_Heating+0x74>

	 }
	 return sts;
 8002832:	79fb      	ldrb	r3, [r7, #7]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20006724 	.word	0x20006724
 8002840:	2000021e 	.word	0x2000021e
 8002844:	20000004 	.word	0x20000004
 8002848:	20003ca0 	.word	0x20003ca0
 800284c:	2000021f 	.word	0x2000021f
 8002850:	200000c4 	.word	0x200000c4
 8002854:	20000218 	.word	0x20000218

08002858 <TestStart_Damping>:
  * @brief Damping for test
  * @param None
  * @retval None
  */
ErrorStatus TestStart_Damping(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af02      	add	r7, sp, #8
	ErrorStatus sts = SUCCESS;
 800285e:	2300      	movs	r3, #0
 8002860:	71fb      	strb	r3, [r7, #7]
	//前回のタイマ設定をクリアするためタイマを再設定する
	MX_TIM1_Init();
 8002862:	f7fe f837 	bl	80008d4 <MX_TIM1_Init>
	MX_TIM3_Init();
 8002866:	f7fe f977 	bl	8000b58 <MX_TIM3_Init>
	   // PWM start
	   //TIM1 for upper IGBT
		  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 800286a:	2100      	movs	r1, #0
 800286c:	4821      	ldr	r0, [pc, #132]	; (80028f4 <TestStart_Damping+0x9c>)
 800286e:	f005 fb0b 	bl	8007e88 <HAL_TIM_PWM_Start>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <TestStart_Damping+0x24>
		  {
			   /* PWM Generation Error */
			   Error_Handler();
 8002878:	f000 fb90 	bl	8002f9c <Error_Handler>
		  }
		  //PWM DMA Burst transfer start
		  PWMBusy1 = SET;
 800287c:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <TestStart_Damping+0xa0>)
 800287e:	2201      	movs	r2, #1
 8002880:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_DMABurst_MultiWriteStart(&htim1, TIM_DMABASE_PSC, TIM_DMA_UPDATE, (uint32_t*) aSRC_Buffer_uD, TIM_DMABURSTLENGTH_4TRANSFERS,16);
 8002882:	2310      	movs	r3, #16
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	f44f 7340 	mov.w	r3, #768	; 0x300
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <TestStart_Damping+0xa4>)
 800288e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002892:	210a      	movs	r1, #10
 8002894:	4817      	ldr	r0, [pc, #92]	; (80028f4 <TestStart_Damping+0x9c>)
 8002896:	f005 ff6d 	bl	8008774 <HAL_TIM_DMABurst_MultiWriteStart>

		  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 800289a:	2100      	movs	r1, #0
 800289c:	4818      	ldr	r0, [pc, #96]	; (8002900 <TestStart_Damping+0xa8>)
 800289e:	f005 faf3 	bl	8007e88 <HAL_TIM_PWM_Start>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <TestStart_Damping+0x54>
		  {
			   /* PWM Generation Error */
			   Error_Handler();
 80028a8:	f000 fb78 	bl	8002f9c <Error_Handler>
		  }
		  //PWM DMA Burst transfer start
		  PWMBusy3 = SET;
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <TestStart_Damping+0xac>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_DMABurst_MultiWriteStart(&htim3, TIM_DMABASE_PSC, TIM_DMA_UPDATE, (uint32_t*) aSRC_Buffer_D, TIM_DMABURSTLENGTH_4TRANSFERS,12);
 80028b2:	230c      	movs	r3, #12
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <TestStart_Damping+0xb0>)
 80028be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028c2:	210a      	movs	r1, #10
 80028c4:	480e      	ldr	r0, [pc, #56]	; (8002900 <TestStart_Damping+0xa8>)
 80028c6:	f005 ff55 	bl	8008774 <HAL_TIM_DMABurst_MultiWriteStart>
	 //ADCの変換とPWMの出力が終了するまで待つ
	 while(ADCBusy ==SET || PWMBusy1 == SET || PWMBusy3 == SET){
 80028ca:	bf00      	nop
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <TestStart_Damping+0xb4>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d0fa      	beq.n	80028cc <TestStart_Damping+0x74>
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <TestStart_Damping+0xa0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d0f5      	beq.n	80028cc <TestStart_Damping+0x74>
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <TestStart_Damping+0xac>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d0f0      	beq.n	80028cc <TestStart_Damping+0x74>

	 }
	 return sts;
 80028ea:	79fb      	ldrb	r3, [r7, #7]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20006724 	.word	0x20006724
 80028f8:	2000021e 	.word	0x2000021e
 80028fc:	20000084 	.word	0x20000084
 8002900:	20003ca0 	.word	0x20003ca0
 8002904:	2000021f 	.word	0x2000021f
 8002908:	20000154 	.word	0x20000154
 800290c:	20000218 	.word	0x20000218

08002910 <TestStart>:
  * @brief double pulse test
  * @param uint32_t dtime ADC開始遅延時間
  * @retval uint16_t *ADCValues A/D変換値
  */
ErrorStatus TestStart(uint32_t dtime, uint16_t *ADCValues)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af02      	add	r7, sp, #8
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
	ErrorStatus sts = SUCCESS;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
	//前回のタイマ設定をクリアするためタイマを再設定する
	MX_TIM1_Init();
 800291e:	f7fd ffd9 	bl	80008d4 <MX_TIM1_Init>
	MX_TIM3_Init();
 8002922:	f7fe f919 	bl	8000b58 <MX_TIM3_Init>
	TIM2_Init((uint32_t)dtime);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f91c 	bl	8002b64 <TIM2_Init>
	//ADCの測定設定を行う
	setADC_config2(u8ADC_ChNo,u8ADC_Resolution,u16ADC_SMPLTime);
 800292c:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <TestStart+0xf0>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <TestStart+0xf4>)
 8002932:	7811      	ldrb	r1, [r2, #0]
 8002934:	4a34      	ldr	r2, [pc, #208]	; (8002a08 <TestStart+0xf8>)
 8002936:	8812      	ldrh	r2, [r2, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 f87b 	bl	8002a34 <setADC_config2>

	//ADC Start
	  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCValues, ADC_BUFFSIZE) != HAL_OK)
 800293e:	2278      	movs	r2, #120	; 0x78
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	4832      	ldr	r0, [pc, #200]	; (8002a0c <TestStart+0xfc>)
 8002944:	f001 fbb4 	bl	80040b0 <HAL_ADC_Start_DMA>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <TestStart+0x42>
	  {
		  Error_Handler();
 800294e:	f000 fb25 	bl	8002f9c <Error_Handler>
	  }
	   ADCBusy = SET;
 8002952:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <TestStart+0x100>)
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]

	   // PWM start
	   //TIM1 for upper IGBT
		  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8002958:	2100      	movs	r1, #0
 800295a:	482e      	ldr	r0, [pc, #184]	; (8002a14 <TestStart+0x104>)
 800295c:	f005 fa94 	bl	8007e88 <HAL_TIM_PWM_Start>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <TestStart+0x5a>
		  {
			   /* PWM Generation Error */
			   Error_Handler();
 8002966:	f000 fb19 	bl	8002f9c <Error_Handler>
		  }
		  //PWM DMA Burst transfer start
		  PWMBusy1 = SET;
 800296a:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <TestStart+0x108>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_DMABurst_MultiWriteStart(&htim1, TIM_DMABASE_PSC, TIM_DMA_UPDATE, (uint32_t*) aSRC_Buffer_u, TIM_DMABURSTLENGTH_4TRANSFERS,16);
 8002970:	2310      	movs	r3, #16
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <TestStart+0x10c>)
 800297c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002980:	210a      	movs	r1, #10
 8002982:	4824      	ldr	r0, [pc, #144]	; (8002a14 <TestStart+0x104>)
 8002984:	f005 fef6 	bl	8008774 <HAL_TIM_DMABurst_MultiWriteStart>

		//TIM3 for lower IGBT
		  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8002988:	2100      	movs	r1, #0
 800298a:	4825      	ldr	r0, [pc, #148]	; (8002a20 <TestStart+0x110>)
 800298c:	f005 fa7c 	bl	8007e88 <HAL_TIM_PWM_Start>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <TestStart+0x8a>
		  {
			   /* PWM Generation Error */
			   Error_Handler();
 8002996:	f000 fb01 	bl	8002f9c <Error_Handler>
		  }
		  //PWM DMA Burst transfer start
		  PWMBusy3 = SET;
 800299a:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <TestStart+0x114>)
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_DMABurst_MultiWriteStart(&htim3, TIM_DMABASE_PSC, TIM_DMA_UPDATE, (uint32_t*) aSRC_Buffer, TIM_DMABURSTLENGTH_4TRANSFERS,20);
 80029a0:	2314      	movs	r3, #20
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <TestStart+0x118>)
 80029ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b0:	210a      	movs	r1, #10
 80029b2:	481b      	ldr	r0, [pc, #108]	; (8002a20 <TestStart+0x110>)
 80029b4:	f005 fede 	bl	8008774 <HAL_TIM_DMABurst_MultiWriteStart>
	 //TIM2 start
	 __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);					//timer reset
 80029b8:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <TestStart+0x11c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0201 	mvn.w	r2, #1
 80029c0:	611a      	str	r2, [r3, #16]
	 HAL_TIM_Base_Start_IT(&htim2);									// timer start
 80029c2:	481a      	ldr	r0, [pc, #104]	; (8002a2c <TestStart+0x11c>)
 80029c4:	f005 f912 	bl	8007bec <HAL_TIM_Base_Start_IT>
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);							// for debug
 80029c8:	2120      	movs	r1, #32
 80029ca:	4819      	ldr	r0, [pc, #100]	; (8002a30 <TestStart+0x120>)
 80029cc:	f003 fa04 	bl	8005dd8 <HAL_GPIO_TogglePin>

	 //ADCの変換とPWMの出力が終了するまで待つ
	 while(ADCBusy ==SET || PWMBusy1 == SET || PWMBusy3 == SET){
 80029d0:	bf00      	nop
 80029d2:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <TestStart+0x100>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d0fa      	beq.n	80029d2 <TestStart+0xc2>
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <TestStart+0x108>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d0f5      	beq.n	80029d2 <TestStart+0xc2>
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <TestStart+0x114>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d0f0      	beq.n	80029d2 <TestStart+0xc2>

	 }
	 //Stop ADC
	 HAL_ADC_Stop_DMA(&hadc1);
 80029f0:	4806      	ldr	r0, [pc, #24]	; (8002a0c <TestStart+0xfc>)
 80029f2:	f001 fbe1 	bl	80041b8 <HAL_ADC_Stop_DMA>
	 // ADC data send UART
//	 uartSendADCData();

	 return sts;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000184 	.word	0x20000184
 8002a04:	20000185 	.word	0x20000185
 8002a08:	20000186 	.word	0x20000186
 8002a0c:	2000455c 	.word	0x2000455c
 8002a10:	20000218 	.word	0x20000218
 8002a14:	20006724 	.word	0x20006724
 8002a18:	2000021e 	.word	0x2000021e
 8002a1c:	20000044 	.word	0x20000044
 8002a20:	20003ca0 	.word	0x20003ca0
 8002a24:	2000021f 	.word	0x2000021f
 8002a28:	20000104 	.word	0x20000104
 8002a2c:	20008190 	.word	0x20008190
 8002a30:	48000400 	.word	0x48000400

08002a34 <setADC_config2>:
  * @param	ch:使用するADC Channel
  * 		bitW:ADCの解像度
  * 		stime:ADCのサンプリング時間
  * @retval
* */
void setADC_config2(uint8_t ch ,uint8_t bitW, uint16_t stime){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	71bb      	strb	r3, [r7, #6]
 8002a42:	4613      	mov	r3, r2
 8002a44:	80bb      	strh	r3, [r7, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8002a46:	f107 0308 	add.w	r3, r7, #8
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	60da      	str	r2, [r3, #12]
 8002a54:	611a      	str	r2, [r3, #16]
 8002a56:	615a      	str	r2, [r3, #20]

	if ( bitW == 6) {
 8002a58:	79bb      	ldrb	r3, [r7, #6]
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d103      	bne.n	8002a66 <setADC_config2+0x32>
		hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8002a5e:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <setADC_config2+0x124>)
 8002a60:	2218      	movs	r2, #24
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	e017      	b.n	8002a96 <setADC_config2+0x62>
	}
	else if (bitW == 8)	{
 8002a66:	79bb      	ldrb	r3, [r7, #6]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d103      	bne.n	8002a74 <setADC_config2+0x40>
		 hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <setADC_config2+0x124>)
 8002a6e:	2210      	movs	r2, #16
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	e010      	b.n	8002a96 <setADC_config2+0x62>
	}
	else if (bitW == 10)	{
 8002a74:	79bb      	ldrb	r3, [r7, #6]
 8002a76:	2b0a      	cmp	r3, #10
 8002a78:	d103      	bne.n	8002a82 <setADC_config2+0x4e>
		 hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <setADC_config2+0x124>)
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	e009      	b.n	8002a96 <setADC_config2+0x62>
	}
	else if (bitW == 12)	{
 8002a82:	79bb      	ldrb	r3, [r7, #6]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d103      	bne.n	8002a90 <setADC_config2+0x5c>
		hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a88:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <setADC_config2+0x124>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	e002      	b.n	8002a96 <setADC_config2+0x62>
	}
	else {
		hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a90:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <setADC_config2+0x124>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
	}

	 if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a96:	4830      	ldr	r0, [pc, #192]	; (8002b58 <setADC_config2+0x124>)
 8002a98:	f001 f9be 	bl	8003e18 <HAL_ADC_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <setADC_config2+0x72>
	 {
		 Error_Handler();
 8002aa2:	f000 fa7b 	bl	8002f9c <Error_Handler>
	 }

	if ( ch == 1) {
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d102      	bne.n	8002ab2 <setADC_config2+0x7e>
	  sConfig.Channel = ADC_CHANNEL_1;
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <setADC_config2+0x128>)
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	e007      	b.n	8002ac2 <setADC_config2+0x8e>
	}
	else if (ch == 2)	{
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d102      	bne.n	8002abe <setADC_config2+0x8a>
		 sConfig.Channel = ADC_CHANNEL_2;
 8002ab8:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <setADC_config2+0x12c>)
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	e001      	b.n	8002ac2 <setADC_config2+0x8e>
	}
	else {
		 sConfig.Channel = ADC_CHANNEL_1;
 8002abe:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <setADC_config2+0x128>)
 8002ac0:	60bb      	str	r3, [r7, #8]
	}
	if (stime ==2){
 8002ac2:	88bb      	ldrh	r3, [r7, #4]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d102      	bne.n	8002ace <setADC_config2+0x9a>
		sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	e02c      	b.n	8002b28 <setADC_config2+0xf4>
	} else if (stime ==6){
 8002ace:	88bb      	ldrh	r3, [r7, #4]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d102      	bne.n	8002ada <setADC_config2+0xa6>
		sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	e026      	b.n	8002b28 <setADC_config2+0xf4>
	} else if (stime ==12){
 8002ada:	88bb      	ldrh	r3, [r7, #4]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d102      	bne.n	8002ae6 <setADC_config2+0xb2>
		sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	e020      	b.n	8002b28 <setADC_config2+0xf4>
	} else if (stime == 24){
 8002ae6:	88bb      	ldrh	r3, [r7, #4]
 8002ae8:	2b18      	cmp	r3, #24
 8002aea:	d102      	bne.n	8002af2 <setADC_config2+0xbe>
		sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002aec:	2303      	movs	r3, #3
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	e01a      	b.n	8002b28 <setADC_config2+0xf4>
	} else if (stime == 47){
 8002af2:	88bb      	ldrh	r3, [r7, #4]
 8002af4:	2b2f      	cmp	r3, #47	; 0x2f
 8002af6:	d102      	bne.n	8002afe <setADC_config2+0xca>
		sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002af8:	2304      	movs	r3, #4
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	e014      	b.n	8002b28 <setADC_config2+0xf4>
	} else if (stime == 92){
 8002afe:	88bb      	ldrh	r3, [r7, #4]
 8002b00:	2b5c      	cmp	r3, #92	; 0x5c
 8002b02:	d102      	bne.n	8002b0a <setADC_config2+0xd6>
		sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8002b04:	2305      	movs	r3, #5
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	e00e      	b.n	8002b28 <setADC_config2+0xf4>
	} else if (stime == 247){
 8002b0a:	88bb      	ldrh	r3, [r7, #4]
 8002b0c:	2bf7      	cmp	r3, #247	; 0xf7
 8002b0e:	d102      	bne.n	8002b16 <setADC_config2+0xe2>
		sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8002b10:	2306      	movs	r3, #6
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	e008      	b.n	8002b28 <setADC_config2+0xf4>
	} else if (stime == 640){
 8002b16:	88bb      	ldrh	r3, [r7, #4]
 8002b18:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8002b1c:	d102      	bne.n	8002b24 <setADC_config2+0xf0>
		sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002b1e:	2307      	movs	r3, #7
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	e001      	b.n	8002b28 <setADC_config2+0xf4>
	} else {
		sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
	}
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b28:	2306      	movs	r3, #6
 8002b2a:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b2c:	237f      	movs	r3, #127	; 0x7f
 8002b2e:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b30:	2304      	movs	r3, #4
 8002b32:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]

	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b38:	f107 0308 	add.w	r3, r7, #8
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4806      	ldr	r0, [pc, #24]	; (8002b58 <setADC_config2+0x124>)
 8002b40:	f001 fd64 	bl	800460c <HAL_ADC_ConfigChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <setADC_config2+0x11a>
	 {
		 Error_Handler();
 8002b4a:	f000 fa27 	bl	8002f9c <Error_Handler>
	 }

}
 8002b4e:	bf00      	nop
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000455c 	.word	0x2000455c
 8002b5c:	04300002 	.word	0x04300002
 8002b60:	08600004 	.word	0x08600004

08002b64 <TIM2_Init>:
  * @brief タイマ設定初期化
  * @param dtime: 設定するARRレジスタ値(オーバーフローするカウンタ値)
  * @retval None
  */
void TIM2_Init(uint32_t dtime)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b096      	sub	sp, #88	; 0x58
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002b7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b96:	f107 030c 	add.w	r3, r7, #12
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	60da      	str	r2, [r3, #12]
 8002ba4:	611a      	str	r2, [r3, #16]
 8002ba6:	615a      	str	r2, [r3, #20]
 8002ba8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002baa:	4b38      	ldr	r3, [pc, #224]	; (8002c8c <TIM2_Init+0x128>)
 8002bac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002bb2:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <TIM2_Init+0x128>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb8:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <TIM2_Init+0x128>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period =  dtime;
 8002bbe:	4a33      	ldr	r2, [pc, #204]	; (8002c8c <TIM2_Init+0x128>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc4:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <TIM2_Init+0x128>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bca:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <TIM2_Init+0x128>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bd0:	482e      	ldr	r0, [pc, #184]	; (8002c8c <TIM2_Init+0x128>)
 8002bd2:	f004 ffb3 	bl	8007b3c <HAL_TIM_Base_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <TIM2_Init+0x7c>
  {
    Error_Handler();
 8002bdc:	f000 f9de 	bl	8002f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bea:	4619      	mov	r1, r3
 8002bec:	4827      	ldr	r0, [pc, #156]	; (8002c8c <TIM2_Init+0x128>)
 8002bee:	f005 ff8f 	bl	8008b10 <HAL_TIM_ConfigClockSource>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <TIM2_Init+0x98>
  {
    Error_Handler();
 8002bf8:	f000 f9d0 	bl	8002f9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002bfc:	4823      	ldr	r0, [pc, #140]	; (8002c8c <TIM2_Init+0x128>)
 8002bfe:	f005 f880 	bl	8007d02 <HAL_TIM_OC_Init>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <TIM2_Init+0xa8>
  {
    Error_Handler();
 8002c08:	f000 f9c8 	bl	8002f9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8002c0c:	2108      	movs	r1, #8
 8002c0e:	481f      	ldr	r0, [pc, #124]	; (8002c8c <TIM2_Init+0x128>)
 8002c10:	f005 faa8 	bl	8008164 <HAL_TIM_OnePulse_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <TIM2_Init+0xba>
  {
    Error_Handler();
 8002c1a:	f000 f9bf 	bl	8002f9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002c1e:	2306      	movs	r3, #6
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34

	  sSlaveConfig.InputTrigger = TIM_TS_ITR2;	//TIM3
 8002c22:	2320      	movs	r3, #32
 8002c24:	63bb      	str	r3, [r7, #56]	; 0x38

	  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002c26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4817      	ldr	r0, [pc, #92]	; (8002c8c <TIM2_Init+0x128>)
 8002c2e:	f006 f838 	bl	8008ca2 <HAL_TIM_SlaveConfigSynchro>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <TIM2_Init+0xd8>
  {
    Error_Handler();
 8002c38:	f000 f9b0 	bl	8002f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4810      	ldr	r0, [pc, #64]	; (8002c8c <TIM2_Init+0x128>)
 8002c4c:	f006 fe0a 	bl	8009864 <HAL_TIMEx_MasterConfigSynchronization>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <TIM2_Init+0xf6>
  {
    Error_Handler();
 8002c56:	f000 f9a1 	bl	8002f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c6a:	f107 030c 	add.w	r3, r7, #12
 8002c6e:	2204      	movs	r2, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4806      	ldr	r0, [pc, #24]	; (8002c8c <TIM2_Init+0x128>)
 8002c74:	f005 fbf0 	bl	8008458 <HAL_TIM_OC_ConfigChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <TIM2_Init+0x11e>
  {
    Error_Handler();
 8002c7e:	f000 f98d 	bl	8002f9c <Error_Handler>
  }
}
 8002c82:	bf00      	nop
 8002c84:	3758      	adds	r7, #88	; 0x58
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20008190 	.word	0x20008190

08002c90 <uartSendData>:
/**
  * @brief  UART送信 (databufのdataを送信する)
  * @param databuf 送信data
   * @retval
* */
ErrorStatus  uartSendData(char *databuf) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	uint8_t sts = SUCCESS;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]
	uint16_t cnt =0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	81bb      	strh	r3, [r7, #12]

	while  (huart2.gState != HAL_UART_STATE_READY)
 8002ca0:	e009      	b.n	8002cb6 <uartSendData+0x26>
	{
		HAL_Delay(1); //1ms wait
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f000 fe58 	bl	8003958 <HAL_Delay>
		cnt ++;
 8002ca8:	89bb      	ldrh	r3, [r7, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	81bb      	strh	r3, [r7, #12]
		if (cnt > 1000){
 8002cae:	89bb      	ldrh	r3, [r7, #12]
 8002cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cb4:	d804      	bhi.n	8002cc0 <uartSendData+0x30>
	while  (huart2.gState != HAL_UART_STATE_READY)
 8002cb6:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <uartSendData+0x74>)
 8002cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d1f1      	bne.n	8002ca2 <uartSendData+0x12>
 8002cbe:	e000      	b.n	8002cc2 <uartSendData+0x32>
			break;
 8002cc0:	bf00      	nop
		}
	}
	 if (huart2.gState == HAL_UART_STATE_READY) {
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <uartSendData+0x74>)
 8002cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d114      	bne.n	8002cf4 <uartSendData+0x64>
		  //not busy
		  UartTXBusy = SET; //busy set
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <uartSendData+0x78>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
		  if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)databuf, strlen(( char * )databuf))!= HAL_OK)
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7fd fa8f 	bl	80001f4 <strlen>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4809      	ldr	r0, [pc, #36]	; (8002d04 <uartSendData+0x74>)
 8002ce0:	f006 ff96 	bl	8009c10 <HAL_UART_Transmit_DMA>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <uartSendData+0x68>
		  {
			  sts = ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
			  Error_Handler(); // 無限loop
 8002cee:	f000 f955 	bl	8002f9c <Error_Handler>
 8002cf2:	e001      	b.n	8002cf8 <uartSendData+0x68>
		 }
	  }
	  else {
		  sts = ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
	  }
	return sts;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	2000868c 	.word	0x2000868c
 8002d08:	20000219 	.word	0x20000219

08002d0c <uartSendADCData>:
/**
  * @brief  ADC DATA UART送信
  * @param none
   * @retval error status
* */
ErrorStatus  uartSendADCData(uint16_t *ADCValues) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	ErrorStatus sts = SUCCESS;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t cnt =0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	84bb      	strh	r3, [r7, #36]	; 0x24
	char sendbuf[20];

	memset((char*)TxBuff,0 ,USART_TX_BUFFSIZE);
 8002d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d22:	2100      	movs	r1, #0
 8002d24:	482d      	ldr	r0, [pc, #180]	; (8002ddc <uartSendADCData+0xd0>)
 8002d26:	f008 fad5 	bl	800b2d4 <memset>
	sprintf(TxBuff,"ADC DATA\r\n");
 8002d2a:	492d      	ldr	r1, [pc, #180]	; (8002de0 <uartSendADCData+0xd4>)
 8002d2c:	482b      	ldr	r0, [pc, #172]	; (8002ddc <uartSendADCData+0xd0>)
 8002d2e:	f008 fad9 	bl	800b2e4 <siprintf>

	for ( int i = 0; i < ADC_BUFFSIZE ; i++) {
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
 8002d36:	e014      	b.n	8002d62 <uartSendADCData+0x56>
		sprintf(sendbuf,"%d,",ADCValues[ i ]);
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f107 030c 	add.w	r3, r7, #12
 8002d48:	4926      	ldr	r1, [pc, #152]	; (8002de4 <uartSendADCData+0xd8>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f008 faca 	bl	800b2e4 <siprintf>
		strcat(TxBuff,sendbuf);
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	4619      	mov	r1, r3
 8002d56:	4821      	ldr	r0, [pc, #132]	; (8002ddc <uartSendADCData+0xd0>)
 8002d58:	f008 fae4 	bl	800b324 <strcat>
	for ( int i = 0; i < ADC_BUFFSIZE ; i++) {
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	2b77      	cmp	r3, #119	; 0x77
 8002d66:	dde7      	ble.n	8002d38 <uartSendADCData+0x2c>
	}
	sprintf((char*)sendbuf,"\r\nFinish!!\r\n");
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	491e      	ldr	r1, [pc, #120]	; (8002de8 <uartSendADCData+0xdc>)
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f008 fab8 	bl	800b2e4 <siprintf>
	strcat((char*)TxBuff,sendbuf);
 8002d74:	f107 030c 	add.w	r3, r7, #12
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4818      	ldr	r0, [pc, #96]	; (8002ddc <uartSendADCData+0xd0>)
 8002d7c:	f008 fad2 	bl	800b324 <strcat>

	//UARTが送信出来るようになるまで待つ
	while  (huart2.gState != HAL_UART_STATE_READY)
 8002d80:	e009      	b.n	8002d96 <uartSendADCData+0x8a>
	{
		HAL_Delay(1); //1ms wait
 8002d82:	2001      	movs	r0, #1
 8002d84:	f000 fde8 	bl	8003958 <HAL_Delay>
		cnt ++;
 8002d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (cnt > 1000){
 8002d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d94:	d804      	bhi.n	8002da0 <uartSendADCData+0x94>
	while  (huart2.gState != HAL_UART_STATE_READY)
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <uartSendADCData+0xe0>)
 8002d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d1f1      	bne.n	8002d82 <uartSendADCData+0x76>
 8002d9e:	e000      	b.n	8002da2 <uartSendADCData+0x96>
			break;
 8002da0:	bf00      	nop
		}
	}

	//送信可能なら送信する
	if (huart2.gState == HAL_UART_STATE_READY){
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <uartSendADCData+0xe0>)
 8002da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d111      	bne.n	8002dce <uartSendADCData+0xc2>
		  if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)TxBuff, strlen(( char * )TxBuff))!= HAL_OK)
 8002daa:	480c      	ldr	r0, [pc, #48]	; (8002ddc <uartSendADCData+0xd0>)
 8002dac:	f7fd fa22 	bl	80001f4 <strlen>
 8002db0:	4603      	mov	r3, r0
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	4909      	ldr	r1, [pc, #36]	; (8002ddc <uartSendADCData+0xd0>)
 8002db8:	480c      	ldr	r0, [pc, #48]	; (8002dec <uartSendADCData+0xe0>)
 8002dba:	f006 ff29 	bl	8009c10 <HAL_UART_Transmit_DMA>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <uartSendADCData+0xc2>
		  {
			  sts = ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  Error_Handler(); // 無限loop
 8002dca:	f000 f8e7 	bl	8002f9c <Error_Handler>
		 }
	}
	return sts;
 8002dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3728      	adds	r7, #40	; 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20008800 	.word	0x20008800
 8002de0:	0800cb6c 	.word	0x0800cb6c
 8002de4:	0800cb78 	.word	0x0800cb78
 8002de8:	0800cb7c 	.word	0x0800cb7c
 8002dec:	2000868c 	.word	0x2000868c

08002df0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	 ConvCpltCounter++;						//debug
 8002df8:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x28>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	4a06      	ldr	r2, [pc, #24]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x28>)
 8002e00:	6013      	str	r3, [r2, #0]
	 ADCBusy = RESET;						//Reset ADC Busy
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x2c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);	//debug
 8002e08:	2120      	movs	r1, #32
 8002e0a:	4805      	ldr	r0, [pc, #20]	; (8002e20 <HAL_ADC_ConvCpltCallback+0x30>)
 8002e0c:	f002 ffe4 	bl	8005dd8 <HAL_GPIO_TogglePin>
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000220 	.word	0x20000220
 8002e1c:	20000218 	.word	0x20000218
 8002e20:	48000400 	.word	0x48000400

08002e24 <HAL_ADC_ErrorCallback>:
  * @brief  ADC erorr  callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	ADCErrorCounter++;						//debug
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_ADC_ErrorCallback+0x20>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_ADC_ErrorCallback+0x20>)
 8002e34:	6013      	str	r3, [r2, #0]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000224 	.word	0x20000224

08002e48 <HAL_UART_TxCpltCallback>:
  * UARTの送信が完了したときに呼ばれる
  * @param UartHandle Uart handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete*/
 huart2.gState = HAL_UART_STATE_READY;			//UARTのスタータスをREADYにする
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_UART_TxCpltCallback+0x20>)
 8002e52:	2220      	movs	r2, #32
 8002e54:	679a      	str	r2, [r3, #120]	; 0x78
 UartTXBusy = RESET;
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_UART_TxCpltCallback+0x24>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]

}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	2000868c 	.word	0x2000868c
 8002e6c:	20000219 	.word	0x20000219

08002e70 <HAL_UART_RxCpltCallback>:
  * UARTで受信が完了したときに呼ばれる
  * @param UartHandle Uart handle
  * @retval None
**/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

    RxBuff[RxBuffCounter] =RxData;
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002e80:	7819      	ldrb	r1, [r3, #0]
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_UART_RxCpltCallback+0x74>)
 8002e84:	5499      	strb	r1, [r3, r2]
    //check CR+LF
    if ((RxBuffCounter >= 1) && (RxBuff[ RxBuffCounter - 1 ] == 0x0d) && (RxBuff[ RxBuffCounter  ] == 0x0a)){
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d010      	beq.n	8002eb0 <HAL_UART_RxCpltCallback+0x40>
 8002e8e:	4b13      	ldr	r3, [pc, #76]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <HAL_UART_RxCpltCallback+0x74>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	2b0d      	cmp	r3, #13
 8002e9a:	d109      	bne.n	8002eb0 <HAL_UART_RxCpltCallback+0x40>
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_UART_RxCpltCallback+0x74>)
 8002ea4:	5c9b      	ldrb	r3, [r3, r2]
 8002ea6:	2b0a      	cmp	r3, #10
 8002ea8:	d102      	bne.n	8002eb0 <HAL_UART_RxCpltCallback+0x40>
    	// CR LFまで受信したら受信完了フラグを立てる
    	resDataFlg = true;
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_UART_RxCpltCallback+0x78>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
    }
    RxBuffCounter++;
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002eba:	801a      	strh	r2, [r3, #0]
   // CR LFまで受信出来ていない場合は、再度UART受信を開始する。CR/LFまで受信出来た場合は、コマンド処理後に受信を開始する
   if (resDataFlg != true) {
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_UART_RxCpltCallback+0x78>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	f083 0301 	eor.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d004      	beq.n	8002ed4 <HAL_UART_RxCpltCallback+0x64>
	   HAL_UART_Receive_IT(&huart2, &RxData, 1);
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4904      	ldr	r1, [pc, #16]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002ece:	4807      	ldr	r0, [pc, #28]	; (8002eec <HAL_UART_RxCpltCallback+0x7c>)
 8002ed0:	f006 fe48 	bl	8009b64 <HAL_UART_Receive_IT>
   }

}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	2000021c 	.word	0x2000021c
 8002ee0:	2000021a 	.word	0x2000021a
 8002ee4:	20007bb0 	.word	0x20007bb0
 8002ee8:	2000021b 	.word	0x2000021b
 8002eec:	2000868c 	.word	0x2000868c

08002ef0 <HAL_UART_ErrorCallback>:
  * UARTでエラーが起きたときに呼ばれる
  * @param UartHandle Uart handle
  * @retval None
**/
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
    Error_Handler();
 8002ef8:	f000 f850 	bl	8002f9c <Error_Handler>
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIM_PeriodElapsedCallback>:
  * タイマがオーバーフローしたときに呼ばれる
  * @param htim timer handle
  * @retval None
**/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == htim1.Instance) {
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d10c      	bne.n	8002f32 <HAL_TIM_PeriodElapsedCallback+0x2e>
		//Timer1が終了したときPWM1とTIM1へのDMA転送を停止する
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4816      	ldr	r0, [pc, #88]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002f1c:	f005 f89a 	bl	8008054 <HAL_TIM_PWM_Stop>
		HAL_TIM_DMABurst_WriteStop(&htim1,  TIM_DMA_UPDATE);
 8002f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f24:	4813      	ldr	r0, [pc, #76]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002f26:	f005 fd79 	bl	8008a1c <HAL_TIM_DMABurst_WriteStop>
		PWMBusy1 = RESET;
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
	else if (htim->Instance == htim2.Instance){
		//Timer2が終了したときTimer2を止める
		HAL_TIM_Base_Stop_IT (&htim2);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
	}
}
 8002f30:	e01b      	b.n	8002f6a <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (htim->Instance == htim3.Instance){
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d10c      	bne.n	8002f58 <HAL_TIM_PeriodElapsedCallback+0x54>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002f3e:	2100      	movs	r1, #0
 8002f40:	480e      	ldr	r0, [pc, #56]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002f42:	f005 f887 	bl	8008054 <HAL_TIM_PWM_Stop>
		HAL_TIM_DMABurst_WriteStop(&htim3,  TIM_DMA_UPDATE);
 8002f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f4a:	480c      	ldr	r0, [pc, #48]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002f4c:	f005 fd66 	bl	8008a1c <HAL_TIM_DMABurst_WriteStop>
		PWMBusy3 = RESET;
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
}
 8002f56:	e008      	b.n	8002f6a <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (htim->Instance == htim2.Instance){
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d102      	bne.n	8002f6a <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_TIM_Base_Stop_IT (&htim2);
 8002f64:	4807      	ldr	r0, [pc, #28]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002f66:	f004 fe9d 	bl	8007ca4 <HAL_TIM_Base_Stop_IT>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20006724 	.word	0x20006724
 8002f78:	2000021e 	.word	0x2000021e
 8002f7c:	20003ca0 	.word	0x20003ca0
 8002f80:	2000021f 	.word	0x2000021f
 8002f84:	20008190 	.word	0x20008190

08002f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode.
  * @param  htim timer handle
  * @retval None
**/
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa0:	b672      	cpsid	i
}
 8002fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <Error_Handler+0x8>
	...

08002fa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_MspInit+0x44>)
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb2:	4a0e      	ldr	r2, [pc, #56]	; (8002fec <HAL_MspInit+0x44>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_MspInit+0x44>)
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_MspInit+0x44>)
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	4a08      	ldr	r2, [pc, #32]	; (8002fec <HAL_MspInit+0x44>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_MspInit+0x44>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000

08002ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b0a4      	sub	sp, #144	; 0x90
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	2268      	movs	r2, #104	; 0x68
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f008 f95f 	bl	800b2d4 <memset>
  if(hadc->Instance==ADC1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a40      	ldr	r2, [pc, #256]	; (800311c <HAL_ADC_MspInit+0x12c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d178      	bne.n	8003112 <HAL_ADC_MspInit+0x122>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003020:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003024:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003026:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800302a:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800302c:	2302      	movs	r3, #2
 800302e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003030:	2301      	movs	r3, #1
 8003032:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8003034:	230a      	movs	r3, #10
 8003036:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003038:	2307      	movs	r3, #7
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800303c:	2302      	movs	r3, #2
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003040:	2302      	movs	r3, #2
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003048:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800304a:	f107 0314 	add.w	r3, r7, #20
 800304e:	4618      	mov	r0, r3
 8003050:	f004 fa16 	bl	8007480 <HAL_RCCEx_PeriphCLKConfig>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800305a:	f7ff ff9f 	bl	8002f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800305e:	4b30      	ldr	r3, [pc, #192]	; (8003120 <HAL_ADC_MspInit+0x130>)
 8003060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003062:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <HAL_ADC_MspInit+0x130>)
 8003064:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800306a:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <HAL_ADC_MspInit+0x130>)
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003076:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <HAL_ADC_MspInit+0x130>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	4a29      	ldr	r2, [pc, #164]	; (8003120 <HAL_ADC_MspInit+0x130>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003082:	4b27      	ldr	r3, [pc, #156]	; (8003120 <HAL_ADC_MspInit+0x130>)
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800308e:	2303      	movs	r3, #3
 8003090:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003092:	230b      	movs	r3, #11
 8003094:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800309e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030a2:	4619      	mov	r1, r3
 80030a4:	481f      	ldr	r0, [pc, #124]	; (8003124 <HAL_ADC_MspInit+0x134>)
 80030a6:	f002 fd05 	bl	8005ab4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 80030aa:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030ac:	4a1f      	ldr	r2, [pc, #124]	; (800312c <HAL_ADC_MspInit+0x13c>)
 80030ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030b6:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030bc:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030c2:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030c8:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030d0:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030da:	2220      	movs	r2, #32
 80030dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030e6:	4810      	ldr	r0, [pc, #64]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030e8:	f002 fa6e 	bl	80055c8 <HAL_DMA_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_ADC_MspInit+0x106>
    {
      Error_Handler();
 80030f2:	f7ff ff53 	bl	8002f9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030fa:	651a      	str	r2, [r3, #80]	; 0x50
 80030fc:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <HAL_ADC_MspInit+0x138>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003102:	2200      	movs	r2, #0
 8003104:	2100      	movs	r1, #0
 8003106:	2012      	movs	r0, #18
 8003108:	f002 fa27 	bl	800555a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800310c:	2012      	movs	r0, #18
 800310e:	f002 fa40 	bl	8005592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003112:	bf00      	nop
 8003114:	3790      	adds	r7, #144	; 0x90
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	50040000 	.word	0x50040000
 8003120:	40021000 	.word	0x40021000
 8003124:	48000800 	.word	0x48000800
 8003128:	20005f5c 	.word	0x20005f5c
 800312c:	40020430 	.word	0x40020430

08003130 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b0a4      	sub	sp, #144	; 0x90
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	2268      	movs	r2, #104	; 0x68
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f008 f8bf 	bl	800b2d4 <memset>
  if(hi2c->Instance==I2C1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a21      	ldr	r2, [pc, #132]	; (80031e0 <HAL_I2C_MspInit+0xb0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d13a      	bne.n	80031d6 <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003160:	2340      	movs	r3, #64	; 0x40
 8003162:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003164:	2300      	movs	r3, #0
 8003166:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4618      	mov	r0, r3
 800316e:	f004 f987 	bl	8007480 <HAL_RCCEx_PeriphCLKConfig>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003178:	f7ff ff10 	bl	8002f9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_I2C_MspInit+0xb4>)
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <HAL_I2C_MspInit+0xb4>)
 8003182:	f043 0302 	orr.w	r3, r3, #2
 8003186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_I2C_MspInit+0xb4>)
 800318a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8003194:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003198:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800319a:	2312      	movs	r3, #18
 800319c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a6:	2303      	movs	r3, #3
 80031a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031ac:	2304      	movs	r3, #4
 80031ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031b6:	4619      	mov	r1, r3
 80031b8:	480b      	ldr	r0, [pc, #44]	; (80031e8 <HAL_I2C_MspInit+0xb8>)
 80031ba:	f002 fc7b 	bl	8005ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_I2C_MspInit+0xb4>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <HAL_I2C_MspInit+0xb4>)
 80031c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031c8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_I2C_MspInit+0xb4>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031d6:	bf00      	nop
 80031d8:	3790      	adds	r7, #144	; 0x90
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40005400 	.word	0x40005400
 80031e4:	40021000 	.word	0x40021000
 80031e8:	48000400 	.word	0x48000400

080031ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a4e      	ldr	r2, [pc, #312]	; (8003334 <HAL_TIM_Base_MspInit+0x148>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d138      	bne.n	8003270 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031fe:	4b4e      	ldr	r3, [pc, #312]	; (8003338 <HAL_TIM_Base_MspInit+0x14c>)
 8003200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003202:	4a4d      	ldr	r2, [pc, #308]	; (8003338 <HAL_TIM_Base_MspInit+0x14c>)
 8003204:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003208:	6613      	str	r3, [r2, #96]	; 0x60
 800320a:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <HAL_TIM_Base_MspInit+0x14c>)
 800320c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel6;
 8003216:	4b49      	ldr	r3, [pc, #292]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 8003218:	4a49      	ldr	r2, [pc, #292]	; (8003340 <HAL_TIM_Base_MspInit+0x154>)
 800321a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_7;
 800321c:	4b47      	ldr	r3, [pc, #284]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 800321e:	2207      	movs	r2, #7
 8003220:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003222:	4b46      	ldr	r3, [pc, #280]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 8003224:	2210      	movs	r2, #16
 8003226:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003228:	4b44      	ldr	r3, [pc, #272]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 800322a:	2200      	movs	r2, #0
 800322c:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 800322e:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003234:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 8003236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323a:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800323c:	4b3f      	ldr	r3, [pc, #252]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 800323e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003242:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8003244:	4b3d      	ldr	r3, [pc, #244]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 800324a:	4b3c      	ldr	r3, [pc, #240]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 800324c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003250:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003252:	483a      	ldr	r0, [pc, #232]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 8003254:	f002 f9b8 	bl	80055c8 <HAL_DMA_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 800325e:	f7ff fe9d 	bl	8002f9c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a35      	ldr	r2, [pc, #212]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 8003266:	621a      	str	r2, [r3, #32]
 8003268:	4a34      	ldr	r2, [pc, #208]	; (800333c <HAL_TIM_Base_MspInit+0x150>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800326e:	e05c      	b.n	800332a <HAL_TIM_Base_MspInit+0x13e>
  else if(htim_base->Instance==TIM2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003278:	d114      	bne.n	80032a4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800327a:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <HAL_TIM_Base_MspInit+0x14c>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	4a2e      	ldr	r2, [pc, #184]	; (8003338 <HAL_TIM_Base_MspInit+0x14c>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6593      	str	r3, [r2, #88]	; 0x58
 8003286:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <HAL_TIM_Base_MspInit+0x14c>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	201c      	movs	r0, #28
 8003298:	f002 f95f 	bl	800555a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800329c:	201c      	movs	r0, #28
 800329e:	f002 f978 	bl	8005592 <HAL_NVIC_EnableIRQ>
}
 80032a2:	e042      	b.n	800332a <HAL_TIM_Base_MspInit+0x13e>
  else if(htim_base->Instance==TIM3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a26      	ldr	r2, [pc, #152]	; (8003344 <HAL_TIM_Base_MspInit+0x158>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d13d      	bne.n	800332a <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ae:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_TIM_Base_MspInit+0x14c>)
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	4a21      	ldr	r2, [pc, #132]	; (8003338 <HAL_TIM_Base_MspInit+0x14c>)
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	6593      	str	r3, [r2, #88]	; 0x58
 80032ba:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <HAL_TIM_Base_MspInit+0x14c>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 80032c8:	4a20      	ldr	r2, [pc, #128]	; (800334c <HAL_TIM_Base_MspInit+0x160>)
 80032ca:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Request = DMA_REQUEST_5;
 80032cc:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 80032ce:	2205      	movs	r2, #5
 80032d0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 80032d4:	2210      	movs	r2, #16
 80032d6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 80032da:	2200      	movs	r2, #0
 80032dc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 80032e0:	2280      	movs	r2, #128	; 0x80
 80032e2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032e4:	4b18      	ldr	r3, [pc, #96]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 80032e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ea:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032ec:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 80032ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032f2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80032f4:	4b14      	ldr	r3, [pc, #80]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 80032fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003300:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8003302:	4811      	ldr	r0, [pc, #68]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 8003304:	f002 f960 	bl	80055c8 <HAL_DMA_Init>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_TIM_Base_MspInit+0x126>
      Error_Handler();
 800330e:	f7ff fe45 	bl	8002f9c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
 8003318:	4a0b      	ldr	r2, [pc, #44]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a09      	ldr	r2, [pc, #36]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 8003322:	621a      	str	r2, [r3, #32]
 8003324:	4a08      	ldr	r2, [pc, #32]	; (8003348 <HAL_TIM_Base_MspInit+0x15c>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6293      	str	r3, [r2, #40]	; 0x28
}
 800332a:	bf00      	nop
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40021000 	.word	0x40021000
 800333c:	20007118 	.word	0x20007118
 8003340:	4002006c 	.word	0x4002006c
 8003344:	40000400 	.word	0x40000400
 8003348:	20006ef0 	.word	0x20006ef0
 800334c:	40020030 	.word	0x40020030

08003350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a23      	ldr	r2, [pc, #140]	; (80033fc <HAL_TIM_MspPostInit+0xac>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d11e      	bne.n	80033b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <HAL_TIM_MspPostInit+0xb0>)
 8003374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003376:	4a22      	ldr	r2, [pc, #136]	; (8003400 <HAL_TIM_MspPostInit+0xb0>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <HAL_TIM_MspPostInit+0xb0>)
 8003380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800338a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800338e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003390:	2302      	movs	r3, #2
 8003392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003398:	2303      	movs	r3, #3
 800339a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800339c:	2301      	movs	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	4619      	mov	r1, r3
 80033a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033aa:	f002 fb83 	bl	8005ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80033ae:	e020      	b.n	80033f2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a13      	ldr	r2, [pc, #76]	; (8003404 <HAL_TIM_MspPostInit+0xb4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d11b      	bne.n	80033f2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <HAL_TIM_MspPostInit+0xb0>)
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	4a10      	ldr	r2, [pc, #64]	; (8003400 <HAL_TIM_MspPostInit+0xb0>)
 80033c0:	f043 0302 	orr.w	r3, r3, #2
 80033c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033c6:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <HAL_TIM_MspPostInit+0xb0>)
 80033c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033d2:	2310      	movs	r3, #16
 80033d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033e2:	2302      	movs	r3, #2
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e6:	f107 0314 	add.w	r3, r7, #20
 80033ea:	4619      	mov	r1, r3
 80033ec:	4806      	ldr	r0, [pc, #24]	; (8003408 <HAL_TIM_MspPostInit+0xb8>)
 80033ee:	f002 fb61 	bl	8005ab4 <HAL_GPIO_Init>
}
 80033f2:	bf00      	nop
 80033f4:	3728      	adds	r7, #40	; 0x28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40021000 	.word	0x40021000
 8003404:	40000400 	.word	0x40000400
 8003408:	48000400 	.word	0x48000400

0800340c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b0a4      	sub	sp, #144	; 0x90
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	2268      	movs	r2, #104	; 0x68
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f007 ff51 	bl	800b2d4 <memset>
  if(huart->Instance==USART2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a39      	ldr	r2, [pc, #228]	; (800351c <HAL_UART_MspInit+0x110>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d16b      	bne.n	8003514 <HAL_UART_MspInit+0x108>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800343c:	2302      	movs	r3, #2
 800343e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003440:	2300      	movs	r3, #0
 8003442:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4618      	mov	r0, r3
 800344a:	f004 f819 	bl	8007480 <HAL_RCCEx_PeriphCLKConfig>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003454:	f7ff fda2 	bl	8002f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003458:	4b31      	ldr	r3, [pc, #196]	; (8003520 <HAL_UART_MspInit+0x114>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	4a30      	ldr	r2, [pc, #192]	; (8003520 <HAL_UART_MspInit+0x114>)
 800345e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003462:	6593      	str	r3, [r2, #88]	; 0x58
 8003464:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_UART_MspInit+0x114>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <HAL_UART_MspInit+0x114>)
 8003472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003474:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <HAL_UART_MspInit+0x114>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800347c:	4b28      	ldr	r3, [pc, #160]	; (8003520 <HAL_UART_MspInit+0x114>)
 800347e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003488:	230c      	movs	r3, #12
 800348a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348c:	2302      	movs	r3, #2
 800348e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800349e:	2307      	movs	r3, #7
 80034a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034a8:	4619      	mov	r1, r3
 80034aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ae:	f002 fb01 	bl	8005ab4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80034b2:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <HAL_UART_MspInit+0x118>)
 80034b4:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <HAL_UART_MspInit+0x11c>)
 80034b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80034b8:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_UART_MspInit+0x118>)
 80034ba:	2202      	movs	r2, #2
 80034bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034be:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_UART_MspInit+0x118>)
 80034c0:	2210      	movs	r2, #16
 80034c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_UART_MspInit+0x118>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034ca:	4b16      	ldr	r3, [pc, #88]	; (8003524 <HAL_UART_MspInit+0x118>)
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d0:	4b14      	ldr	r3, [pc, #80]	; (8003524 <HAL_UART_MspInit+0x118>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <HAL_UART_MspInit+0x118>)
 80034d8:	2200      	movs	r2, #0
 80034da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_UART_MspInit+0x118>)
 80034de:	2200      	movs	r2, #0
 80034e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_UART_MspInit+0x118>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80034e8:	480e      	ldr	r0, [pc, #56]	; (8003524 <HAL_UART_MspInit+0x118>)
 80034ea:	f002 f86d 	bl	80055c8 <HAL_DMA_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 80034f4:	f7ff fd52 	bl	8002f9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <HAL_UART_MspInit+0x118>)
 80034fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <HAL_UART_MspInit+0x118>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003504:	2200      	movs	r2, #0
 8003506:	2100      	movs	r1, #0
 8003508:	2026      	movs	r0, #38	; 0x26
 800350a:	f002 f826 	bl	800555a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800350e:	2026      	movs	r0, #38	; 0x26
 8003510:	f002 f83f 	bl	8005592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003514:	bf00      	nop
 8003516:	3790      	adds	r7, #144	; 0x90
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40004400 	.word	0x40004400
 8003520:	40021000 	.word	0x40021000
 8003524:	200047a4 	.word	0x200047a4
 8003528:	40020080 	.word	0x40020080

0800352c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003530:	e7fe      	b.n	8003530 <NMI_Handler+0x4>

08003532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003532:	b480      	push	{r7}
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003536:	e7fe      	b.n	8003536 <HardFault_Handler+0x4>

08003538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800353c:	e7fe      	b.n	800353c <MemManage_Handler+0x4>

0800353e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003542:	e7fe      	b.n	8003542 <BusFault_Handler+0x4>

08003544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <UsageFault_Handler+0x4>

0800354a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003578:	f000 f9ce 	bl	8003918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}

08003580 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003584:	2001      	movs	r0, #1
 8003586:	f002 fc41 	bl	8005e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <DMA1_Channel3_IRQHandler+0x10>)
 8003596:	f002 f9ae 	bl	80058f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20006ef0 	.word	0x20006ef0

080035a4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80035a8:	4802      	ldr	r0, [pc, #8]	; (80035b4 <DMA1_Channel6_IRQHandler+0x10>)
 80035aa:	f002 f9a4 	bl	80058f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20007118 	.word	0x20007118

080035b8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80035bc:	4802      	ldr	r0, [pc, #8]	; (80035c8 <DMA1_Channel7_IRQHandler+0x10>)
 80035be:	f002 f99a 	bl	80058f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200047a4 	.word	0x200047a4

080035cc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80035d0:	4802      	ldr	r0, [pc, #8]	; (80035dc <ADC1_IRQHandler+0x10>)
 80035d2:	f000 fe52 	bl	800427a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000455c 	.word	0x2000455c

080035e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80035e4:	2020      	movs	r0, #32
 80035e6:	f002 fc11 	bl	8005e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <TIM2_IRQHandler+0x10>)
 80035f6:	f004 fe0f 	bl	8008218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20008190 	.word	0x20008190

08003604 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003608:	4802      	ldr	r0, [pc, #8]	; (8003614 <USART2_IRQHandler+0x10>)
 800360a:	f006 fb91 	bl	8009d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	2000868c 	.word	0x2000868c

08003618 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800361c:	4802      	ldr	r0, [pc, #8]	; (8003628 <DMA2_Channel3_IRQHandler+0x10>)
 800361e:	f002 f96a 	bl	80058f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20005f5c 	.word	0x20005f5c

0800362c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
	return 1;
 8003630:	2301      	movs	r3, #1
}
 8003632:	4618      	mov	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_kill>:

int _kill(int pid, int sig)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003646:	f007 fe0d 	bl	800b264 <__errno>
 800364a:	4603      	mov	r3, r0
 800364c:	2216      	movs	r2, #22
 800364e:	601a      	str	r2, [r3, #0]
	return -1;
 8003650:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <_exit>:

void _exit (int status)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ffe7 	bl	800363c <_kill>
	while (1) {}		/* Make sure we hang here */
 800366e:	e7fe      	b.n	800366e <_exit+0x12>

08003670 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e00a      	b.n	8003698 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003682:	f3af 8000 	nop.w
 8003686:	4601      	mov	r1, r0
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	60ba      	str	r2, [r7, #8]
 800368e:	b2ca      	uxtb	r2, r1
 8003690:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	3301      	adds	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	429a      	cmp	r2, r3
 800369e:	dbf0      	blt.n	8003682 <_read+0x12>
	}

return len;
 80036a0:	687b      	ldr	r3, [r7, #4]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	e009      	b.n	80036d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	60ba      	str	r2, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	3301      	adds	r3, #1
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	dbf1      	blt.n	80036bc <_write+0x12>
	}
	return len;
 80036d8:	687b      	ldr	r3, [r7, #4]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <_close>:

int _close(int file)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
	return -1;
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800370a:	605a      	str	r2, [r3, #4]
	return 0;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <_isatty>:

int _isatty(int file)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
	return 1;
 8003722:	2301      	movs	r3, #1
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
	return 0;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003754:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <_sbrk+0x5c>)
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <_sbrk+0x60>)
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003760:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <_sbrk+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <_sbrk+0x64>)
 800376a:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <_sbrk+0x68>)
 800376c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <_sbrk+0x64>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4413      	add	r3, r2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	429a      	cmp	r2, r3
 800377a:	d207      	bcs.n	800378c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800377c:	f007 fd72 	bl	800b264 <__errno>
 8003780:	4603      	mov	r3, r0
 8003782:	220c      	movs	r2, #12
 8003784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
 800378a:	e009      	b.n	80037a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <_sbrk+0x64>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <_sbrk+0x64>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	4a05      	ldr	r2, [pc, #20]	; (80037b0 <_sbrk+0x64>)
 800379c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800379e:	68fb      	ldr	r3, [r7, #12]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20020000 	.word	0x20020000
 80037ac:	00000400 	.word	0x00000400
 80037b0:	20000228 	.word	0x20000228
 80037b4:	2000a388 	.word	0x2000a388

080037b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80037bc:	4b15      	ldr	r3, [pc, #84]	; (8003814 <SystemInit+0x5c>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	4a14      	ldr	r2, [pc, #80]	; (8003814 <SystemInit+0x5c>)
 80037c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <SystemInit+0x60>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a11      	ldr	r2, [pc, #68]	; (8003818 <SystemInit+0x60>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <SystemInit+0x60>)
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <SystemInit+0x60>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a0d      	ldr	r2, [pc, #52]	; (8003818 <SystemInit+0x60>)
 80037e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80037e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80037ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <SystemInit+0x60>)
 80037f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <SystemInit+0x60>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a07      	ldr	r2, [pc, #28]	; (8003818 <SystemInit+0x60>)
 80037fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003800:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <SystemInit+0x60>)
 8003804:	2200      	movs	r2, #0
 8003806:	619a      	str	r2, [r3, #24]
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	e000ed00 	.word	0xe000ed00
 8003818:	40021000 	.word	0x40021000

0800381c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800381c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003854 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003820:	f7ff ffca 	bl	80037b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <LoopForever+0x6>)
  ldr r1, =_edata
 8003826:	490d      	ldr	r1, [pc, #52]	; (800385c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <LoopForever+0xe>)
  movs r3, #0
 800382a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800382c:	e002      	b.n	8003834 <LoopCopyDataInit>

0800382e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003832:	3304      	adds	r3, #4

08003834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003838:	d3f9      	bcc.n	800382e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800383c:	4c0a      	ldr	r4, [pc, #40]	; (8003868 <LoopForever+0x16>)
  movs r3, #0
 800383e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003840:	e001      	b.n	8003846 <LoopFillZerobss>

08003842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003844:	3204      	adds	r2, #4

08003846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003848:	d3fb      	bcc.n	8003842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800384a:	f007 fd11 	bl	800b270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800384e:	f7fc feab 	bl	80005a8 <main>

08003852 <LoopForever>:

LoopForever:
    b LoopForever
 8003852:	e7fe      	b.n	8003852 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800385c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003860:	0800ce30 	.word	0x0800ce30
  ldr r2, =_sbss
 8003864:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003868:	2000a384 	.word	0x2000a384

0800386c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800386c:	e7fe      	b.n	800386c <CAN1_RX0_IRQHandler>

0800386e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003878:	2003      	movs	r0, #3
 800387a:	f001 fe63 	bl	8005544 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800387e:	200f      	movs	r0, #15
 8003880:	f000 f80e 	bl	80038a0 <HAL_InitTick>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	71fb      	strb	r3, [r7, #7]
 800388e:	e001      	b.n	8003894 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003890:	f7ff fb8a 	bl	8002fa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003894:	79fb      	ldrb	r3, [r7, #7]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <HAL_InitTick+0x6c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d023      	beq.n	80038fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_InitTick+0x70>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b14      	ldr	r3, [pc, #80]	; (800390c <HAL_InitTick+0x6c>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	4619      	mov	r1, r3
 80038be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fe6f 	bl	80055ae <HAL_SYSTICK_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10f      	bne.n	80038f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b0f      	cmp	r3, #15
 80038da:	d809      	bhi.n	80038f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038dc:	2200      	movs	r2, #0
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	f001 fe39 	bl	800555a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038e8:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <HAL_InitTick+0x74>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e007      	b.n	8003900 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	e004      	b.n	8003900 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	e001      	b.n	8003900 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000194 	.word	0x20000194
 8003910:	2000018c 	.word	0x2000018c
 8003914:	20000190 	.word	0x20000190

08003918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_IncTick+0x20>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_IncTick+0x24>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4413      	add	r3, r2
 8003928:	4a04      	ldr	r2, [pc, #16]	; (800393c <HAL_IncTick+0x24>)
 800392a:	6013      	str	r3, [r2, #0]
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000194 	.word	0x20000194
 800393c:	2000a370 	.word	0x2000a370

08003940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return uwTick;
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_GetTick+0x14>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	2000a370 	.word	0x2000a370

08003958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003960:	f7ff ffee 	bl	8003940 <HAL_GetTick>
 8003964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d005      	beq.n	800397e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_Delay+0x44>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800397e:	bf00      	nop
 8003980:	f7ff ffde 	bl	8003940 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d8f7      	bhi.n	8003980 <HAL_Delay+0x28>
  {
  }
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000194 	.word	0x20000194

080039a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	609a      	str	r2, [r3, #8]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3360      	adds	r3, #96	; 0x60
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <LL_ADC_SetOffset+0x44>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	03fff000 	.word	0x03fff000

08003a50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3360      	adds	r3, #96	; 0x60
 8003a5e:	461a      	mov	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3360      	adds	r3, #96	; 0x60
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	615a      	str	r2, [r3, #20]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b087      	sub	sp, #28
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3330      	adds	r3, #48	; 0x30
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	4413      	add	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	211f      	movs	r1, #31
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	401a      	ands	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	0e9b      	lsrs	r3, r3, #26
 8003b36:	f003 011f 	and.w	r1, r3, #31
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	431a      	orrs	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3314      	adds	r3, #20
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	0e5b      	lsrs	r3, r3, #25
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	4413      	add	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	0d1b      	lsrs	r3, r3, #20
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2107      	movs	r1, #7
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	0d1b      	lsrs	r3, r3, #20
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bec:	43db      	mvns	r3, r3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0318 	and.w	r3, r3, #24
 8003bf6:	4908      	ldr	r1, [pc, #32]	; (8003c18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bf8:	40d9      	lsrs	r1, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	400b      	ands	r3, r1
 8003bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	0007ffff 	.word	0x0007ffff

08003c1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6093      	str	r3, [r2, #8]
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c54:	d101      	bne.n	8003c5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca4:	d101      	bne.n	8003caa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ccc:	f043 0201 	orr.w	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cf4:	f043 0202 	orr.w	r2, r3, #2
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <LL_ADC_IsEnabled+0x18>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <LL_ADC_IsEnabled+0x1a>
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d101      	bne.n	8003d46 <LL_ADC_IsDisableOngoing+0x18>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <LL_ADC_IsDisableOngoing+0x1a>
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d68:	f043 0204 	orr.w	r2, r3, #4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d90:	f043 0210 	orr.w	r2, r3, #16
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d101      	bne.n	8003dbc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dde:	f043 0220 	orr.w	r2, r3, #32
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d101      	bne.n	8003e0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e12f      	b.n	8004092 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff f8d5 	bl	8002ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fef1 	bl	8003c40 <LL_ADC_IsDeepPowerDownEnabled>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d004      	beq.n	8003e6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fed7 	bl	8003c1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ff0c 	bl	8003c90 <LL_ADC_IsInternalRegulatorEnabled>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d115      	bne.n	8003eaa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fef0 	bl	8003c68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e88:	4b84      	ldr	r3, [pc, #528]	; (800409c <HAL_ADC_Init+0x284>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	4a84      	ldr	r2, [pc, #528]	; (80040a0 <HAL_ADC_Init+0x288>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	3301      	adds	r3, #1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e9c:	e002      	b.n	8003ea4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f9      	bne.n	8003e9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff feee 	bl	8003c90 <LL_ADC_IsInternalRegulatorEnabled>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	f043 0210 	orr.w	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	f043 0201 	orr.w	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff ff62 	bl	8003da4 <LL_ADC_REG_IsConversionOngoing>
 8003ee0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 80c8 	bne.w	8004080 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 80c4 	bne.w	8004080 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f00:	f043 0202 	orr.w	r2, r3, #2
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fefb 	bl	8003d08 <LL_ADC_IsEnabled>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f18:	4862      	ldr	r0, [pc, #392]	; (80040a4 <HAL_ADC_Init+0x28c>)
 8003f1a:	f7ff fef5 	bl	8003d08 <LL_ADC_IsEnabled>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	485f      	ldr	r0, [pc, #380]	; (80040a8 <HAL_ADC_Init+0x290>)
 8003f2c:	f7ff fd38 	bl	80039a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	7e5b      	ldrb	r3, [r3, #25]
 8003f34:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f3a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003f40:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003f46:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f4e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d106      	bne.n	8003f6c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	3b01      	subs	r3, #1
 8003f64:	045b      	lsls	r3, r3, #17
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d009      	beq.n	8003f88 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	4b47      	ldr	r3, [pc, #284]	; (80040ac <HAL_ADC_Init+0x294>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	69b9      	ldr	r1, [r7, #24]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff feff 	bl	8003da4 <LL_ADC_REG_IsConversionOngoing>
 8003fa6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff ff20 	bl	8003df2 <LL_ADC_INJ_IsConversionOngoing>
 8003fb2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d140      	bne.n	800403c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d13d      	bne.n	800403c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7e1b      	ldrb	r3, [r3, #24]
 8003fc8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fca:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fd2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe2:	f023 0306 	bic.w	r3, r3, #6
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	69b9      	ldr	r1, [r7, #24]
 8003fec:	430b      	orrs	r3, r1
 8003fee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d118      	bne.n	800402c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004010:	4311      	orrs	r1, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004016:	4311      	orrs	r1, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800401c:	430a      	orrs	r2, r1
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	611a      	str	r2, [r3, #16]
 800402a:	e007      	b.n	800403c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d10c      	bne.n	800405e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f023 010f 	bic.w	r1, r3, #15
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	1e5a      	subs	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
 800405c:	e007      	b.n	800406e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 020f 	bic.w	r2, r2, #15
 800406c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	f023 0303 	bic.w	r3, r3, #3
 8004076:	f043 0201 	orr.w	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	659a      	str	r2, [r3, #88]	; 0x58
 800407e:	e007      	b.n	8004090 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	f043 0210 	orr.w	r2, r3, #16
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004090:	7ffb      	ldrb	r3, [r7, #31]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	2000018c 	.word	0x2000018c
 80040a0:	053e2d63 	.word	0x053e2d63
 80040a4:	50040000 	.word	0x50040000
 80040a8:	50040300 	.word	0x50040300
 80040ac:	fff0c007 	.word	0xfff0c007

080040b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fe6f 	bl	8003da4 <LL_ADC_REG_IsConversionOngoing>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d167      	bne.n	800419c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_ADC_Start_DMA+0x2a>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e063      	b.n	80041a2 <HAL_ADC_Start_DMA+0xf2>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 ff4a 	bl	8004f7c <ADC_Enable>
 80040e8:	4603      	mov	r3, r0
 80040ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d14f      	bne.n	8004192 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d006      	beq.n	8004120 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004116:	f023 0206 	bic.w	r2, r3, #6
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	65da      	str	r2, [r3, #92]	; 0x5c
 800411e:	e002      	b.n	8004126 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412a:	4a20      	ldr	r2, [pc, #128]	; (80041ac <HAL_ADC_Start_DMA+0xfc>)
 800412c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004132:	4a1f      	ldr	r2, [pc, #124]	; (80041b0 <HAL_ADC_Start_DMA+0x100>)
 8004134:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413a:	4a1e      	ldr	r2, [pc, #120]	; (80041b4 <HAL_ADC_Start_DMA+0x104>)
 800413c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	221c      	movs	r2, #28
 8004144:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0210 	orr.w	r2, r2, #16
 800415c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0201 	orr.w	r2, r2, #1
 800416c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3340      	adds	r3, #64	; 0x40
 8004178:	4619      	mov	r1, r3
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f001 fadb 	bl	8005738 <HAL_DMA_Start_IT>
 8004182:	4603      	mov	r3, r0
 8004184:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fde2 	bl	8003d54 <LL_ADC_REG_StartConversion>
 8004190:	e006      	b.n	80041a0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800419a:	e001      	b.n	80041a0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800419c:	2302      	movs	r3, #2
 800419e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	080050ff 	.word	0x080050ff
 80041b0:	080051d7 	.word	0x080051d7
 80041b4:	080051f3 	.word	0x080051f3

080041b8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_ADC_Stop_DMA+0x16>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e051      	b.n	8004272 <HAL_ADC_Stop_DMA+0xba>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80041d6:	2103      	movs	r1, #3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fe13 	bl	8004e04 <ADC_ConversionStop>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d13f      	bne.n	8004268 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d10f      	bne.n	8004226 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420a:	4618      	mov	r0, r3
 800420c:	f001 faf4 	bl	80057f8 <HAL_DMA_Abort>
 8004210:	4603      	mov	r3, r0
 8004212:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0210 	bic.w	r2, r2, #16
 8004234:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 feff 	bl	8005040 <ADC_Disable>
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
 8004246:	e002      	b.n	800424e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fef9 	bl	8005040 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d109      	bne.n	8004268 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	f043 0201 	orr.w	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b088      	sub	sp, #32
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d017      	beq.n	80042d0 <HAL_ADC_IRQHandler+0x56>
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d012      	beq.n	80042d0 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d105      	bne.n	80042c2 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f001 f864 	bl	8005390 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2202      	movs	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <HAL_ADC_IRQHandler+0x6a>
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d05e      	beq.n	80043ac <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d059      	beq.n	80043ac <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fbdf 	bl	8003ad8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d03e      	beq.n	800439e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d135      	bne.n	800439e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b08      	cmp	r3, #8
 800433e:	d12e      	bne.n	800439e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fd2d 	bl	8003da4 <LL_ADC_REG_IsConversionOngoing>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d11a      	bne.n	8004386 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 020c 	bic.w	r2, r2, #12
 800435e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d112      	bne.n	800439e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	f043 0201 	orr.w	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	659a      	str	r2, [r3, #88]	; 0x58
 8004384:	e00b      	b.n	800439e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438a:	f043 0210 	orr.w	r2, r3, #16
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fe fd26 	bl	8002df0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	220c      	movs	r2, #12
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d004      	beq.n	80043c0 <HAL_ADC_IRQHandler+0x146>
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d109      	bne.n	80043d4 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d072      	beq.n	80044b0 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d06d      	beq.n	80044b0 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fbb0 	bl	8003b56 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80043f6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fb6b 	bl	8003ad8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004402:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d047      	beq.n	80044a2 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_ADC_IRQHandler+0x1b2>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03f      	beq.n	80044a2 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004428:	2b00      	cmp	r3, #0
 800442a:	d13a      	bne.n	80044a2 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d133      	bne.n	80044a2 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d12e      	bne.n	80044a2 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fcd2 	bl	8003df2 <LL_ADC_INJ_IsConversionOngoing>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d11a      	bne.n	800448a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004462:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d112      	bne.n	80044a2 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	659a      	str	r2, [r3, #88]	; 0x58
 8004488:	e00b      	b.n	80044a2 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	f043 0210 	orr.w	r2, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449a:	f043 0201 	orr.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 ff4c 	bl	8005340 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2260      	movs	r2, #96	; 0x60
 80044ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d011      	beq.n	80044de <HAL_ADC_IRQHandler+0x264>
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00c      	beq.n	80044de <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f890 	bl	80045f6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2280      	movs	r2, #128	; 0x80
 80044dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d012      	beq.n	800450e <HAL_ADC_IRQHandler+0x294>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00d      	beq.n	800450e <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 ff32 	bl	8005368 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800450c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004514:	2b00      	cmp	r3, #0
 8004516:	d012      	beq.n	800453e <HAL_ADC_IRQHandler+0x2c4>
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 ff24 	bl	800537c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800453c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02a      	beq.n	800459e <HAL_ADC_IRQHandler+0x324>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b00      	cmp	r3, #0
 8004550:	d025      	beq.n	800459e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800455a:	2301      	movs	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e008      	b.n	8004572 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800456e:	2301      	movs	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d10e      	bne.n	8004596 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	f043 0202 	orr.w	r2, r3, #2
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7fe fc47 	bl	8002e24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2210      	movs	r2, #16
 800459c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d018      	beq.n	80045da <HAL_ADC_IRQHandler+0x360>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d013      	beq.n	80045da <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c2:	f043 0208 	orr.w	r2, r3, #8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045d2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 febd 	bl	8005354 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80045da:	bf00      	nop
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b0b6      	sub	sp, #216	; 0xd8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_ADC_ConfigChannel+0x22>
 800462a:	2302      	movs	r3, #2
 800462c:	e3d5      	b.n	8004dda <HAL_ADC_ConfigChannel+0x7ce>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fbb2 	bl	8003da4 <LL_ADC_REG_IsConversionOngoing>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 83ba 	bne.w	8004dbc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b05      	cmp	r3, #5
 800464e:	d824      	bhi.n	800469a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	3b02      	subs	r3, #2
 8004656:	2b03      	cmp	r3, #3
 8004658:	d81b      	bhi.n	8004692 <HAL_ADC_ConfigChannel+0x86>
 800465a:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <HAL_ADC_ConfigChannel+0x54>)
 800465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004660:	08004671 	.word	0x08004671
 8004664:	08004679 	.word	0x08004679
 8004668:	08004681 	.word	0x08004681
 800466c:	08004689 	.word	0x08004689
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	220c      	movs	r2, #12
 8004674:	605a      	str	r2, [r3, #4]
          break;
 8004676:	e011      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2212      	movs	r2, #18
 800467c:	605a      	str	r2, [r3, #4]
          break;
 800467e:	e00d      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2218      	movs	r2, #24
 8004684:	605a      	str	r2, [r3, #4]
          break;
 8004686:	e009      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800468e:	605a      	str	r2, [r3, #4]
          break;
 8004690:	e004      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2206      	movs	r2, #6
 8004696:	605a      	str	r2, [r3, #4]
          break;
 8004698:	e000      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800469a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	f7ff fa28 	bl	8003afe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fb76 	bl	8003da4 <LL_ADC_REG_IsConversionOngoing>
 80046b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fb96 	bl	8003df2 <LL_ADC_INJ_IsConversionOngoing>
 80046c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 81c1 	bne.w	8004a56 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 81bc 	bne.w	8004a56 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046e6:	d10f      	bne.n	8004708 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2200      	movs	r2, #0
 80046f2:	4619      	mov	r1, r3
 80046f4:	f7ff fa42 	bl	8003b7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff f9d6 	bl	8003ab2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004706:	e00e      	b.n	8004726 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	461a      	mov	r2, r3
 8004716:	f7ff fa31 	bl	8003b7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff f9c6 	bl	8003ab2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b04      	cmp	r3, #4
 8004746:	d00a      	beq.n	800475e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6919      	ldr	r1, [r3, #16]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004758:	f7ff f956 	bl	8003a08 <LL_ADC_SetOffset>
 800475c:	e17b      	b.n	8004a56 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff f973 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 800476a:	4603      	mov	r3, r0
 800476c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <HAL_ADC_ConfigChannel+0x17e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff f968 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004780:	4603      	mov	r3, r0
 8004782:	0e9b      	lsrs	r3, r3, #26
 8004784:	f003 021f 	and.w	r2, r3, #31
 8004788:	e01e      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x1bc>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2100      	movs	r1, #0
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff f95d 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004796:	4603      	mov	r3, r0
 8004798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047a0:	fa93 f3a3 	rbit	r3, r3
 80047a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80047b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80047b8:	2320      	movs	r3, #32
 80047ba:	e004      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80047bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047c0:	fab3 f383 	clz	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x1d4>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	0e9b      	lsrs	r3, r3, #26
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	e018      	b.n	8004812 <HAL_ADC_ConfigChannel+0x206>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80047ec:	fa93 f3a3 	rbit	r3, r3
 80047f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80047f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80047fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004804:	2320      	movs	r3, #32
 8004806:	e004      	b.n	8004812 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004808:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800480c:	fab3 f383 	clz	r3, r3
 8004810:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004812:	429a      	cmp	r2, r3
 8004814:	d106      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff f92c 	bl	8003a7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2101      	movs	r1, #1
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff f910 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004830:	4603      	mov	r3, r0
 8004832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10a      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x244>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff f905 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004846:	4603      	mov	r3, r0
 8004848:	0e9b      	lsrs	r3, r3, #26
 800484a:	f003 021f 	and.w	r2, r3, #31
 800484e:	e01e      	b.n	800488e <HAL_ADC_ConfigChannel+0x282>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2101      	movs	r1, #1
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff f8fa 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 800485c:	4603      	mov	r3, r0
 800485e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800486e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004872:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800487e:	2320      	movs	r3, #32
 8004880:	e004      	b.n	800488c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8004882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004896:	2b00      	cmp	r3, #0
 8004898:	d105      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x29a>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	0e9b      	lsrs	r3, r3, #26
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	e018      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x2cc>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80048ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80048be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80048c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80048ca:	2320      	movs	r3, #32
 80048cc:	e004      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80048ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048d2:	fab3 f383 	clz	r3, r3
 80048d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048d8:	429a      	cmp	r2, r3
 80048da:	d106      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2200      	movs	r2, #0
 80048e2:	2101      	movs	r1, #1
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff f8c9 	bl	8003a7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2102      	movs	r1, #2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff f8ad 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x30a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2102      	movs	r1, #2
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff f8a2 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 800490c:	4603      	mov	r3, r0
 800490e:	0e9b      	lsrs	r3, r3, #26
 8004910:	f003 021f 	and.w	r2, r3, #31
 8004914:	e01e      	b.n	8004954 <HAL_ADC_ConfigChannel+0x348>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff f897 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004922:	4603      	mov	r3, r0
 8004924:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800492c:	fa93 f3a3 	rbit	r3, r3
 8004930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004938:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800493c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004944:	2320      	movs	r3, #32
 8004946:	e004      	b.n	8004952 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004948:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <HAL_ADC_ConfigChannel+0x360>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	0e9b      	lsrs	r3, r3, #26
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	e016      	b.n	800499a <HAL_ADC_ConfigChannel+0x38e>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004974:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800497e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800498c:	2320      	movs	r3, #32
 800498e:	e004      	b.n	800499a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8004990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004994:	fab3 f383 	clz	r3, r3
 8004998:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800499a:	429a      	cmp	r2, r3
 800499c:	d106      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2200      	movs	r2, #0
 80049a4:	2102      	movs	r1, #2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff f868 	bl	8003a7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2103      	movs	r1, #3
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff f84c 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x3cc>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2103      	movs	r1, #3
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff f841 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 80049ce:	4603      	mov	r3, r0
 80049d0:	0e9b      	lsrs	r3, r3, #26
 80049d2:	f003 021f 	and.w	r2, r3, #31
 80049d6:	e017      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x3fc>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2103      	movs	r1, #3
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff f836 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 80049e4:	4603      	mov	r3, r0
 80049e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ea:	fa93 f3a3 	rbit	r3, r3
 80049ee:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80049f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049f2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80049f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80049fa:	2320      	movs	r3, #32
 80049fc:	e003      	b.n	8004a06 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80049fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a00:	fab3 f383 	clz	r3, r3
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x414>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	0e9b      	lsrs	r3, r3, #26
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	e011      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x438>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004a2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	e003      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d106      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2103      	movs	r1, #3
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff f813 	bl	8003a7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff f954 	bl	8003d08 <LL_ADC_IsEnabled>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 8140 	bne.w	8004ce8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	461a      	mov	r2, r3
 8004a76:	f7ff f8ad 	bl	8003bd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4a8f      	ldr	r2, [pc, #572]	; (8004cbc <HAL_ADC_ConfigChannel+0x6b0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	f040 8131 	bne.w	8004ce8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x4a2>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0e9b      	lsrs	r3, r3, #26
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	2b09      	cmp	r3, #9
 8004aa4:	bf94      	ite	ls
 8004aa6:	2301      	movls	r3, #1
 8004aa8:	2300      	movhi	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	e019      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x4d6>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab6:	fa93 f3a3 	rbit	r3, r3
 8004aba:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004abe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8004ac6:	2320      	movs	r3, #32
 8004ac8:	e003      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	2b09      	cmp	r3, #9
 8004ada:	bf94      	ite	ls
 8004adc:	2301      	movls	r3, #1
 8004ade:	2300      	movhi	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d079      	beq.n	8004bda <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d107      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x4f6>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	0e9b      	lsrs	r3, r3, #26
 8004af8:	3301      	adds	r3, #1
 8004afa:	069b      	lsls	r3, r3, #26
 8004afc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b00:	e015      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x522>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b12:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	e003      	b.n	8004b26 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b20:	fab3 f383 	clz	r3, r3
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	3301      	adds	r3, #1
 8004b28:	069b      	lsls	r3, r3, #26
 8004b2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x542>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	0e9b      	lsrs	r3, r3, #26
 8004b40:	3301      	adds	r3, #1
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	2101      	movs	r1, #1
 8004b48:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4c:	e017      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x572>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004b66:	2320      	movs	r3, #32
 8004b68:	e003      	b.n	8004b72 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b6c:	fab3 f383 	clz	r3, r3
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	2101      	movs	r1, #1
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	ea42 0103 	orr.w	r1, r2, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x598>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	0e9b      	lsrs	r3, r3, #26
 8004b94:	3301      	adds	r3, #1
 8004b96:	f003 021f 	and.w	r2, r3, #31
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	4413      	add	r3, r2
 8004ba0:	051b      	lsls	r3, r3, #20
 8004ba2:	e018      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x5ca>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	fa93 f3a3 	rbit	r3, r3
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	e003      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f003 021f 	and.w	r2, r3, #31
 8004bce:	4613      	mov	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	e081      	b.n	8004cde <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d107      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x5ea>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	0e9b      	lsrs	r3, r3, #26
 8004bec:	3301      	adds	r3, #1
 8004bee:	069b      	lsls	r3, r3, #26
 8004bf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bf4:	e015      	b.n	8004c22 <HAL_ADC_ConfigChannel+0x616>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004c0e:	2320      	movs	r3, #32
 8004c10:	e003      	b.n	8004c1a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	fab3 f383 	clz	r3, r3
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	069b      	lsls	r3, r3, #26
 8004c1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x636>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	0e9b      	lsrs	r3, r3, #26
 8004c34:	3301      	adds	r3, #1
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	e017      	b.n	8004c72 <HAL_ADC_ConfigChannel+0x666>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	61fb      	str	r3, [r7, #28]
  return result;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004c5a:	2320      	movs	r3, #32
 8004c5c:	e003      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	3301      	adds	r3, #1
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	ea42 0103 	orr.w	r1, r2, r3
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10d      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x692>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	0e9b      	lsrs	r3, r3, #26
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f003 021f 	and.w	r2, r3, #31
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	3b1e      	subs	r3, #30
 8004c96:	051b      	lsls	r3, r3, #20
 8004c98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c9c:	e01e      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x6d0>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	fa93 f3a3 	rbit	r3, r3
 8004caa:	613b      	str	r3, [r7, #16]
  return result;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	e006      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x6bc>
 8004cba:	bf00      	nop
 8004cbc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	fab3 f383 	clz	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	3301      	adds	r3, #1
 8004cca:	f003 021f 	and.w	r2, r3, #31
 8004cce:	4613      	mov	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3b1e      	subs	r3, #30
 8004cd6:	051b      	lsls	r3, r3, #20
 8004cd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	6892      	ldr	r2, [r2, #8]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f7fe ff4a 	bl	8003b7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b3d      	ldr	r3, [pc, #244]	; (8004de4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d06c      	beq.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cf4:	483c      	ldr	r0, [pc, #240]	; (8004de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004cf6:	f7fe fe79 	bl	80039ec <LL_ADC_GetCommonPathInternalCh>
 8004cfa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a3a      	ldr	r2, [pc, #232]	; (8004dec <HAL_ADC_ConfigChannel+0x7e0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d127      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d121      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a35      	ldr	r2, [pc, #212]	; (8004df0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d157      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d26:	4619      	mov	r1, r3
 8004d28:	482f      	ldr	r0, [pc, #188]	; (8004de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d2a:	f7fe fe4c 	bl	80039c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d2e:	4b31      	ldr	r3, [pc, #196]	; (8004df4 <HAL_ADC_ConfigChannel+0x7e8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	4a30      	ldr	r2, [pc, #192]	; (8004df8 <HAL_ADC_ConfigChannel+0x7ec>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	099b      	lsrs	r3, r3, #6
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	4613      	mov	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d48:	e002      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f9      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d56:	e03a      	b.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a27      	ldr	r2, [pc, #156]	; (8004dfc <HAL_ADC_ConfigChannel+0x7f0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d113      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x77e>
 8004d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10d      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d12a      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d80:	4619      	mov	r1, r3
 8004d82:	4819      	ldr	r0, [pc, #100]	; (8004de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d84:	f7fe fe1f 	bl	80039c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d88:	e021      	b.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1c      	ldr	r2, [pc, #112]	; (8004e00 <HAL_ADC_ConfigChannel+0x7f4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d11c      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d116      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a12      	ldr	r2, [pc, #72]	; (8004df0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d111      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004daa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004db2:	4619      	mov	r1, r3
 8004db4:	480c      	ldr	r0, [pc, #48]	; (8004de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004db6:	f7fe fe06 	bl	80039c6 <LL_ADC_SetCommonPathInternalCh>
 8004dba:	e008      	b.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004dd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	37d8      	adds	r7, #216	; 0xd8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	80080000 	.word	0x80080000
 8004de8:	50040300 	.word	0x50040300
 8004dec:	c7520000 	.word	0xc7520000
 8004df0:	50040000 	.word	0x50040000
 8004df4:	2000018c 	.word	0x2000018c
 8004df8:	053e2d63 	.word	0x053e2d63
 8004dfc:	cb840000 	.word	0xcb840000
 8004e00:	80000001 	.word	0x80000001

08004e04 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe ffc2 	bl	8003da4 <LL_ADC_REG_IsConversionOngoing>
 8004e20:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe ffe3 	bl	8003df2 <LL_ADC_INJ_IsConversionOngoing>
 8004e2c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d103      	bne.n	8004e3c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8098 	beq.w	8004f6c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d02a      	beq.n	8004ea0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	7e5b      	ldrb	r3, [r3, #25]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d126      	bne.n	8004ea0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	7e1b      	ldrb	r3, [r3, #24]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d122      	bne.n	8004ea0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004e5e:	e014      	b.n	8004e8a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4a45      	ldr	r2, [pc, #276]	; (8004f78 <ADC_ConversionStop+0x174>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d90d      	bls.n	8004e84 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	f043 0210 	orr.w	r2, r3, #16
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e074      	b.n	8004f6e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	3301      	adds	r3, #1
 8004e88:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d1e3      	bne.n	8004e60 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2240      	movs	r2, #64	; 0x40
 8004e9e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d014      	beq.n	8004ed0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe ff7a 	bl	8003da4 <LL_ADC_REG_IsConversionOngoing>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00c      	beq.n	8004ed0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fe ff37 	bl	8003d2e <LL_ADC_IsDisableOngoing>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe ff56 	bl	8003d7c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d014      	beq.n	8004f00 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe ff89 	bl	8003df2 <LL_ADC_INJ_IsConversionOngoing>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00c      	beq.n	8004f00 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe ff1f 	bl	8003d2e <LL_ADC_IsDisableOngoing>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d104      	bne.n	8004f00 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe ff65 	bl	8003dca <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d005      	beq.n	8004f12 <ADC_ConversionStop+0x10e>
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d105      	bne.n	8004f18 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004f0c:	230c      	movs	r3, #12
 8004f0e:	617b      	str	r3, [r7, #20]
        break;
 8004f10:	e005      	b.n	8004f1e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004f12:	2308      	movs	r3, #8
 8004f14:	617b      	str	r3, [r7, #20]
        break;
 8004f16:	e002      	b.n	8004f1e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004f18:	2304      	movs	r3, #4
 8004f1a:	617b      	str	r3, [r7, #20]
        break;
 8004f1c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004f1e:	f7fe fd0f 	bl	8003940 <HAL_GetTick>
 8004f22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004f24:	e01b      	b.n	8004f5e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004f26:	f7fe fd0b 	bl	8003940 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b05      	cmp	r3, #5
 8004f32:	d914      	bls.n	8004f5e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f043 0210 	orr.w	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f52:	f043 0201 	orr.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e007      	b.n	8004f6e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1dc      	bne.n	8004f26 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	a33fffff 	.word	0xa33fffff

08004f7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fe febd 	bl	8003d08 <LL_ADC_IsEnabled>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d14d      	bne.n	8005030 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	4b28      	ldr	r3, [pc, #160]	; (800503c <ADC_Enable+0xc0>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00d      	beq.n	8004fbe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	f043 0210 	orr.w	r2, r3, #16
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb2:	f043 0201 	orr.w	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e039      	b.n	8005032 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe fe78 	bl	8003cb8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004fc8:	f7fe fcba 	bl	8003940 <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fce:	e028      	b.n	8005022 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe fe97 	bl	8003d08 <LL_ADC_IsEnabled>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe fe67 	bl	8003cb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004fea:	f7fe fca9 	bl	8003940 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d914      	bls.n	8005022 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b01      	cmp	r3, #1
 8005004:	d00d      	beq.n	8005022 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500a:	f043 0210 	orr.w	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e007      	b.n	8005032 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b01      	cmp	r3, #1
 800502e:	d1cf      	bne.n	8004fd0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	8000003f 	.word	0x8000003f

08005040 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fe fe6e 	bl	8003d2e <LL_ADC_IsDisableOngoing>
 8005052:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f7fe fe55 	bl	8003d08 <LL_ADC_IsEnabled>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d047      	beq.n	80050f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d144      	bne.n	80050f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 030d 	and.w	r3, r3, #13
 8005074:	2b01      	cmp	r3, #1
 8005076:	d10c      	bne.n	8005092 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe fe2f 	bl	8003ce0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2203      	movs	r2, #3
 8005088:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800508a:	f7fe fc59 	bl	8003940 <HAL_GetTick>
 800508e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005090:	e029      	b.n	80050e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	f043 0210 	orr.w	r2, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a2:	f043 0201 	orr.w	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e023      	b.n	80050f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050ae:	f7fe fc47 	bl	8003940 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d914      	bls.n	80050e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00d      	beq.n	80050e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	f043 0210 	orr.w	r2, r3, #16
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050da:	f043 0201 	orr.w	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e007      	b.n	80050f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1dc      	bne.n	80050ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005114:	2b00      	cmp	r3, #0
 8005116:	d14b      	bne.n	80051b0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d021      	beq.n	8005176 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe fcce 	bl	8003ad8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d032      	beq.n	80051a8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d12b      	bne.n	80051a8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d11f      	bne.n	80051a8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	f043 0201 	orr.w	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	659a      	str	r2, [r3, #88]	; 0x58
 8005174:	e018      	b.n	80051a8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d111      	bne.n	80051a8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005188:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	f043 0201 	orr.w	r2, r3, #1
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7fd fe21 	bl	8002df0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80051ae:	e00e      	b.n	80051ce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7fd fe31 	bl	8002e24 <HAL_ADC_ErrorCallback>
}
 80051c2:	e004      	b.n	80051ce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff f9fc 	bl	80045e2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051ea:	bf00      	nop
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005204:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005210:	f043 0204 	orr.w	r2, r3, #4
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7fd fe03 	bl	8002e24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800521e:	bf00      	nop
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <LL_ADC_StartCalibration>:
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005242:	4313      	orrs	r3, r2
 8005244:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	609a      	str	r2, [r3, #8]
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_ADC_IsCalibrationOnGoing>:
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800526c:	d101      	bne.n	8005272 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_ADCEx_Calibration_Start+0x1c>
 8005298:	2302      	movs	r3, #2
 800529a:	e04d      	b.n	8005338 <HAL_ADCEx_Calibration_Start+0xb8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff fecb 	bl	8005040 <ADC_Disable>
 80052aa:	4603      	mov	r3, r0
 80052ac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d136      	bne.n	8005322 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80052bc:	f023 0302 	bic.w	r3, r3, #2
 80052c0:	f043 0202 	orr.w	r2, r3, #2
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff ffa9 	bl	8005226 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80052d4:	e014      	b.n	8005300 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	3301      	adds	r3, #1
 80052da:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80052e2:	d30d      	bcc.n	8005300 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e8:	f023 0312 	bic.w	r3, r3, #18
 80052ec:	f043 0210 	orr.w	r2, r3, #16
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e01b      	b.n	8005338 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ffa7 	bl	8005258 <LL_ADC_IsCalibrationOnGoing>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e2      	bne.n	80052d6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	f023 0303 	bic.w	r3, r3, #3
 8005318:	f043 0201 	orr.w	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	659a      	str	r2, [r3, #88]	; 0x58
 8005320:	e005      	b.n	800532e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	f043 0210 	orr.w	r2, r3, #16
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053b4:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <__NVIC_SetPriorityGrouping+0x44>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053c0:	4013      	ands	r3, r2
 80053c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053d6:	4a04      	ldr	r2, [pc, #16]	; (80053e8 <__NVIC_SetPriorityGrouping+0x44>)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	60d3      	str	r3, [r2, #12]
}
 80053dc:	bf00      	nop
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	e000ed00 	.word	0xe000ed00

080053ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053f0:	4b04      	ldr	r3, [pc, #16]	; (8005404 <__NVIC_GetPriorityGrouping+0x18>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	0a1b      	lsrs	r3, r3, #8
 80053f6:	f003 0307 	and.w	r3, r3, #7
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	e000ed00 	.word	0xe000ed00

08005408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005416:	2b00      	cmp	r3, #0
 8005418:	db0b      	blt.n	8005432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	f003 021f 	and.w	r2, r3, #31
 8005420:	4907      	ldr	r1, [pc, #28]	; (8005440 <__NVIC_EnableIRQ+0x38>)
 8005422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2001      	movs	r0, #1
 800542a:	fa00 f202 	lsl.w	r2, r0, r2
 800542e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	e000e100 	.word	0xe000e100

08005444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	6039      	str	r1, [r7, #0]
 800544e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005454:	2b00      	cmp	r3, #0
 8005456:	db0a      	blt.n	800546e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	490c      	ldr	r1, [pc, #48]	; (8005490 <__NVIC_SetPriority+0x4c>)
 800545e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005462:	0112      	lsls	r2, r2, #4
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	440b      	add	r3, r1
 8005468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800546c:	e00a      	b.n	8005484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	4908      	ldr	r1, [pc, #32]	; (8005494 <__NVIC_SetPriority+0x50>)
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	3b04      	subs	r3, #4
 800547c:	0112      	lsls	r2, r2, #4
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	440b      	add	r3, r1
 8005482:	761a      	strb	r2, [r3, #24]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	e000e100 	.word	0xe000e100
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005498:	b480      	push	{r7}
 800549a:	b089      	sub	sp, #36	; 0x24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f1c3 0307 	rsb	r3, r3, #7
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	bf28      	it	cs
 80054b6:	2304      	movcs	r3, #4
 80054b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3304      	adds	r3, #4
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d902      	bls.n	80054c8 <NVIC_EncodePriority+0x30>
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	3b03      	subs	r3, #3
 80054c6:	e000      	b.n	80054ca <NVIC_EncodePriority+0x32>
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054cc:	f04f 32ff 	mov.w	r2, #4294967295
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43da      	mvns	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	401a      	ands	r2, r3
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054e0:	f04f 31ff 	mov.w	r1, #4294967295
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ea:	43d9      	mvns	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f0:	4313      	orrs	r3, r2
         );
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3724      	adds	r7, #36	; 0x24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3b01      	subs	r3, #1
 800550c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005510:	d301      	bcc.n	8005516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005512:	2301      	movs	r3, #1
 8005514:	e00f      	b.n	8005536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005516:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <SysTick_Config+0x40>)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3b01      	subs	r3, #1
 800551c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800551e:	210f      	movs	r1, #15
 8005520:	f04f 30ff 	mov.w	r0, #4294967295
 8005524:	f7ff ff8e 	bl	8005444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <SysTick_Config+0x40>)
 800552a:	2200      	movs	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800552e:	4b04      	ldr	r3, [pc, #16]	; (8005540 <SysTick_Config+0x40>)
 8005530:	2207      	movs	r2, #7
 8005532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	e000e010 	.word	0xe000e010

08005544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff ff29 	bl	80053a4 <__NVIC_SetPriorityGrouping>
}
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b086      	sub	sp, #24
 800555e:	af00      	add	r7, sp, #0
 8005560:	4603      	mov	r3, r0
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
 8005566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800556c:	f7ff ff3e 	bl	80053ec <__NVIC_GetPriorityGrouping>
 8005570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	6978      	ldr	r0, [r7, #20]
 8005578:	f7ff ff8e 	bl	8005498 <NVIC_EncodePriority>
 800557c:	4602      	mov	r2, r0
 800557e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005582:	4611      	mov	r1, r2
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff ff5d 	bl	8005444 <__NVIC_SetPriority>
}
 800558a:	bf00      	nop
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	4603      	mov	r3, r0
 800559a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800559c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff ff31 	bl	8005408 <__NVIC_EnableIRQ>
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff ffa2 	bl	8005500 <SysTick_Config>
 80055bc:	4603      	mov	r3, r0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e098      	b.n	800570c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	4b4d      	ldr	r3, [pc, #308]	; (8005718 <HAL_DMA_Init+0x150>)
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d80f      	bhi.n	8005606 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	4b4b      	ldr	r3, [pc, #300]	; (800571c <HAL_DMA_Init+0x154>)
 80055ee:	4413      	add	r3, r2
 80055f0:	4a4b      	ldr	r2, [pc, #300]	; (8005720 <HAL_DMA_Init+0x158>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	091b      	lsrs	r3, r3, #4
 80055f8:	009a      	lsls	r2, r3, #2
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a48      	ldr	r2, [pc, #288]	; (8005724 <HAL_DMA_Init+0x15c>)
 8005602:	641a      	str	r2, [r3, #64]	; 0x40
 8005604:	e00e      	b.n	8005624 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	4b46      	ldr	r3, [pc, #280]	; (8005728 <HAL_DMA_Init+0x160>)
 800560e:	4413      	add	r3, r2
 8005610:	4a43      	ldr	r2, [pc, #268]	; (8005720 <HAL_DMA_Init+0x158>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	091b      	lsrs	r3, r3, #4
 8005618:	009a      	lsls	r2, r3, #2
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a42      	ldr	r2, [pc, #264]	; (800572c <HAL_DMA_Init+0x164>)
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800567e:	d039      	beq.n	80056f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	4a27      	ldr	r2, [pc, #156]	; (8005724 <HAL_DMA_Init+0x15c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d11a      	bne.n	80056c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800568a:	4b29      	ldr	r3, [pc, #164]	; (8005730 <HAL_DMA_Init+0x168>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	f003 031c 	and.w	r3, r3, #28
 8005696:	210f      	movs	r1, #15
 8005698:	fa01 f303 	lsl.w	r3, r1, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	4924      	ldr	r1, [pc, #144]	; (8005730 <HAL_DMA_Init+0x168>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80056a4:	4b22      	ldr	r3, [pc, #136]	; (8005730 <HAL_DMA_Init+0x168>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6859      	ldr	r1, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b0:	f003 031c 	and.w	r3, r3, #28
 80056b4:	fa01 f303 	lsl.w	r3, r1, r3
 80056b8:	491d      	ldr	r1, [pc, #116]	; (8005730 <HAL_DMA_Init+0x168>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]
 80056be:	e019      	b.n	80056f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80056c0:	4b1c      	ldr	r3, [pc, #112]	; (8005734 <HAL_DMA_Init+0x16c>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c8:	f003 031c 	and.w	r3, r3, #28
 80056cc:	210f      	movs	r1, #15
 80056ce:	fa01 f303 	lsl.w	r3, r1, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	4917      	ldr	r1, [pc, #92]	; (8005734 <HAL_DMA_Init+0x16c>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80056da:	4b16      	ldr	r3, [pc, #88]	; (8005734 <HAL_DMA_Init+0x16c>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6859      	ldr	r1, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	f003 031c 	and.w	r3, r3, #28
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	4911      	ldr	r1, [pc, #68]	; (8005734 <HAL_DMA_Init+0x16c>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	40020407 	.word	0x40020407
 800571c:	bffdfff8 	.word	0xbffdfff8
 8005720:	cccccccd 	.word	0xcccccccd
 8005724:	40020000 	.word	0x40020000
 8005728:	bffdfbf8 	.word	0xbffdfbf8
 800572c:	40020400 	.word	0x40020400
 8005730:	400200a8 	.word	0x400200a8
 8005734:	400204a8 	.word	0x400204a8

08005738 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_DMA_Start_IT+0x20>
 8005754:	2302      	movs	r3, #2
 8005756:	e04b      	b.n	80057f0 <HAL_DMA_Start_IT+0xb8>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d13a      	bne.n	80057e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f95f 	bl	8005a54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	2b00      	cmp	r3, #0
 800579c:	d008      	beq.n	80057b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 020e 	orr.w	r2, r2, #14
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	e00f      	b.n	80057d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0204 	bic.w	r2, r2, #4
 80057be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 020a 	orr.w	r2, r2, #10
 80057ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	e005      	b.n	80057ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
 80057ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d008      	beq.n	8005822 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2204      	movs	r2, #4
 8005814:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e022      	b.n	8005868 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 020e 	bic.w	r2, r2, #14
 8005830:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0201 	bic.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	f003 021c 	and.w	r2, r3, #28
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	2101      	movs	r1, #1
 8005850:	fa01 f202 	lsl.w	r2, r1, r2
 8005854:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005866:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d005      	beq.n	8005898 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2204      	movs	r2, #4
 8005890:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	73fb      	strb	r3, [r7, #15]
 8005896:	e029      	b.n	80058ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 020e 	bic.w	r2, r2, #14
 80058a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058bc:	f003 021c 	and.w	r2, r3, #28
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f202 	lsl.w	r2, r1, r2
 80058ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
    }
  }
  return status;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f003 031c 	and.w	r3, r3, #28
 8005916:	2204      	movs	r2, #4
 8005918:	409a      	lsls	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4013      	ands	r3, r2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d026      	beq.n	8005970 <HAL_DMA_IRQHandler+0x7a>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d021      	beq.n	8005970 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d107      	bne.n	800594a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0204 	bic.w	r2, r2, #4
 8005948:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594e:	f003 021c 	and.w	r2, r3, #28
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	2104      	movs	r1, #4
 8005958:	fa01 f202 	lsl.w	r2, r1, r2
 800595c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	2b00      	cmp	r3, #0
 8005964:	d071      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800596e:	e06c      	b.n	8005a4a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005974:	f003 031c 	and.w	r3, r3, #28
 8005978:	2202      	movs	r2, #2
 800597a:	409a      	lsls	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4013      	ands	r3, r2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d02e      	beq.n	80059e2 <HAL_DMA_IRQHandler+0xec>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d029      	beq.n	80059e2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 020a 	bic.w	r2, r2, #10
 80059aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b8:	f003 021c 	and.w	r2, r3, #28
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	2102      	movs	r1, #2
 80059c2:	fa01 f202 	lsl.w	r2, r1, r2
 80059c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d038      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80059e0:	e033      	b.n	8005a4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e6:	f003 031c 	and.w	r3, r3, #28
 80059ea:	2208      	movs	r2, #8
 80059ec:	409a      	lsls	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d02a      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x156>
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d025      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 020e 	bic.w	r2, r2, #14
 8005a0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a14:	f003 021c 	and.w	r2, r3, #28
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d004      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
}
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	f003 021c 	and.w	r2, r3, #28
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	2101      	movs	r1, #1
 8005a70:	fa01 f202 	lsl.w	r2, r1, r2
 8005a74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d108      	bne.n	8005a98 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a96:	e007      	b.n	8005aa8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	60da      	str	r2, [r3, #12]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ac2:	e154      	b.n	8005d6e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	2101      	movs	r1, #1
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 8146 	beq.w	8005d68 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d005      	beq.n	8005af4 <HAL_GPIO_Init+0x40>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d130      	bne.n	8005b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	2203      	movs	r2, #3
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	43db      	mvns	r3, r3
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43db      	mvns	r3, r3
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4013      	ands	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	091b      	lsrs	r3, r3, #4
 8005b40:	f003 0201 	and.w	r2, r3, #1
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d017      	beq.n	8005b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4013      	ands	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d123      	bne.n	8005be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	08da      	lsrs	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3208      	adds	r2, #8
 8005ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	220f      	movs	r2, #15
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	08da      	lsrs	r2, r3, #3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3208      	adds	r2, #8
 8005be0:	6939      	ldr	r1, [r7, #16]
 8005be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f003 0203 	and.w	r2, r3, #3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80a0 	beq.w	8005d68 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c28:	4b58      	ldr	r3, [pc, #352]	; (8005d8c <HAL_GPIO_Init+0x2d8>)
 8005c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2c:	4a57      	ldr	r2, [pc, #348]	; (8005d8c <HAL_GPIO_Init+0x2d8>)
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	6613      	str	r3, [r2, #96]	; 0x60
 8005c34:	4b55      	ldr	r3, [pc, #340]	; (8005d8c <HAL_GPIO_Init+0x2d8>)
 8005c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005c40:	4a53      	ldr	r2, [pc, #332]	; (8005d90 <HAL_GPIO_Init+0x2dc>)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	089b      	lsrs	r3, r3, #2
 8005c46:	3302      	adds	r3, #2
 8005c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f003 0303 	and.w	r3, r3, #3
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	220f      	movs	r2, #15
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4013      	ands	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c6a:	d019      	beq.n	8005ca0 <HAL_GPIO_Init+0x1ec>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a49      	ldr	r2, [pc, #292]	; (8005d94 <HAL_GPIO_Init+0x2e0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <HAL_GPIO_Init+0x1e8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a48      	ldr	r2, [pc, #288]	; (8005d98 <HAL_GPIO_Init+0x2e4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00d      	beq.n	8005c98 <HAL_GPIO_Init+0x1e4>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a47      	ldr	r2, [pc, #284]	; (8005d9c <HAL_GPIO_Init+0x2e8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <HAL_GPIO_Init+0x1e0>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a46      	ldr	r2, [pc, #280]	; (8005da0 <HAL_GPIO_Init+0x2ec>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d101      	bne.n	8005c90 <HAL_GPIO_Init+0x1dc>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	e008      	b.n	8005ca2 <HAL_GPIO_Init+0x1ee>
 8005c90:	2307      	movs	r3, #7
 8005c92:	e006      	b.n	8005ca2 <HAL_GPIO_Init+0x1ee>
 8005c94:	2303      	movs	r3, #3
 8005c96:	e004      	b.n	8005ca2 <HAL_GPIO_Init+0x1ee>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e002      	b.n	8005ca2 <HAL_GPIO_Init+0x1ee>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <HAL_GPIO_Init+0x1ee>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	f002 0203 	and.w	r2, r2, #3
 8005ca8:	0092      	lsls	r2, r2, #2
 8005caa:	4093      	lsls	r3, r2
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005cb2:	4937      	ldr	r1, [pc, #220]	; (8005d90 <HAL_GPIO_Init+0x2dc>)
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	089b      	lsrs	r3, r3, #2
 8005cb8:	3302      	adds	r3, #2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cc0:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <HAL_GPIO_Init+0x2f0>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ce4:	4a2f      	ldr	r2, [pc, #188]	; (8005da4 <HAL_GPIO_Init+0x2f0>)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005cea:	4b2e      	ldr	r3, [pc, #184]	; (8005da4 <HAL_GPIO_Init+0x2f0>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d0e:	4a25      	ldr	r2, [pc, #148]	; (8005da4 <HAL_GPIO_Init+0x2f0>)
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005d14:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <HAL_GPIO_Init+0x2f0>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4013      	ands	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d38:	4a1a      	ldr	r2, [pc, #104]	; (8005da4 <HAL_GPIO_Init+0x2f0>)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005d3e:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <HAL_GPIO_Init+0x2f0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	43db      	mvns	r3, r3
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d62:	4a10      	ldr	r2, [pc, #64]	; (8005da4 <HAL_GPIO_Init+0x2f0>)
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	fa22 f303 	lsr.w	r3, r2, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f47f aea3 	bne.w	8005ac4 <HAL_GPIO_Init+0x10>
  }
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	40010000 	.word	0x40010000
 8005d94:	48000400 	.word	0x48000400
 8005d98:	48000800 	.word	0x48000800
 8005d9c:	48000c00 	.word	0x48000c00
 8005da0:	48001000 	.word	0x48001000
 8005da4:	40010400 	.word	0x40010400

08005da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	807b      	strh	r3, [r7, #2]
 8005db4:	4613      	mov	r3, r2
 8005db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005db8:	787b      	ldrb	r3, [r7, #1]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005dc4:	e002      	b.n	8005dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dc6:	887a      	ldrh	r2, [r7, #2]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dea:	887a      	ldrh	r2, [r7, #2]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4013      	ands	r3, r2
 8005df0:	041a      	lsls	r2, r3, #16
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	43d9      	mvns	r1, r3
 8005df6:	887b      	ldrh	r3, [r7, #2]
 8005df8:	400b      	ands	r3, r1
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	619a      	str	r2, [r3, #24]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	4603      	mov	r3, r0
 8005e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005e16:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e18:	695a      	ldr	r2, [r3, #20]
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d006      	beq.n	8005e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e22:	4a05      	ldr	r2, [pc, #20]	; (8005e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e28:	88fb      	ldrh	r3, [r7, #6]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 f806 	bl	8005e3c <HAL_GPIO_EXTI_Callback>
  }
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40010400 	.word	0x40010400

08005e3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e081      	b.n	8005f68 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d106      	bne.n	8005e7e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7fd f959 	bl	8003130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2224      	movs	r2, #36	; 0x24
 8005e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ea2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eb2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d107      	bne.n	8005ecc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ec8:	609a      	str	r2, [r3, #8]
 8005eca:	e006      	b.n	8005eda <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ed8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d104      	bne.n	8005eec <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69d9      	ldr	r1, [r3, #28]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1a      	ldr	r2, [r3, #32]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0201 	orr.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	4608      	mov	r0, r1
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	817b      	strh	r3, [r7, #10]
 8005f82:	460b      	mov	r3, r1
 8005f84:	813b      	strh	r3, [r7, #8]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	f040 80f9 	bne.w	800618a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_I2C_Mem_Write+0x34>
 8005f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d105      	bne.n	8005fb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005faa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0ed      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_I2C_Mem_Write+0x4e>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e0e6      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fc6:	f7fd fcbb 	bl	8003940 <HAL_GetTick>
 8005fca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	2319      	movs	r3, #25
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f955 	bl	8006288 <I2C_WaitOnFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0d1      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2221      	movs	r2, #33	; 0x21
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2240      	movs	r2, #64	; 0x40
 8005ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a3a      	ldr	r2, [r7, #32]
 8006002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006010:	88f8      	ldrh	r0, [r7, #6]
 8006012:	893a      	ldrh	r2, [r7, #8]
 8006014:	8979      	ldrh	r1, [r7, #10]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	4603      	mov	r3, r0
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f8b9 	bl	8006198 <I2C_RequestMemoryWrite>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0a9      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	2bff      	cmp	r3, #255	; 0xff
 8006040:	d90e      	bls.n	8006060 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	22ff      	movs	r2, #255	; 0xff
 8006046:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604c:	b2da      	uxtb	r2, r3
 800604e:	8979      	ldrh	r1, [r7, #10]
 8006050:	2300      	movs	r3, #0
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fabd 	bl	80065d8 <I2C_TransferConfig>
 800605e:	e00f      	b.n	8006080 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	b2da      	uxtb	r2, r3
 8006070:	8979      	ldrh	r1, [r7, #10]
 8006072:	2300      	movs	r3, #0
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 faac 	bl	80065d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f93f 	bl	8006308 <I2C_WaitOnTXISFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e07b      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d034      	beq.n	8006138 <HAL_I2C_Mem_Write+0x1c8>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d130      	bne.n	8006138 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	2200      	movs	r2, #0
 80060de:	2180      	movs	r1, #128	; 0x80
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f8d1 	bl	8006288 <I2C_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e04d      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2bff      	cmp	r3, #255	; 0xff
 80060f8:	d90e      	bls.n	8006118 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	22ff      	movs	r2, #255	; 0xff
 80060fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006104:	b2da      	uxtb	r2, r3
 8006106:	8979      	ldrh	r1, [r7, #10]
 8006108:	2300      	movs	r3, #0
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fa61 	bl	80065d8 <I2C_TransferConfig>
 8006116:	e00f      	b.n	8006138 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006126:	b2da      	uxtb	r2, r3
 8006128:	8979      	ldrh	r1, [r7, #10]
 800612a:	2300      	movs	r3, #0
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fa50 	bl	80065d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d19e      	bne.n	8006080 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f91e 	bl	8006388 <I2C_WaitOnSTOPFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e01a      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2220      	movs	r2, #32
 800615c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6859      	ldr	r1, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_I2C_Mem_Write+0x224>)
 800616a:	400b      	ands	r3, r1
 800616c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	e000      	b.n	800618c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800618a:	2302      	movs	r3, #2
  }
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	fe00e800 	.word	0xfe00e800

08006198 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	817b      	strh	r3, [r7, #10]
 80061aa:	460b      	mov	r3, r1
 80061ac:	813b      	strh	r3, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	8979      	ldrh	r1, [r7, #10]
 80061b8:	4b20      	ldr	r3, [pc, #128]	; (800623c <I2C_RequestMemoryWrite+0xa4>)
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 fa09 	bl	80065d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	69b9      	ldr	r1, [r7, #24]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f89c 	bl	8006308 <I2C_WaitOnTXISFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e02c      	b.n	8006234 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d105      	bne.n	80061ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061e0:	893b      	ldrh	r3, [r7, #8]
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	629a      	str	r2, [r3, #40]	; 0x28
 80061ea:	e015      	b.n	8006218 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061ec:	893b      	ldrh	r3, [r7, #8]
 80061ee:	0a1b      	lsrs	r3, r3, #8
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	69b9      	ldr	r1, [r7, #24]
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f882 	bl	8006308 <I2C_WaitOnTXISFlagUntilTimeout>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e012      	b.n	8006234 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800620e:	893b      	ldrh	r3, [r7, #8]
 8006210:	b2da      	uxtb	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	2200      	movs	r2, #0
 8006220:	2180      	movs	r1, #128	; 0x80
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f830 	bl	8006288 <I2C_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	80002000 	.word	0x80002000

08006240 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b02      	cmp	r3, #2
 8006254:	d103      	bne.n	800625e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2200      	movs	r2, #0
 800625c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b01      	cmp	r3, #1
 800626a:	d007      	beq.n	800627c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	619a      	str	r2, [r3, #24]
  }
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	4613      	mov	r3, r2
 8006296:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006298:	e022      	b.n	80062e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d01e      	beq.n	80062e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a2:	f7fd fb4d 	bl	8003940 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d302      	bcc.n	80062b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d113      	bne.n	80062e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062bc:	f043 0220 	orr.w	r2, r3, #32
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e00f      	b.n	8006300 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	4013      	ands	r3, r2
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	bf0c      	ite	eq
 80062f0:	2301      	moveq	r3, #1
 80062f2:	2300      	movne	r3, #0
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	461a      	mov	r2, r3
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d0cd      	beq.n	800629a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006314:	e02c      	b.n	8006370 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	68b9      	ldr	r1, [r7, #8]
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 f870 	bl	8006400 <I2C_IsErrorOccurred>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e02a      	b.n	8006380 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d01e      	beq.n	8006370 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006332:	f7fd fb05 	bl	8003940 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	429a      	cmp	r2, r3
 8006340:	d302      	bcc.n	8006348 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d113      	bne.n	8006370 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634c:	f043 0220 	orr.w	r2, r3, #32
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e007      	b.n	8006380 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b02      	cmp	r3, #2
 800637c:	d1cb      	bne.n	8006316 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006394:	e028      	b.n	80063e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f830 	bl	8006400 <I2C_IsErrorOccurred>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e026      	b.n	80063f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063aa:	f7fd fac9 	bl	8003940 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d302      	bcc.n	80063c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d113      	bne.n	80063e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c4:	f043 0220 	orr.w	r2, r3, #32
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e007      	b.n	80063f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d1cf      	bne.n	8006396 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	; 0x28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	d075      	beq.n	8006518 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2210      	movs	r2, #16
 8006432:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006434:	e056      	b.n	80064e4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d052      	beq.n	80064e4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800643e:	f7fd fa7f 	bl	8003940 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	d302      	bcc.n	8006454 <I2C_IsErrorOccurred+0x54>
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d147      	bne.n	80064e4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800645e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006466:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006476:	d12e      	bne.n	80064d6 <I2C_IsErrorOccurred+0xd6>
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800647e:	d02a      	beq.n	80064d6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006480:	7cfb      	ldrb	r3, [r7, #19]
 8006482:	2b20      	cmp	r3, #32
 8006484:	d027      	beq.n	80064d6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006494:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006496:	f7fd fa53 	bl	8003940 <HAL_GetTick>
 800649a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800649c:	e01b      	b.n	80064d6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800649e:	f7fd fa4f 	bl	8003940 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b19      	cmp	r3, #25
 80064aa:	d914      	bls.n	80064d6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b0:	f043 0220 	orr.w	r2, r3, #32
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d1dc      	bne.n	800649e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d003      	beq.n	80064fa <I2C_IsErrorOccurred+0xfa>
 80064f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d09d      	beq.n	8006436 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80064fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d103      	bne.n	800650a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2220      	movs	r2, #32
 8006508:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	f043 0304 	orr.w	r3, r3, #4
 8006510:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	f043 0301 	orr.w	r3, r3, #1
 8006530:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800653a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	f043 0308 	orr.w	r3, r3, #8
 8006552:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800655c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	f043 0302 	orr.w	r3, r3, #2
 8006574:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800657e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800658a:	2b00      	cmp	r3, #0
 800658c:	d01c      	beq.n	80065c8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff fe56 	bl	8006240 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6859      	ldr	r1, [r3, #4]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <I2C_IsErrorOccurred+0x1d4>)
 80065a0:	400b      	ands	r3, r1
 80065a2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80065c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3728      	adds	r7, #40	; 0x28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	fe00e800 	.word	0xfe00e800

080065d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	607b      	str	r3, [r7, #4]
 80065e2:	460b      	mov	r3, r1
 80065e4:	817b      	strh	r3, [r7, #10]
 80065e6:	4613      	mov	r3, r2
 80065e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065ea:	897b      	ldrh	r3, [r7, #10]
 80065ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065f0:	7a7b      	ldrb	r3, [r7, #9]
 80065f2:	041b      	lsls	r3, r3, #16
 80065f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065f8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	4313      	orrs	r3, r2
 8006602:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006606:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	0d5b      	lsrs	r3, r3, #21
 8006612:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006616:	4b08      	ldr	r3, [pc, #32]	; (8006638 <I2C_TransferConfig+0x60>)
 8006618:	430b      	orrs	r3, r1
 800661a:	43db      	mvns	r3, r3
 800661c:	ea02 0103 	and.w	r1, r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	03ff63ff 	.word	0x03ff63ff

0800663c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b20      	cmp	r3, #32
 8006650:	d138      	bne.n	80066c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800665c:	2302      	movs	r3, #2
 800665e:	e032      	b.n	80066c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2224      	movs	r2, #36	; 0x24
 800666c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0201 	bic.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800668e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6819      	ldr	r1, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e000      	b.n	80066c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066c4:	2302      	movs	r3, #2
  }
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b085      	sub	sp, #20
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d139      	bne.n	800675c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e033      	b.n	800675e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2224      	movs	r2, #36	; 0x24
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0201 	bic.w	r2, r2, #1
 8006714:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006724:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0201 	orr.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	e000      	b.n	800675e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800675c:	2302      	movs	r3, #2
  }
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006770:	4b04      	ldr	r3, [pc, #16]	; (8006784 <HAL_PWREx_GetVoltageRange+0x18>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006778:	4618      	mov	r0, r3
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40007000 	.word	0x40007000

08006788 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006796:	d130      	bne.n	80067fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006798:	4b23      	ldr	r3, [pc, #140]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a4:	d038      	beq.n	8006818 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067a6:	4b20      	ldr	r3, [pc, #128]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067ae:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067b6:	4b1d      	ldr	r3, [pc, #116]	; (800682c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2232      	movs	r2, #50	; 0x32
 80067bc:	fb02 f303 	mul.w	r3, r2, r3
 80067c0:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80067c2:	fba2 2303 	umull	r2, r3, r2, r3
 80067c6:	0c9b      	lsrs	r3, r3, #18
 80067c8:	3301      	adds	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067cc:	e002      	b.n	80067d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067d4:	4b14      	ldr	r3, [pc, #80]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e0:	d102      	bne.n	80067e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f2      	bne.n	80067ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067e8:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f4:	d110      	bne.n	8006818 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e00f      	b.n	800681a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80067fa:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006806:	d007      	beq.n	8006818 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006808:	4b07      	ldr	r3, [pc, #28]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006810:	4a05      	ldr	r2, [pc, #20]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006816:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40007000 	.word	0x40007000
 800682c:	2000018c 	.word	0x2000018c
 8006830:	431bde83 	.word	0x431bde83

08006834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	f000 bc11 	b.w	800706a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006848:	4ba0      	ldr	r3, [pc, #640]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 030c 	and.w	r3, r3, #12
 8006850:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006852:	4b9e      	ldr	r3, [pc, #632]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80e4 	beq.w	8006a32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d007      	beq.n	8006880 <HAL_RCC_OscConfig+0x4c>
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b0c      	cmp	r3, #12
 8006874:	f040 808b 	bne.w	800698e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b01      	cmp	r3, #1
 800687c:	f040 8087 	bne.w	800698e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006880:	4b92      	ldr	r3, [pc, #584]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <HAL_RCC_OscConfig+0x64>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e3e8      	b.n	800706a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1a      	ldr	r2, [r3, #32]
 800689c:	4b8b      	ldr	r3, [pc, #556]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0308 	and.w	r3, r3, #8
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <HAL_RCC_OscConfig+0x7e>
 80068a8:	4b88      	ldr	r3, [pc, #544]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068b0:	e005      	b.n	80068be <HAL_RCC_OscConfig+0x8a>
 80068b2:	4b86      	ldr	r3, [pc, #536]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80068b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068be:	4293      	cmp	r3, r2
 80068c0:	d223      	bcs.n	800690a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fd7a 	bl	80073c0 <RCC_SetFlashLatencyFromMSIRange>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e3c9      	b.n	800706a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068d6:	4b7d      	ldr	r3, [pc, #500]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a7c      	ldr	r2, [pc, #496]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80068dc:	f043 0308 	orr.w	r3, r3, #8
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	4b7a      	ldr	r3, [pc, #488]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	4977      	ldr	r1, [pc, #476]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068f4:	4b75      	ldr	r3, [pc, #468]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	4972      	ldr	r1, [pc, #456]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006904:	4313      	orrs	r3, r2
 8006906:	604b      	str	r3, [r1, #4]
 8006908:	e025      	b.n	8006956 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800690a:	4b70      	ldr	r3, [pc, #448]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a6f      	ldr	r2, [pc, #444]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006910:	f043 0308 	orr.w	r3, r3, #8
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	4b6d      	ldr	r3, [pc, #436]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	496a      	ldr	r1, [pc, #424]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006924:	4313      	orrs	r3, r2
 8006926:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006928:	4b68      	ldr	r3, [pc, #416]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	4965      	ldr	r1, [pc, #404]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006938:	4313      	orrs	r3, r2
 800693a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fd3a 	bl	80073c0 <RCC_SetFlashLatencyFromMSIRange>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e389      	b.n	800706a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006956:	f000 fc6f 	bl	8007238 <HAL_RCC_GetSysClockFreq>
 800695a:	4602      	mov	r2, r0
 800695c:	4b5b      	ldr	r3, [pc, #364]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	091b      	lsrs	r3, r3, #4
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	495a      	ldr	r1, [pc, #360]	; (8006ad0 <HAL_RCC_OscConfig+0x29c>)
 8006968:	5ccb      	ldrb	r3, [r1, r3]
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	fa22 f303 	lsr.w	r3, r2, r3
 8006972:	4a58      	ldr	r2, [pc, #352]	; (8006ad4 <HAL_RCC_OscConfig+0x2a0>)
 8006974:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006976:	4b58      	ldr	r3, [pc, #352]	; (8006ad8 <HAL_RCC_OscConfig+0x2a4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7fc ff90 	bl	80038a0 <HAL_InitTick>
 8006980:	4603      	mov	r3, r0
 8006982:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d052      	beq.n	8006a30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	e36d      	b.n	800706a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d032      	beq.n	80069fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006996:	4b4d      	ldr	r3, [pc, #308]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a4c      	ldr	r2, [pc, #304]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 800699c:	f043 0301 	orr.w	r3, r3, #1
 80069a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069a2:	f7fc ffcd 	bl	8003940 <HAL_GetTick>
 80069a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069a8:	e008      	b.n	80069bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069aa:	f7fc ffc9 	bl	8003940 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e356      	b.n	800706a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069bc:	4b43      	ldr	r3, [pc, #268]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0f0      	beq.n	80069aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069c8:	4b40      	ldr	r3, [pc, #256]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a3f      	ldr	r2, [pc, #252]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80069ce:	f043 0308 	orr.w	r3, r3, #8
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	4b3d      	ldr	r3, [pc, #244]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	493a      	ldr	r1, [pc, #232]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069e6:	4b39      	ldr	r3, [pc, #228]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	4935      	ldr	r1, [pc, #212]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	604b      	str	r3, [r1, #4]
 80069fa:	e01a      	b.n	8006a32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80069fc:	4b33      	ldr	r3, [pc, #204]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a32      	ldr	r2, [pc, #200]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006a02:	f023 0301 	bic.w	r3, r3, #1
 8006a06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a08:	f7fc ff9a 	bl	8003940 <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a0e:	e008      	b.n	8006a22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a10:	f7fc ff96 	bl	8003940 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e323      	b.n	800706a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a22:	4b2a      	ldr	r3, [pc, #168]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f0      	bne.n	8006a10 <HAL_RCC_OscConfig+0x1dc>
 8006a2e:	e000      	b.n	8006a32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d073      	beq.n	8006b26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d005      	beq.n	8006a50 <HAL_RCC_OscConfig+0x21c>
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b0c      	cmp	r3, #12
 8006a48:	d10e      	bne.n	8006a68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d10b      	bne.n	8006a68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a50:	4b1e      	ldr	r3, [pc, #120]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d063      	beq.n	8006b24 <HAL_RCC_OscConfig+0x2f0>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d15f      	bne.n	8006b24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e300      	b.n	800706a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a70:	d106      	bne.n	8006a80 <HAL_RCC_OscConfig+0x24c>
 8006a72:	4b16      	ldr	r3, [pc, #88]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a15      	ldr	r2, [pc, #84]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e01d      	b.n	8006abc <HAL_RCC_OscConfig+0x288>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x270>
 8006a8a:	4b10      	ldr	r3, [pc, #64]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a0f      	ldr	r2, [pc, #60]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a0c      	ldr	r2, [pc, #48]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	e00b      	b.n	8006abc <HAL_RCC_OscConfig+0x288>
 8006aa4:	4b09      	ldr	r3, [pc, #36]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a08      	ldr	r2, [pc, #32]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	4b06      	ldr	r3, [pc, #24]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a05      	ldr	r2, [pc, #20]	; (8006acc <HAL_RCC_OscConfig+0x298>)
 8006ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d01b      	beq.n	8006afc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac4:	f7fc ff3c 	bl	8003940 <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aca:	e010      	b.n	8006aee <HAL_RCC_OscConfig+0x2ba>
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	0800cb8c 	.word	0x0800cb8c
 8006ad4:	2000018c 	.word	0x2000018c
 8006ad8:	20000190 	.word	0x20000190
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006adc:	f7fc ff30 	bl	8003940 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b64      	cmp	r3, #100	; 0x64
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e2bd      	b.n	800706a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aee:	4baf      	ldr	r3, [pc, #700]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0f0      	beq.n	8006adc <HAL_RCC_OscConfig+0x2a8>
 8006afa:	e014      	b.n	8006b26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afc:	f7fc ff20 	bl	8003940 <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b04:	f7fc ff1c 	bl	8003940 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b64      	cmp	r3, #100	; 0x64
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e2a9      	b.n	800706a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b16:	4ba5      	ldr	r3, [pc, #660]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f0      	bne.n	8006b04 <HAL_RCC_OscConfig+0x2d0>
 8006b22:	e000      	b.n	8006b26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d060      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d005      	beq.n	8006b44 <HAL_RCC_OscConfig+0x310>
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b0c      	cmp	r3, #12
 8006b3c:	d119      	bne.n	8006b72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d116      	bne.n	8006b72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b44:	4b99      	ldr	r3, [pc, #612]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d005      	beq.n	8006b5c <HAL_RCC_OscConfig+0x328>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e286      	b.n	800706a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b5c:	4b93      	ldr	r3, [pc, #588]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	061b      	lsls	r3, r3, #24
 8006b6a:	4990      	ldr	r1, [pc, #576]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b70:	e040      	b.n	8006bf4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d023      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b7a:	4b8c      	ldr	r3, [pc, #560]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a8b      	ldr	r2, [pc, #556]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b86:	f7fc fedb 	bl	8003940 <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b8e:	f7fc fed7 	bl	8003940 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e264      	b.n	800706a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ba0:	4b82      	ldr	r3, [pc, #520]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0f0      	beq.n	8006b8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bac:	4b7f      	ldr	r3, [pc, #508]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	061b      	lsls	r3, r3, #24
 8006bba:	497c      	ldr	r1, [pc, #496]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	604b      	str	r3, [r1, #4]
 8006bc0:	e018      	b.n	8006bf4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bc2:	4b7a      	ldr	r3, [pc, #488]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a79      	ldr	r2, [pc, #484]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bce:	f7fc feb7 	bl	8003940 <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bd6:	f7fc feb3 	bl	8003940 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e240      	b.n	800706a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006be8:	4b70      	ldr	r3, [pc, #448]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f0      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d03c      	beq.n	8006c7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01c      	beq.n	8006c42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c08:	4b68      	ldr	r3, [pc, #416]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c0e:	4a67      	ldr	r2, [pc, #412]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006c10:	f043 0301 	orr.w	r3, r3, #1
 8006c14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c18:	f7fc fe92 	bl	8003940 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c20:	f7fc fe8e 	bl	8003940 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e21b      	b.n	800706a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c32:	4b5e      	ldr	r3, [pc, #376]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0ef      	beq.n	8006c20 <HAL_RCC_OscConfig+0x3ec>
 8006c40:	e01b      	b.n	8006c7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c42:	4b5a      	ldr	r3, [pc, #360]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c48:	4a58      	ldr	r2, [pc, #352]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c52:	f7fc fe75 	bl	8003940 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c5a:	f7fc fe71 	bl	8003940 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e1fe      	b.n	800706a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c6c:	4b4f      	ldr	r3, [pc, #316]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1ef      	bne.n	8006c5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80a6 	beq.w	8006dd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006c8c:	4b47      	ldr	r3, [pc, #284]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10d      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c98:	4b44      	ldr	r3, [pc, #272]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9c:	4a43      	ldr	r2, [pc, #268]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8006ca4:	4b41      	ldr	r3, [pc, #260]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cb4:	4b3e      	ldr	r3, [pc, #248]	; (8006db0 <HAL_RCC_OscConfig+0x57c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d118      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cc0:	4b3b      	ldr	r3, [pc, #236]	; (8006db0 <HAL_RCC_OscConfig+0x57c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a3a      	ldr	r2, [pc, #232]	; (8006db0 <HAL_RCC_OscConfig+0x57c>)
 8006cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ccc:	f7fc fe38 	bl	8003940 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cd4:	f7fc fe34 	bl	8003940 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e1c1      	b.n	800706a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ce6:	4b32      	ldr	r3, [pc, #200]	; (8006db0 <HAL_RCC_OscConfig+0x57c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0f0      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d108      	bne.n	8006d0c <HAL_RCC_OscConfig+0x4d8>
 8006cfa:	4b2c      	ldr	r3, [pc, #176]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d00:	4a2a      	ldr	r2, [pc, #168]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006d02:	f043 0301 	orr.w	r3, r3, #1
 8006d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d0a:	e024      	b.n	8006d56 <HAL_RCC_OscConfig+0x522>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	2b05      	cmp	r3, #5
 8006d12:	d110      	bne.n	8006d36 <HAL_RCC_OscConfig+0x502>
 8006d14:	4b25      	ldr	r3, [pc, #148]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1a:	4a24      	ldr	r2, [pc, #144]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006d1c:	f043 0304 	orr.w	r3, r3, #4
 8006d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d24:	4b21      	ldr	r3, [pc, #132]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2a:	4a20      	ldr	r2, [pc, #128]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006d2c:	f043 0301 	orr.w	r3, r3, #1
 8006d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d34:	e00f      	b.n	8006d56 <HAL_RCC_OscConfig+0x522>
 8006d36:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3c:	4a1b      	ldr	r2, [pc, #108]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006d3e:	f023 0301 	bic.w	r3, r3, #1
 8006d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d46:	4b19      	ldr	r3, [pc, #100]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4c:	4a17      	ldr	r2, [pc, #92]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006d4e:	f023 0304 	bic.w	r3, r3, #4
 8006d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5e:	f7fc fdef 	bl	8003940 <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d64:	e00a      	b.n	8006d7c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d66:	f7fc fdeb 	bl	8003940 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e176      	b.n	800706a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <HAL_RCC_OscConfig+0x578>)
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0ed      	beq.n	8006d66 <HAL_RCC_OscConfig+0x532>
 8006d8a:	e01a      	b.n	8006dc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8c:	f7fc fdd8 	bl	8003940 <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d92:	e00f      	b.n	8006db4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d94:	f7fc fdd4 	bl	8003940 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d906      	bls.n	8006db4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e15f      	b.n	800706a <HAL_RCC_OscConfig+0x836>
 8006daa:	bf00      	nop
 8006dac:	40021000 	.word	0x40021000
 8006db0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006db4:	4baa      	ldr	r3, [pc, #680]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e8      	bne.n	8006d94 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dc2:	7ffb      	ldrb	r3, [r7, #31]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d105      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dc8:	4ba5      	ldr	r3, [pc, #660]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dcc:	4aa4      	ldr	r2, [pc, #656]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d03c      	beq.n	8006e5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01c      	beq.n	8006e22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006de8:	4b9d      	ldr	r3, [pc, #628]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dee:	4a9c      	ldr	r2, [pc, #624]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006df0:	f043 0301 	orr.w	r3, r3, #1
 8006df4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df8:	f7fc fda2 	bl	8003940 <HAL_GetTick>
 8006dfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e00:	f7fc fd9e 	bl	8003940 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e12b      	b.n	800706a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e12:	4b93      	ldr	r3, [pc, #588]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0ef      	beq.n	8006e00 <HAL_RCC_OscConfig+0x5cc>
 8006e20:	e01b      	b.n	8006e5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e22:	4b8f      	ldr	r3, [pc, #572]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e28:	4a8d      	ldr	r2, [pc, #564]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006e2a:	f023 0301 	bic.w	r3, r3, #1
 8006e2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e32:	f7fc fd85 	bl	8003940 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e3a:	f7fc fd81 	bl	8003940 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e10e      	b.n	800706a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e4c:	4b84      	ldr	r3, [pc, #528]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1ef      	bne.n	8006e3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 8102 	beq.w	8007068 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	f040 80c5 	bne.w	8006ff8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006e6e:	4b7c      	ldr	r3, [pc, #496]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f003 0203 	and.w	r2, r3, #3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d12c      	bne.n	8006edc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d123      	bne.n	8006edc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d11b      	bne.n	8006edc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d113      	bne.n	8006edc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d109      	bne.n	8006edc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	085b      	lsrs	r3, r3, #1
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d067      	beq.n	8006fac <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b0c      	cmp	r3, #12
 8006ee0:	d062      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ee2:	4b5f      	ldr	r3, [pc, #380]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e0bb      	b.n	800706a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ef2:	4b5b      	ldr	r3, [pc, #364]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a5a      	ldr	r2, [pc, #360]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006efc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006efe:	f7fc fd1f 	bl	8003940 <HAL_GetTick>
 8006f02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f04:	e008      	b.n	8006f18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f06:	f7fc fd1b 	bl	8003940 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e0a8      	b.n	800706a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f18:	4b51      	ldr	r3, [pc, #324]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1f0      	bne.n	8006f06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f24:	4b4e      	ldr	r3, [pc, #312]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	4b4e      	ldr	r3, [pc, #312]	; (8007064 <HAL_RCC_OscConfig+0x830>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f34:	3a01      	subs	r2, #1
 8006f36:	0112      	lsls	r2, r2, #4
 8006f38:	4311      	orrs	r1, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f3e:	0212      	lsls	r2, r2, #8
 8006f40:	4311      	orrs	r1, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f46:	0852      	lsrs	r2, r2, #1
 8006f48:	3a01      	subs	r2, #1
 8006f4a:	0552      	lsls	r2, r2, #21
 8006f4c:	4311      	orrs	r1, r2
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006f52:	0852      	lsrs	r2, r2, #1
 8006f54:	3a01      	subs	r2, #1
 8006f56:	0652      	lsls	r2, r2, #25
 8006f58:	4311      	orrs	r1, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f5e:	06d2      	lsls	r2, r2, #27
 8006f60:	430a      	orrs	r2, r1
 8006f62:	493f      	ldr	r1, [pc, #252]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006f68:	4b3d      	ldr	r3, [pc, #244]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a3c      	ldr	r2, [pc, #240]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f74:	4b3a      	ldr	r3, [pc, #232]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	4a39      	ldr	r2, [pc, #228]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f80:	f7fc fcde 	bl	8003940 <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f88:	f7fc fcda 	bl	8003940 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e067      	b.n	800706a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f9a:	4b31      	ldr	r3, [pc, #196]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f0      	beq.n	8006f88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fa6:	e05f      	b.n	8007068 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e05e      	b.n	800706a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fac:	4b2c      	ldr	r3, [pc, #176]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d157      	bne.n	8007068 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006fb8:	4b29      	ldr	r3, [pc, #164]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a28      	ldr	r2, [pc, #160]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fc4:	4b26      	ldr	r3, [pc, #152]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	4a25      	ldr	r2, [pc, #148]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006fd0:	f7fc fcb6 	bl	8003940 <HAL_GetTick>
 8006fd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd8:	f7fc fcb2 	bl	8003940 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e03f      	b.n	800706a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fea:	4b1d      	ldr	r3, [pc, #116]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0f0      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x7a4>
 8006ff6:	e037      	b.n	8007068 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b0c      	cmp	r3, #12
 8006ffc:	d02d      	beq.n	800705a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ffe:	4b18      	ldr	r3, [pc, #96]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a17      	ldr	r2, [pc, #92]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8007004:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007008:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800700a:	4b15      	ldr	r3, [pc, #84]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d105      	bne.n	8007022 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007016:	4b12      	ldr	r3, [pc, #72]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	4a11      	ldr	r2, [pc, #68]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 800701c:	f023 0303 	bic.w	r3, r3, #3
 8007020:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	4a0e      	ldr	r2, [pc, #56]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 8007028:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800702c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007030:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007032:	f7fc fc85 	bl	8003940 <HAL_GetTick>
 8007036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007038:	e008      	b.n	800704c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800703a:	f7fc fc81 	bl	8003940 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b02      	cmp	r3, #2
 8007046:	d901      	bls.n	800704c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e00e      	b.n	800706a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800704c:	4b04      	ldr	r3, [pc, #16]	; (8007060 <HAL_RCC_OscConfig+0x82c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1f0      	bne.n	800703a <HAL_RCC_OscConfig+0x806>
 8007058:	e006      	b.n	8007068 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e005      	b.n	800706a <HAL_RCC_OscConfig+0x836>
 800705e:	bf00      	nop
 8007060:	40021000 	.word	0x40021000
 8007064:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3720      	adds	r7, #32
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop

08007074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e0c8      	b.n	800721a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007088:	4b66      	ldr	r3, [pc, #408]	; (8007224 <HAL_RCC_ClockConfig+0x1b0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d910      	bls.n	80070b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007096:	4b63      	ldr	r3, [pc, #396]	; (8007224 <HAL_RCC_ClockConfig+0x1b0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f023 0207 	bic.w	r2, r3, #7
 800709e:	4961      	ldr	r1, [pc, #388]	; (8007224 <HAL_RCC_ClockConfig+0x1b0>)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070a6:	4b5f      	ldr	r3, [pc, #380]	; (8007224 <HAL_RCC_ClockConfig+0x1b0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d001      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e0b0      	b.n	800721a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d04c      	beq.n	800715e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d107      	bne.n	80070dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070cc:	4b56      	ldr	r3, [pc, #344]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d121      	bne.n	800711c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e09e      	b.n	800721a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d107      	bne.n	80070f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070e4:	4b50      	ldr	r3, [pc, #320]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d115      	bne.n	800711c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e092      	b.n	800721a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d107      	bne.n	800710c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070fc:	4b4a      	ldr	r3, [pc, #296]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d109      	bne.n	800711c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e086      	b.n	800721a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800710c:	4b46      	ldr	r3, [pc, #280]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e07e      	b.n	800721a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800711c:	4b42      	ldr	r3, [pc, #264]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f023 0203 	bic.w	r2, r3, #3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	493f      	ldr	r1, [pc, #252]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 800712a:	4313      	orrs	r3, r2
 800712c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800712e:	f7fc fc07 	bl	8003940 <HAL_GetTick>
 8007132:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007134:	e00a      	b.n	800714c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007136:	f7fc fc03 	bl	8003940 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	f241 3288 	movw	r2, #5000	; 0x1388
 8007144:	4293      	cmp	r3, r2
 8007146:	d901      	bls.n	800714c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e066      	b.n	800721a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714c:	4b36      	ldr	r3, [pc, #216]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 020c 	and.w	r2, r3, #12
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	429a      	cmp	r2, r3
 800715c:	d1eb      	bne.n	8007136 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d008      	beq.n	800717c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800716a:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	492c      	ldr	r1, [pc, #176]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 8007178:	4313      	orrs	r3, r2
 800717a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800717c:	4b29      	ldr	r3, [pc, #164]	; (8007224 <HAL_RCC_ClockConfig+0x1b0>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d210      	bcs.n	80071ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718a:	4b26      	ldr	r3, [pc, #152]	; (8007224 <HAL_RCC_ClockConfig+0x1b0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f023 0207 	bic.w	r2, r3, #7
 8007192:	4924      	ldr	r1, [pc, #144]	; (8007224 <HAL_RCC_ClockConfig+0x1b0>)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	4313      	orrs	r3, r2
 8007198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800719a:	4b22      	ldr	r3, [pc, #136]	; (8007224 <HAL_RCC_ClockConfig+0x1b0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d001      	beq.n	80071ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e036      	b.n	800721a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071b8:	4b1b      	ldr	r3, [pc, #108]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	4918      	ldr	r1, [pc, #96]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071d6:	4b14      	ldr	r3, [pc, #80]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	4910      	ldr	r1, [pc, #64]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80071ea:	f000 f825 	bl	8007238 <HAL_RCC_GetSysClockFreq>
 80071ee:	4602      	mov	r2, r0
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <HAL_RCC_ClockConfig+0x1b4>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	490c      	ldr	r1, [pc, #48]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 80071fc:	5ccb      	ldrb	r3, [r1, r3]
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	fa22 f303 	lsr.w	r3, r2, r3
 8007206:	4a0a      	ldr	r2, [pc, #40]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800720a:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <HAL_RCC_ClockConfig+0x1c0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4618      	mov	r0, r3
 8007210:	f7fc fb46 	bl	80038a0 <HAL_InitTick>
 8007214:	4603      	mov	r3, r0
 8007216:	72fb      	strb	r3, [r7, #11]

  return status;
 8007218:	7afb      	ldrb	r3, [r7, #11]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	40022000 	.word	0x40022000
 8007228:	40021000 	.word	0x40021000
 800722c:	0800cb8c 	.word	0x0800cb8c
 8007230:	2000018c 	.word	0x2000018c
 8007234:	20000190 	.word	0x20000190

08007238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007238:	b480      	push	{r7}
 800723a:	b089      	sub	sp, #36	; 0x24
 800723c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	61fb      	str	r3, [r7, #28]
 8007242:	2300      	movs	r3, #0
 8007244:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007246:	4b3e      	ldr	r3, [pc, #248]	; (8007340 <HAL_RCC_GetSysClockFreq+0x108>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 030c 	and.w	r3, r3, #12
 800724e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007250:	4b3b      	ldr	r3, [pc, #236]	; (8007340 <HAL_RCC_GetSysClockFreq+0x108>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <HAL_RCC_GetSysClockFreq+0x34>
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	2b0c      	cmp	r3, #12
 8007264:	d121      	bne.n	80072aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d11e      	bne.n	80072aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800726c:	4b34      	ldr	r3, [pc, #208]	; (8007340 <HAL_RCC_GetSysClockFreq+0x108>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0308 	and.w	r3, r3, #8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d107      	bne.n	8007288 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007278:	4b31      	ldr	r3, [pc, #196]	; (8007340 <HAL_RCC_GetSysClockFreq+0x108>)
 800727a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800727e:	0a1b      	lsrs	r3, r3, #8
 8007280:	f003 030f 	and.w	r3, r3, #15
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	e005      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007288:	4b2d      	ldr	r3, [pc, #180]	; (8007340 <HAL_RCC_GetSysClockFreq+0x108>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	091b      	lsrs	r3, r3, #4
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007294:	4a2b      	ldr	r2, [pc, #172]	; (8007344 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800729c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10d      	bne.n	80072c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072a8:	e00a      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d102      	bne.n	80072b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072b0:	4b25      	ldr	r3, [pc, #148]	; (8007348 <HAL_RCC_GetSysClockFreq+0x110>)
 80072b2:	61bb      	str	r3, [r7, #24]
 80072b4:	e004      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d101      	bne.n	80072c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072bc:	4b23      	ldr	r3, [pc, #140]	; (800734c <HAL_RCC_GetSysClockFreq+0x114>)
 80072be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2b0c      	cmp	r3, #12
 80072c4:	d134      	bne.n	8007330 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072c6:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <HAL_RCC_GetSysClockFreq+0x108>)
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d003      	beq.n	80072de <HAL_RCC_GetSysClockFreq+0xa6>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d003      	beq.n	80072e4 <HAL_RCC_GetSysClockFreq+0xac>
 80072dc:	e005      	b.n	80072ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80072de:	4b1a      	ldr	r3, [pc, #104]	; (8007348 <HAL_RCC_GetSysClockFreq+0x110>)
 80072e0:	617b      	str	r3, [r7, #20]
      break;
 80072e2:	e005      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80072e4:	4b19      	ldr	r3, [pc, #100]	; (800734c <HAL_RCC_GetSysClockFreq+0x114>)
 80072e6:	617b      	str	r3, [r7, #20]
      break;
 80072e8:	e002      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	617b      	str	r3, [r7, #20]
      break;
 80072ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072f0:	4b13      	ldr	r3, [pc, #76]	; (8007340 <HAL_RCC_GetSysClockFreq+0x108>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	091b      	lsrs	r3, r3, #4
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	3301      	adds	r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80072fe:	4b10      	ldr	r3, [pc, #64]	; (8007340 <HAL_RCC_GetSysClockFreq+0x108>)
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	0a1b      	lsrs	r3, r3, #8
 8007304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	fb02 f203 	mul.w	r2, r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	fbb2 f3f3 	udiv	r3, r2, r3
 8007314:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007316:	4b0a      	ldr	r3, [pc, #40]	; (8007340 <HAL_RCC_GetSysClockFreq+0x108>)
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	0e5b      	lsrs	r3, r3, #25
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	3301      	adds	r3, #1
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	fbb2 f3f3 	udiv	r3, r2, r3
 800732e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007330:	69bb      	ldr	r3, [r7, #24]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3724      	adds	r7, #36	; 0x24
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40021000 	.word	0x40021000
 8007344:	0800cba4 	.word	0x0800cba4
 8007348:	00f42400 	.word	0x00f42400
 800734c:	007a1200 	.word	0x007a1200

08007350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007354:	4b03      	ldr	r3, [pc, #12]	; (8007364 <HAL_RCC_GetHCLKFreq+0x14>)
 8007356:	681b      	ldr	r3, [r3, #0]
}
 8007358:	4618      	mov	r0, r3
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	2000018c 	.word	0x2000018c

08007368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800736c:	f7ff fff0 	bl	8007350 <HAL_RCC_GetHCLKFreq>
 8007370:	4602      	mov	r2, r0
 8007372:	4b06      	ldr	r3, [pc, #24]	; (800738c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	0a1b      	lsrs	r3, r3, #8
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	4904      	ldr	r1, [pc, #16]	; (8007390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800737e:	5ccb      	ldrb	r3, [r1, r3]
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007388:	4618      	mov	r0, r3
 800738a:	bd80      	pop	{r7, pc}
 800738c:	40021000 	.word	0x40021000
 8007390:	0800cb9c 	.word	0x0800cb9c

08007394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007398:	f7ff ffda 	bl	8007350 <HAL_RCC_GetHCLKFreq>
 800739c:	4602      	mov	r2, r0
 800739e:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	0adb      	lsrs	r3, r3, #11
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	4904      	ldr	r1, [pc, #16]	; (80073bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80073aa:	5ccb      	ldrb	r3, [r1, r3]
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40021000 	.word	0x40021000
 80073bc:	0800cb9c 	.word	0x0800cb9c

080073c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80073c8:	2300      	movs	r3, #0
 80073ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80073cc:	4b2a      	ldr	r3, [pc, #168]	; (8007478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80073d8:	f7ff f9c8 	bl	800676c <HAL_PWREx_GetVoltageRange>
 80073dc:	6178      	str	r0, [r7, #20]
 80073de:	e014      	b.n	800740a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80073e0:	4b25      	ldr	r3, [pc, #148]	; (8007478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e4:	4a24      	ldr	r2, [pc, #144]	; (8007478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ea:	6593      	str	r3, [r2, #88]	; 0x58
 80073ec:	4b22      	ldr	r3, [pc, #136]	; (8007478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80073f8:	f7ff f9b8 	bl	800676c <HAL_PWREx_GetVoltageRange>
 80073fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80073fe:	4b1e      	ldr	r3, [pc, #120]	; (8007478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007402:	4a1d      	ldr	r2, [pc, #116]	; (8007478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007408:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007410:	d10b      	bne.n	800742a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b80      	cmp	r3, #128	; 0x80
 8007416:	d919      	bls.n	800744c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2ba0      	cmp	r3, #160	; 0xa0
 800741c:	d902      	bls.n	8007424 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800741e:	2302      	movs	r3, #2
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	e013      	b.n	800744c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007424:	2301      	movs	r3, #1
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	e010      	b.n	800744c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b80      	cmp	r3, #128	; 0x80
 800742e:	d902      	bls.n	8007436 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007430:	2303      	movs	r3, #3
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	e00a      	b.n	800744c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d102      	bne.n	8007442 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800743c:	2302      	movs	r3, #2
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	e004      	b.n	800744c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b70      	cmp	r3, #112	; 0x70
 8007446:	d101      	bne.n	800744c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007448:	2301      	movs	r3, #1
 800744a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800744c:	4b0b      	ldr	r3, [pc, #44]	; (800747c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f023 0207 	bic.w	r2, r3, #7
 8007454:	4909      	ldr	r1, [pc, #36]	; (800747c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800745c:	4b07      	ldr	r3, [pc, #28]	; (800747c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	429a      	cmp	r2, r3
 8007468:	d001      	beq.n	800746e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	40021000 	.word	0x40021000
 800747c:	40022000 	.word	0x40022000

08007480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007488:	2300      	movs	r3, #0
 800748a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800748c:	2300      	movs	r3, #0
 800748e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007498:	2b00      	cmp	r3, #0
 800749a:	d031      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074a4:	d01a      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80074a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074aa:	d814      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d009      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80074b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074b4:	d10f      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80074b6:	4b5d      	ldr	r3, [pc, #372]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	4a5c      	ldr	r2, [pc, #368]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074c2:	e00c      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3304      	adds	r3, #4
 80074c8:	2100      	movs	r1, #0
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fa44 	bl	8007958 <RCCEx_PLLSAI1_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074d4:	e003      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	74fb      	strb	r3, [r7, #19]
      break;
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80074dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074de:	7cfb      	ldrb	r3, [r7, #19]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10b      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074e4:	4b51      	ldr	r3, [pc, #324]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f2:	494e      	ldr	r1, [pc, #312]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80074fa:	e001      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fc:	7cfb      	ldrb	r3, [r7, #19]
 80074fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 809e 	beq.w	800764a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800750e:	2300      	movs	r3, #0
 8007510:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007512:	4b46      	ldr	r3, [pc, #280]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00d      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007528:	4b40      	ldr	r3, [pc, #256]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800752a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752c:	4a3f      	ldr	r2, [pc, #252]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800752e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007532:	6593      	str	r3, [r2, #88]	; 0x58
 8007534:	4b3d      	ldr	r3, [pc, #244]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007540:	2301      	movs	r3, #1
 8007542:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007544:	4b3a      	ldr	r3, [pc, #232]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a39      	ldr	r2, [pc, #228]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800754a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800754e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007550:	f7fc f9f6 	bl	8003940 <HAL_GetTick>
 8007554:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007556:	e009      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007558:	f7fc f9f2 	bl	8003940 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d902      	bls.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	74fb      	strb	r3, [r7, #19]
        break;
 800756a:	e005      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800756c:	4b30      	ldr	r3, [pc, #192]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0ef      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007578:	7cfb      	ldrb	r3, [r7, #19]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d15a      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800757e:	4b2b      	ldr	r3, [pc, #172]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007588:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01e      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	429a      	cmp	r2, r3
 8007598:	d019      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800759a:	4b24      	ldr	r3, [pc, #144]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800759c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075a6:	4b21      	ldr	r3, [pc, #132]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ac:	4a1f      	ldr	r2, [pc, #124]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075b6:	4b1d      	ldr	r3, [pc, #116]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075bc:	4a1b      	ldr	r2, [pc, #108]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075c6:	4a19      	ldr	r2, [pc, #100]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d016      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d8:	f7fc f9b2 	bl	8003940 <HAL_GetTick>
 80075dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075de:	e00b      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075e0:	f7fc f9ae 	bl	8003940 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d902      	bls.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	74fb      	strb	r3, [r7, #19]
            break;
 80075f6:	e006      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0ec      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007606:	7cfb      	ldrb	r3, [r7, #19]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10b      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800760c:	4b07      	ldr	r3, [pc, #28]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800760e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007612:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800761a:	4904      	ldr	r1, [pc, #16]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800761c:	4313      	orrs	r3, r2
 800761e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007622:	e009      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007624:	7cfb      	ldrb	r3, [r7, #19]
 8007626:	74bb      	strb	r3, [r7, #18]
 8007628:	e006      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800762a:	bf00      	nop
 800762c:	40021000 	.word	0x40021000
 8007630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007634:	7cfb      	ldrb	r3, [r7, #19]
 8007636:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007638:	7c7b      	ldrb	r3, [r7, #17]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d105      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800763e:	4b9e      	ldr	r3, [pc, #632]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007642:	4a9d      	ldr	r2, [pc, #628]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007648:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007656:	4b98      	ldr	r3, [pc, #608]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765c:	f023 0203 	bic.w	r2, r3, #3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	4994      	ldr	r1, [pc, #592]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007666:	4313      	orrs	r3, r2
 8007668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00a      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007678:	4b8f      	ldr	r3, [pc, #572]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800767a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767e:	f023 020c 	bic.w	r2, r3, #12
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	498c      	ldr	r1, [pc, #560]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007688:	4313      	orrs	r3, r2
 800768a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0304 	and.w	r3, r3, #4
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800769a:	4b87      	ldr	r3, [pc, #540]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800769c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	4983      	ldr	r1, [pc, #524]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0308 	and.w	r3, r3, #8
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00a      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076bc:	4b7e      	ldr	r3, [pc, #504]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ca:	497b      	ldr	r1, [pc, #492]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0320 	and.w	r3, r3, #32
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076de:	4b76      	ldr	r3, [pc, #472]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	4972      	ldr	r1, [pc, #456]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007700:	4b6d      	ldr	r3, [pc, #436]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007706:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770e:	496a      	ldr	r1, [pc, #424]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007722:	4b65      	ldr	r3, [pc, #404]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007730:	4961      	ldr	r1, [pc, #388]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007732:	4313      	orrs	r3, r2
 8007734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00a      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007744:	4b5c      	ldr	r3, [pc, #368]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007752:	4959      	ldr	r1, [pc, #356]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007754:	4313      	orrs	r3, r2
 8007756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007766:	4b54      	ldr	r3, [pc, #336]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800776c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	4950      	ldr	r1, [pc, #320]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007776:	4313      	orrs	r3, r2
 8007778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007788:	4b4b      	ldr	r3, [pc, #300]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800778a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800778e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007796:	4948      	ldr	r1, [pc, #288]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007798:	4313      	orrs	r3, r2
 800779a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077aa:	4b43      	ldr	r3, [pc, #268]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80077ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077b0:	f023 0203 	bic.w	r2, r3, #3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	493f      	ldr	r1, [pc, #252]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d028      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077cc:	4b3a      	ldr	r3, [pc, #232]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80077ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077da:	4937      	ldr	r1, [pc, #220]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077ea:	d106      	bne.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077ec:	4b32      	ldr	r3, [pc, #200]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4a31      	ldr	r2, [pc, #196]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80077f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077f6:	60d3      	str	r3, [r2, #12]
 80077f8:	e011      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007802:	d10c      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	2101      	movs	r1, #1
 800780a:	4618      	mov	r0, r3
 800780c:	f000 f8a4 	bl	8007958 <RCCEx_PLLSAI1_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007814:	7cfb      	ldrb	r3, [r7, #19]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800781a:	7cfb      	ldrb	r3, [r7, #19]
 800781c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d028      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800782a:	4b23      	ldr	r3, [pc, #140]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007830:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007838:	491f      	ldr	r1, [pc, #124]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800783a:	4313      	orrs	r3, r2
 800783c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007848:	d106      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800784a:	4b1b      	ldr	r3, [pc, #108]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	4a1a      	ldr	r2, [pc, #104]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007854:	60d3      	str	r3, [r2, #12]
 8007856:	e011      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007860:	d10c      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3304      	adds	r3, #4
 8007866:	2101      	movs	r1, #1
 8007868:	4618      	mov	r0, r3
 800786a:	f000 f875 	bl	8007958 <RCCEx_PLLSAI1_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007872:	7cfb      	ldrb	r3, [r7, #19]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8007878:	7cfb      	ldrb	r3, [r7, #19]
 800787a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d02b      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007888:	4b0b      	ldr	r3, [pc, #44]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800788a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800788e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007896:	4908      	ldr	r1, [pc, #32]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007898:	4313      	orrs	r3, r2
 800789a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078a6:	d109      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078a8:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	4a02      	ldr	r2, [pc, #8]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80078ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078b2:	60d3      	str	r3, [r2, #12]
 80078b4:	e014      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80078b6:	bf00      	nop
 80078b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078c4:	d10c      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	3304      	adds	r3, #4
 80078ca:	2101      	movs	r1, #1
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 f843 	bl	8007958 <RCCEx_PLLSAI1_Config>
 80078d2:	4603      	mov	r3, r0
 80078d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078d6:	7cfb      	ldrb	r3, [r7, #19]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80078dc:	7cfb      	ldrb	r3, [r7, #19]
 80078de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01c      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078ec:	4b19      	ldr	r3, [pc, #100]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80078ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fa:	4916      	ldr	r1, [pc, #88]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800790a:	d10c      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
 8007910:	2102      	movs	r1, #2
 8007912:	4618      	mov	r0, r3
 8007914:	f000 f820 	bl	8007958 <RCCEx_PLLSAI1_Config>
 8007918:	4603      	mov	r3, r0
 800791a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800791c:	7cfb      	ldrb	r3, [r7, #19]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8007922:	7cfb      	ldrb	r3, [r7, #19]
 8007924:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007932:	4b08      	ldr	r3, [pc, #32]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007938:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007940:	4904      	ldr	r1, [pc, #16]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007942:	4313      	orrs	r3, r2
 8007944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007948:	7cbb      	ldrb	r3, [r7, #18]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40021000 	.word	0x40021000

08007958 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007966:	4b74      	ldr	r3, [pc, #464]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d018      	beq.n	80079a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007972:	4b71      	ldr	r3, [pc, #452]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f003 0203 	and.w	r2, r3, #3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d10d      	bne.n	800799e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
       ||
 8007986:	2b00      	cmp	r3, #0
 8007988:	d009      	beq.n	800799e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800798a:	4b6b      	ldr	r3, [pc, #428]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	091b      	lsrs	r3, r3, #4
 8007990:	f003 0307 	and.w	r3, r3, #7
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
       ||
 800799a:	429a      	cmp	r2, r3
 800799c:	d047      	beq.n	8007a2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	73fb      	strb	r3, [r7, #15]
 80079a2:	e044      	b.n	8007a2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d018      	beq.n	80079de <RCCEx_PLLSAI1_Config+0x86>
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d825      	bhi.n	80079fc <RCCEx_PLLSAI1_Config+0xa4>
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d002      	beq.n	80079ba <RCCEx_PLLSAI1_Config+0x62>
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d009      	beq.n	80079cc <RCCEx_PLLSAI1_Config+0x74>
 80079b8:	e020      	b.n	80079fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80079ba:	4b5f      	ldr	r3, [pc, #380]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d11d      	bne.n	8007a02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079ca:	e01a      	b.n	8007a02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80079cc:	4b5a      	ldr	r3, [pc, #360]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d116      	bne.n	8007a06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079dc:	e013      	b.n	8007a06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80079de:	4b56      	ldr	r3, [pc, #344]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10f      	bne.n	8007a0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80079ea:	4b53      	ldr	r3, [pc, #332]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079fa:	e006      	b.n	8007a0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007a00:	e004      	b.n	8007a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a02:	bf00      	nop
 8007a04:	e002      	b.n	8007a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a06:	bf00      	nop
 8007a08:	e000      	b.n	8007a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10d      	bne.n	8007a2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007a12:	4b49      	ldr	r3, [pc, #292]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6819      	ldr	r1, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	430b      	orrs	r3, r1
 8007a28:	4943      	ldr	r1, [pc, #268]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d17c      	bne.n	8007b2e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007a34:	4b40      	ldr	r3, [pc, #256]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a3f      	ldr	r2, [pc, #252]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a40:	f7fb ff7e 	bl	8003940 <HAL_GetTick>
 8007a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a46:	e009      	b.n	8007a5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a48:	f7fb ff7a 	bl	8003940 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d902      	bls.n	8007a5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	73fb      	strb	r3, [r7, #15]
        break;
 8007a5a:	e005      	b.n	8007a68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a5c:	4b36      	ldr	r3, [pc, #216]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1ef      	bne.n	8007a48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d15f      	bne.n	8007b2e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d110      	bne.n	8007a96 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a74:	4b30      	ldr	r3, [pc, #192]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007a7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6892      	ldr	r2, [r2, #8]
 8007a84:	0211      	lsls	r1, r2, #8
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	68d2      	ldr	r2, [r2, #12]
 8007a8a:	06d2      	lsls	r2, r2, #27
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	492a      	ldr	r1, [pc, #168]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	610b      	str	r3, [r1, #16]
 8007a94:	e027      	b.n	8007ae6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d112      	bne.n	8007ac2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a9c:	4b26      	ldr	r3, [pc, #152]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007aa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6892      	ldr	r2, [r2, #8]
 8007aac:	0211      	lsls	r1, r2, #8
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6912      	ldr	r2, [r2, #16]
 8007ab2:	0852      	lsrs	r2, r2, #1
 8007ab4:	3a01      	subs	r2, #1
 8007ab6:	0552      	lsls	r2, r2, #21
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	491f      	ldr	r1, [pc, #124]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	610b      	str	r3, [r1, #16]
 8007ac0:	e011      	b.n	8007ae6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007aca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6892      	ldr	r2, [r2, #8]
 8007ad2:	0211      	lsls	r1, r2, #8
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	6952      	ldr	r2, [r2, #20]
 8007ad8:	0852      	lsrs	r2, r2, #1
 8007ada:	3a01      	subs	r2, #1
 8007adc:	0652      	lsls	r2, r2, #25
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	4915      	ldr	r1, [pc, #84]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a13      	ldr	r2, [pc, #76]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007af0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af2:	f7fb ff25 	bl	8003940 <HAL_GetTick>
 8007af6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007af8:	e009      	b.n	8007b0e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007afa:	f7fb ff21 	bl	8003940 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d902      	bls.n	8007b0e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	73fb      	strb	r3, [r7, #15]
          break;
 8007b0c:	e005      	b.n	8007b1a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b0e:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0ef      	beq.n	8007afa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d106      	bne.n	8007b2e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007b20:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b22:	691a      	ldr	r2, [r3, #16]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	4903      	ldr	r1, [pc, #12]	; (8007b38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40021000 	.word	0x40021000

08007b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e049      	b.n	8007be2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7fb fb42 	bl	80031ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	f001 fa34 	bl	8008fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d001      	beq.n	8007c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e040      	b.n	8007c86 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0201 	orr.w	r2, r2, #1
 8007c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1c      	ldr	r2, [pc, #112]	; (8007c94 <HAL_TIM_Base_Start_IT+0xa8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00e      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x58>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c2e:	d009      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x58>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a18      	ldr	r2, [pc, #96]	; (8007c98 <HAL_TIM_Base_Start_IT+0xac>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d004      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x58>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a17      	ldr	r2, [pc, #92]	; (8007c9c <HAL_TIM_Base_Start_IT+0xb0>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d115      	bne.n	8007c70 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b06      	cmp	r3, #6
 8007c54:	d015      	beq.n	8007c82 <HAL_TIM_Base_Start_IT+0x96>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c5c:	d011      	beq.n	8007c82 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0201 	orr.w	r2, r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c6e:	e008      	b.n	8007c82 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0201 	orr.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	e000      	b.n	8007c84 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	40012c00 	.word	0x40012c00
 8007c98:	40000400 	.word	0x40000400
 8007c9c:	40014000 	.word	0x40014000
 8007ca0:	00010007 	.word	0x00010007

08007ca4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0201 	bic.w	r2, r2, #1
 8007cba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6a1a      	ldr	r2, [r3, #32]
 8007cc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10f      	bne.n	8007cec <HAL_TIM_Base_Stop_IT+0x48>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6a1a      	ldr	r2, [r3, #32]
 8007cd2:	f240 4344 	movw	r3, #1092	; 0x444
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d107      	bne.n	8007cec <HAL_TIM_Base_Stop_IT+0x48>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 0201 	bic.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e049      	b.n	8007da8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d106      	bne.n	8007d2e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f841 	bl	8007db0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2202      	movs	r2, #2
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f001 f951 	bl	8008fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e049      	b.n	8007e6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f841 	bl	8007e72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4619      	mov	r1, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	f001 f8f0 	bl	8008fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d109      	bne.n	8007eac <HAL_TIM_PWM_Start+0x24>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	bf14      	ite	ne
 8007ea4:	2301      	movne	r3, #1
 8007ea6:	2300      	moveq	r3, #0
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	e03c      	b.n	8007f26 <HAL_TIM_PWM_Start+0x9e>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2b04      	cmp	r3, #4
 8007eb0:	d109      	bne.n	8007ec6 <HAL_TIM_PWM_Start+0x3e>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	bf14      	ite	ne
 8007ebe:	2301      	movne	r3, #1
 8007ec0:	2300      	moveq	r3, #0
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	e02f      	b.n	8007f26 <HAL_TIM_PWM_Start+0x9e>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d109      	bne.n	8007ee0 <HAL_TIM_PWM_Start+0x58>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	bf14      	ite	ne
 8007ed8:	2301      	movne	r3, #1
 8007eda:	2300      	moveq	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	e022      	b.n	8007f26 <HAL_TIM_PWM_Start+0x9e>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b0c      	cmp	r3, #12
 8007ee4:	d109      	bne.n	8007efa <HAL_TIM_PWM_Start+0x72>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	bf14      	ite	ne
 8007ef2:	2301      	movne	r3, #1
 8007ef4:	2300      	moveq	r3, #0
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	e015      	b.n	8007f26 <HAL_TIM_PWM_Start+0x9e>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b10      	cmp	r3, #16
 8007efe:	d109      	bne.n	8007f14 <HAL_TIM_PWM_Start+0x8c>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	bf14      	ite	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	2300      	moveq	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	e008      	b.n	8007f26 <HAL_TIM_PWM_Start+0x9e>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	bf14      	ite	ne
 8007f20:	2301      	movne	r3, #1
 8007f22:	2300      	moveq	r3, #0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e083      	b.n	8008036 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d104      	bne.n	8007f3e <HAL_TIM_PWM_Start+0xb6>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f3c:	e023      	b.n	8007f86 <HAL_TIM_PWM_Start+0xfe>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d104      	bne.n	8007f4e <HAL_TIM_PWM_Start+0xc6>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f4c:	e01b      	b.n	8007f86 <HAL_TIM_PWM_Start+0xfe>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d104      	bne.n	8007f5e <HAL_TIM_PWM_Start+0xd6>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f5c:	e013      	b.n	8007f86 <HAL_TIM_PWM_Start+0xfe>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b0c      	cmp	r3, #12
 8007f62:	d104      	bne.n	8007f6e <HAL_TIM_PWM_Start+0xe6>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f6c:	e00b      	b.n	8007f86 <HAL_TIM_PWM_Start+0xfe>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b10      	cmp	r3, #16
 8007f72:	d104      	bne.n	8007f7e <HAL_TIM_PWM_Start+0xf6>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f7c:	e003      	b.n	8007f86 <HAL_TIM_PWM_Start+0xfe>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2202      	movs	r2, #2
 8007f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f001 fc43 	bl	800981a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a29      	ldr	r2, [pc, #164]	; (8008040 <HAL_TIM_PWM_Start+0x1b8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d009      	beq.n	8007fb2 <HAL_TIM_PWM_Start+0x12a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a28      	ldr	r2, [pc, #160]	; (8008044 <HAL_TIM_PWM_Start+0x1bc>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d004      	beq.n	8007fb2 <HAL_TIM_PWM_Start+0x12a>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a26      	ldr	r2, [pc, #152]	; (8008048 <HAL_TIM_PWM_Start+0x1c0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d101      	bne.n	8007fb6 <HAL_TIM_PWM_Start+0x12e>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e000      	b.n	8007fb8 <HAL_TIM_PWM_Start+0x130>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d007      	beq.n	8007fcc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a1b      	ldr	r2, [pc, #108]	; (8008040 <HAL_TIM_PWM_Start+0x1b8>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00e      	beq.n	8007ff4 <HAL_TIM_PWM_Start+0x16c>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fde:	d009      	beq.n	8007ff4 <HAL_TIM_PWM_Start+0x16c>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a19      	ldr	r2, [pc, #100]	; (800804c <HAL_TIM_PWM_Start+0x1c4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d004      	beq.n	8007ff4 <HAL_TIM_PWM_Start+0x16c>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a15      	ldr	r2, [pc, #84]	; (8008044 <HAL_TIM_PWM_Start+0x1bc>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d115      	bne.n	8008020 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689a      	ldr	r2, [r3, #8]
 8007ffa:	4b15      	ldr	r3, [pc, #84]	; (8008050 <HAL_TIM_PWM_Start+0x1c8>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b06      	cmp	r3, #6
 8008004:	d015      	beq.n	8008032 <HAL_TIM_PWM_Start+0x1aa>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800800c:	d011      	beq.n	8008032 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0201 	orr.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800801e:	e008      	b.n	8008032 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0201 	orr.w	r2, r2, #1
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	e000      	b.n	8008034 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008032:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	40012c00 	.word	0x40012c00
 8008044:	40014000 	.word	0x40014000
 8008048:	40014400 	.word	0x40014400
 800804c:	40000400 	.word	0x40000400
 8008050:	00010007 	.word	0x00010007

08008054 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f001 fbd7 	bl	800981a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a39      	ldr	r2, [pc, #228]	; (8008158 <HAL_TIM_PWM_Stop+0x104>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d009      	beq.n	800808a <HAL_TIM_PWM_Stop+0x36>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a38      	ldr	r2, [pc, #224]	; (800815c <HAL_TIM_PWM_Stop+0x108>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d004      	beq.n	800808a <HAL_TIM_PWM_Stop+0x36>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a36      	ldr	r2, [pc, #216]	; (8008160 <HAL_TIM_PWM_Stop+0x10c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d101      	bne.n	800808e <HAL_TIM_PWM_Stop+0x3a>
 800808a:	2301      	movs	r3, #1
 800808c:	e000      	b.n	8008090 <HAL_TIM_PWM_Stop+0x3c>
 800808e:	2300      	movs	r3, #0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d017      	beq.n	80080c4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6a1a      	ldr	r2, [r3, #32]
 800809a:	f241 1311 	movw	r3, #4369	; 0x1111
 800809e:	4013      	ands	r3, r2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10f      	bne.n	80080c4 <HAL_TIM_PWM_Stop+0x70>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6a1a      	ldr	r2, [r3, #32]
 80080aa:	f240 4344 	movw	r3, #1092	; 0x444
 80080ae:	4013      	ands	r3, r2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d107      	bne.n	80080c4 <HAL_TIM_PWM_Stop+0x70>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6a1a      	ldr	r2, [r3, #32]
 80080ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80080ce:	4013      	ands	r3, r2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10f      	bne.n	80080f4 <HAL_TIM_PWM_Stop+0xa0>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6a1a      	ldr	r2, [r3, #32]
 80080da:	f240 4344 	movw	r3, #1092	; 0x444
 80080de:	4013      	ands	r3, r2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d107      	bne.n	80080f4 <HAL_TIM_PWM_Stop+0xa0>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0201 	bic.w	r2, r2, #1
 80080f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d104      	bne.n	8008104 <HAL_TIM_PWM_Stop+0xb0>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008102:	e023      	b.n	800814c <HAL_TIM_PWM_Stop+0xf8>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b04      	cmp	r3, #4
 8008108:	d104      	bne.n	8008114 <HAL_TIM_PWM_Stop+0xc0>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008112:	e01b      	b.n	800814c <HAL_TIM_PWM_Stop+0xf8>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b08      	cmp	r3, #8
 8008118:	d104      	bne.n	8008124 <HAL_TIM_PWM_Stop+0xd0>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008122:	e013      	b.n	800814c <HAL_TIM_PWM_Stop+0xf8>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2b0c      	cmp	r3, #12
 8008128:	d104      	bne.n	8008134 <HAL_TIM_PWM_Stop+0xe0>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008132:	e00b      	b.n	800814c <HAL_TIM_PWM_Stop+0xf8>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b10      	cmp	r3, #16
 8008138:	d104      	bne.n	8008144 <HAL_TIM_PWM_Stop+0xf0>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008142:	e003      	b.n	800814c <HAL_TIM_PWM_Stop+0xf8>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	40012c00 	.word	0x40012c00
 800815c:	40014000 	.word	0x40014000
 8008160:	40014400 	.word	0x40014400

08008164 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e041      	b.n	80081fc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d106      	bne.n	8008192 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f839 	bl	8008204 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2202      	movs	r2, #2
 8008196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	3304      	adds	r3, #4
 80081a2:	4619      	mov	r1, r3
 80081a4:	4610      	mov	r0, r2
 80081a6:	f000 ff1f 	bl	8008fe8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0208 	bic.w	r2, r2, #8
 80081b8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6819      	ldr	r1, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b02      	cmp	r3, #2
 800822c:	d122      	bne.n	8008274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b02      	cmp	r3, #2
 800823a:	d11b      	bne.n	8008274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f06f 0202 	mvn.w	r2, #2
 8008244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fd77 	bl	8008d4e <HAL_TIM_IC_CaptureCallback>
 8008260:	e005      	b.n	800826e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fd69 	bl	8008d3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7fa fe8d 	bl	8002f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0304 	and.w	r3, r3, #4
 800827e:	2b04      	cmp	r3, #4
 8008280:	d122      	bne.n	80082c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b04      	cmp	r3, #4
 800828e:	d11b      	bne.n	80082c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0204 	mvn.w	r2, #4
 8008298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2202      	movs	r2, #2
 800829e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fd4d 	bl	8008d4e <HAL_TIM_IC_CaptureCallback>
 80082b4:	e005      	b.n	80082c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fd3f 	bl	8008d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7fa fe63 	bl	8002f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0308 	and.w	r3, r3, #8
 80082d2:	2b08      	cmp	r3, #8
 80082d4:	d122      	bne.n	800831c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d11b      	bne.n	800831c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f06f 0208 	mvn.w	r2, #8
 80082ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2204      	movs	r2, #4
 80082f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	f003 0303 	and.w	r3, r3, #3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fd23 	bl	8008d4e <HAL_TIM_IC_CaptureCallback>
 8008308:	e005      	b.n	8008316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fd15 	bl	8008d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7fa fe39 	bl	8002f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	f003 0310 	and.w	r3, r3, #16
 8008326:	2b10      	cmp	r3, #16
 8008328:	d122      	bne.n	8008370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b10      	cmp	r3, #16
 8008336:	d11b      	bne.n	8008370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f06f 0210 	mvn.w	r2, #16
 8008340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2208      	movs	r2, #8
 8008346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fcf9 	bl	8008d4e <HAL_TIM_IC_CaptureCallback>
 800835c:	e005      	b.n	800836a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fceb 	bl	8008d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7fa fe0f 	bl	8002f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b01      	cmp	r3, #1
 800837c:	d10e      	bne.n	800839c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b01      	cmp	r3, #1
 800838a:	d107      	bne.n	800839c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f06f 0201 	mvn.w	r2, #1
 8008394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7fa fdb4 	bl	8002f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a6:	2b80      	cmp	r3, #128	; 0x80
 80083a8:	d10e      	bne.n	80083c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b4:	2b80      	cmp	r3, #128	; 0x80
 80083b6:	d107      	bne.n	80083c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 fb48 	bl	8009a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d6:	d10e      	bne.n	80083f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e2:	2b80      	cmp	r3, #128	; 0x80
 80083e4:	d107      	bne.n	80083f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80083ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f001 fb3b 	bl	8009a6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008400:	2b40      	cmp	r3, #64	; 0x40
 8008402:	d10e      	bne.n	8008422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840e:	2b40      	cmp	r3, #64	; 0x40
 8008410:	d107      	bne.n	8008422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800841a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fcaa 	bl	8008d76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b20      	cmp	r3, #32
 800842e:	d10e      	bne.n	800844e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b20      	cmp	r3, #32
 800843c:	d107      	bne.n	800844e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f06f 0220 	mvn.w	r2, #32
 8008446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 faf1 	bl	8009a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008472:	2302      	movs	r3, #2
 8008474:	e066      	b.n	8008544 <HAL_TIM_OC_ConfigChannel+0xec>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b14      	cmp	r3, #20
 8008482:	d857      	bhi.n	8008534 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008484:	a201      	add	r2, pc, #4	; (adr r2, 800848c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848a:	bf00      	nop
 800848c:	080084e1 	.word	0x080084e1
 8008490:	08008535 	.word	0x08008535
 8008494:	08008535 	.word	0x08008535
 8008498:	08008535 	.word	0x08008535
 800849c:	080084ef 	.word	0x080084ef
 80084a0:	08008535 	.word	0x08008535
 80084a4:	08008535 	.word	0x08008535
 80084a8:	08008535 	.word	0x08008535
 80084ac:	080084fd 	.word	0x080084fd
 80084b0:	08008535 	.word	0x08008535
 80084b4:	08008535 	.word	0x08008535
 80084b8:	08008535 	.word	0x08008535
 80084bc:	0800850b 	.word	0x0800850b
 80084c0:	08008535 	.word	0x08008535
 80084c4:	08008535 	.word	0x08008535
 80084c8:	08008535 	.word	0x08008535
 80084cc:	08008519 	.word	0x08008519
 80084d0:	08008535 	.word	0x08008535
 80084d4:	08008535 	.word	0x08008535
 80084d8:	08008535 	.word	0x08008535
 80084dc:	08008527 	.word	0x08008527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fdec 	bl	80090c4 <TIM_OC1_SetConfig>
      break;
 80084ec:	e025      	b.n	800853a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68b9      	ldr	r1, [r7, #8]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 fe61 	bl	80091bc <TIM_OC2_SetConfig>
      break;
 80084fa:	e01e      	b.n	800853a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68b9      	ldr	r1, [r7, #8]
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fed4 	bl	80092b0 <TIM_OC3_SetConfig>
      break;
 8008508:	e017      	b.n	800853a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68b9      	ldr	r1, [r7, #8]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 ff45 	bl	80093a0 <TIM_OC4_SetConfig>
      break;
 8008516:	e010      	b.n	800853a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 ff9c 	bl	800945c <TIM_OC5_SetConfig>
      break;
 8008524:	e009      	b.n	800853a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68b9      	ldr	r1, [r7, #8]
 800852c:	4618      	mov	r0, r3
 800852e:	f000 ffed 	bl	800950c <TIM_OC6_SetConfig>
      break;
 8008532:	e002      	b.n	800853a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	75fb      	strb	r3, [r7, #23]
      break;
 8008538:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008542:	7dfb      	ldrb	r3, [r7, #23]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008562:	2b01      	cmp	r3, #1
 8008564:	d101      	bne.n	800856a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008566:	2302      	movs	r3, #2
 8008568:	e0ff      	b.n	800876a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b14      	cmp	r3, #20
 8008576:	f200 80f0 	bhi.w	800875a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800857a:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	080085d5 	.word	0x080085d5
 8008584:	0800875b 	.word	0x0800875b
 8008588:	0800875b 	.word	0x0800875b
 800858c:	0800875b 	.word	0x0800875b
 8008590:	08008615 	.word	0x08008615
 8008594:	0800875b 	.word	0x0800875b
 8008598:	0800875b 	.word	0x0800875b
 800859c:	0800875b 	.word	0x0800875b
 80085a0:	08008657 	.word	0x08008657
 80085a4:	0800875b 	.word	0x0800875b
 80085a8:	0800875b 	.word	0x0800875b
 80085ac:	0800875b 	.word	0x0800875b
 80085b0:	08008697 	.word	0x08008697
 80085b4:	0800875b 	.word	0x0800875b
 80085b8:	0800875b 	.word	0x0800875b
 80085bc:	0800875b 	.word	0x0800875b
 80085c0:	080086d9 	.word	0x080086d9
 80085c4:	0800875b 	.word	0x0800875b
 80085c8:	0800875b 	.word	0x0800875b
 80085cc:	0800875b 	.word	0x0800875b
 80085d0:	08008719 	.word	0x08008719
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68b9      	ldr	r1, [r7, #8]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fd72 	bl	80090c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699a      	ldr	r2, [r3, #24]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0208 	orr.w	r2, r2, #8
 80085ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	699a      	ldr	r2, [r3, #24]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 0204 	bic.w	r2, r2, #4
 80085fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6999      	ldr	r1, [r3, #24]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	691a      	ldr	r2, [r3, #16]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	430a      	orrs	r2, r1
 8008610:	619a      	str	r2, [r3, #24]
      break;
 8008612:	e0a5      	b.n	8008760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	4618      	mov	r0, r3
 800861c:	f000 fdce 	bl	80091bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699a      	ldr	r2, [r3, #24]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800862e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	699a      	ldr	r2, [r3, #24]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800863e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6999      	ldr	r1, [r3, #24]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	021a      	lsls	r2, r3, #8
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	430a      	orrs	r2, r1
 8008652:	619a      	str	r2, [r3, #24]
      break;
 8008654:	e084      	b.n	8008760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68b9      	ldr	r1, [r7, #8]
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fe27 	bl	80092b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69da      	ldr	r2, [r3, #28]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f042 0208 	orr.w	r2, r2, #8
 8008670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69da      	ldr	r2, [r3, #28]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0204 	bic.w	r2, r2, #4
 8008680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69d9      	ldr	r1, [r3, #28]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	691a      	ldr	r2, [r3, #16]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	61da      	str	r2, [r3, #28]
      break;
 8008694:	e064      	b.n	8008760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68b9      	ldr	r1, [r7, #8]
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fe7f 	bl	80093a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69da      	ldr	r2, [r3, #28]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	69da      	ldr	r2, [r3, #28]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	69d9      	ldr	r1, [r3, #28]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	021a      	lsls	r2, r3, #8
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	61da      	str	r2, [r3, #28]
      break;
 80086d6:	e043      	b.n	8008760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68b9      	ldr	r1, [r7, #8]
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 febc 	bl	800945c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0208 	orr.w	r2, r2, #8
 80086f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 0204 	bic.w	r2, r2, #4
 8008702:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	691a      	ldr	r2, [r3, #16]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008716:	e023      	b.n	8008760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68b9      	ldr	r1, [r7, #8]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fef4 	bl	800950c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008732:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008742:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	021a      	lsls	r2, r3, #8
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008758:	e002      	b.n	8008760 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	75fb      	strb	r3, [r7, #23]
      break;
 800875e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008768:	7dfb      	ldrb	r3, [r7, #23]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop

08008774 <HAL_TIM_DMABurst_MultiWriteStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                   uint32_t BurstRequestSrc, uint32_t *BurstBuffer,
                                                   uint32_t  BurstLength,  uint32_t  DataLength)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d101      	bne.n	8008796 <HAL_TIM_DMABurst_MultiWriteStart+0x22>
  {
    return HAL_BUSY;
 8008792:	2302      	movs	r3, #2
 8008794:	e12b      	b.n	80089ee <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
  }
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d10b      	bne.n	80087ba <HAL_TIM_DMABurst_MultiWriteStart+0x46>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d104      	bne.n	80087b2 <HAL_TIM_DMABurst_MultiWriteStart+0x3e>
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <HAL_TIM_DMABurst_MultiWriteStart+0x3e>
    {
      return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e11d      	b.n	80089ee <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
    }
    else
    {
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2202      	movs	r2, #2
 80087b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  else
  {
    /* nothing to do */
  }

  switch (BurstRequestSrc)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087c0:	f000 80d8 	beq.w	8008974 <HAL_TIM_DMABurst_MultiWriteStart+0x200>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087ca:	f200 80ee 	bhi.w	80089aa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087d4:	f000 80b3 	beq.w	800893e <HAL_TIM_DMABurst_MultiWriteStart+0x1ca>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087de:	f200 80e4 	bhi.w	80089aa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e8:	f000 808e 	beq.w	8008908 <HAL_TIM_DMABurst_MultiWriteStart+0x194>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f2:	f200 80da 	bhi.w	80089aa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087fc:	d069      	beq.n	80088d2 <HAL_TIM_DMABurst_MultiWriteStart+0x15e>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008804:	f200 80d1 	bhi.w	80089aa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800880e:	d045      	beq.n	800889c <HAL_TIM_DMABurst_MultiWriteStart+0x128>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008816:	f200 80c8 	bhi.w	80089aa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008820:	d004      	beq.n	800882c <HAL_TIM_DMABurst_MultiWriteStart+0xb8>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008828:	d01c      	beq.n	8008864 <HAL_TIM_DMABurst_MultiWriteStart+0xf0>
 800882a:	e0be      	b.n	80089aa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
  {
    case TIM_DMA_UPDATE:
    {
      /* Set the DMA Period elapsed callbacks */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	4a71      	ldr	r2, [pc, #452]	; (80089f8 <HAL_TIM_DMABurst_MultiWriteStart+0x284>)
 8008832:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	4a70      	ldr	r2, [pc, #448]	; (80089fc <HAL_TIM_DMABurst_MultiWriteStart+0x288>)
 800883a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	4a6f      	ldr	r2, [pc, #444]	; (8008a00 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8008842:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a18      	ldr	r0, [r3, #32]
 8008848:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8008850:	461a      	mov	r2, r3
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	f7fc ff70 	bl	8005738 <HAL_DMA_Start_IT>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 80a8 	beq.w	80089b0 <HAL_TIM_DMABurst_MultiWriteStart+0x23c>
      {
        /* Return error status */
        return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e0c4      	b.n	80089ee <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	4a66      	ldr	r2, [pc, #408]	; (8008a04 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 800886a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	4a65      	ldr	r2, [pc, #404]	; (8008a08 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 8008872:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	4a61      	ldr	r2, [pc, #388]	; (8008a00 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 800887a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008880:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8008888:	461a      	mov	r2, r3
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	f7fc ff54 	bl	8005738 <HAL_DMA_Start_IT>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 808e 	beq.w	80089b4 <HAL_TIM_DMABurst_MultiWriteStart+0x240>
      {
        /* Return error status */
        return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e0a8      	b.n	80089ee <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	4a58      	ldr	r2, [pc, #352]	; (8008a04 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 80088a2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	4a57      	ldr	r2, [pc, #348]	; (8008a08 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 80088aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b0:	4a53      	ldr	r2, [pc, #332]	; (8008a00 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 80088b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80088b8:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 80088c0:	461a      	mov	r2, r3
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	f7fc ff38 	bl	8005738 <HAL_DMA_Start_IT>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d074      	beq.n	80089b8 <HAL_TIM_DMABurst_MultiWriteStart+0x244>
      {
        /* Return error status */
        return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e08d      	b.n	80089ee <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d6:	4a4b      	ldr	r2, [pc, #300]	; (8008a04 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 80088d8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088de:	4a4a      	ldr	r2, [pc, #296]	; (8008a08 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 80088e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e6:	4a46      	ldr	r2, [pc, #280]	; (8008a00 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 80088e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80088ee:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 80088f6:	461a      	mov	r2, r3
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	f7fc ff1d 	bl	8005738 <HAL_DMA_Start_IT>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d05b      	beq.n	80089bc <HAL_TIM_DMABurst_MultiWriteStart+0x248>
      {
        /* Return error status */
        return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e072      	b.n	80089ee <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890c:	4a3d      	ldr	r2, [pc, #244]	; (8008a04 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 800890e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008914:	4a3c      	ldr	r2, [pc, #240]	; (8008a08 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 8008916:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	4a38      	ldr	r2, [pc, #224]	; (8008a00 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 800891e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008924:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 800892c:	461a      	mov	r2, r3
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	f7fc ff02 	bl	8005738 <HAL_DMA_Start_IT>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d042      	beq.n	80089c0 <HAL_TIM_DMABurst_MultiWriteStart+0x24c>
      {
        /* Return error status */
        return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e057      	b.n	80089ee <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_COM:
    {
      /* Set the DMA commutation callbacks */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008942:	4a32      	ldr	r2, [pc, #200]	; (8008a0c <HAL_TIM_DMABurst_MultiWriteStart+0x298>)
 8008944:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894a:	4a31      	ldr	r2, [pc, #196]	; (8008a10 <HAL_TIM_DMABurst_MultiWriteStart+0x29c>)
 800894c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008952:	4a2b      	ldr	r2, [pc, #172]	; (8008a00 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8008954:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800895a:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 8008962:	461a      	mov	r2, r3
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	f7fc fee7 	bl	8005738 <HAL_DMA_Start_IT>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d029      	beq.n	80089c4 <HAL_TIM_DMABurst_MultiWriteStart+0x250>
      {
        /* Return error status */
        return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e03c      	b.n	80089ee <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_TRIGGER:
    {
      /* Set the DMA trigger callbacks */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008978:	4a26      	ldr	r2, [pc, #152]	; (8008a14 <HAL_TIM_DMABurst_MultiWriteStart+0x2a0>)
 800897a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008980:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <HAL_TIM_DMABurst_MultiWriteStart+0x2a4>)
 8008982:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008988:	4a1d      	ldr	r2, [pc, #116]	; (8008a00 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 800898a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008990:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8008998:	461a      	mov	r2, r3
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	f7fc fecc 	bl	8005738 <HAL_DMA_Start_IT>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d010      	beq.n	80089c8 <HAL_TIM_DMABurst_MultiWriteStart+0x254>
      {
        /* Return error status */
        return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e021      	b.n	80089ee <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      }
      break;
    }
    default:
      status = HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	75fb      	strb	r3, [r7, #23]
      break;
 80089ae:	e00c      	b.n	80089ca <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 80089b0:	bf00      	nop
 80089b2:	e00a      	b.n	80089ca <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 80089b4:	bf00      	nop
 80089b6:	e008      	b.n	80089ca <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 80089b8:	bf00      	nop
 80089ba:	e006      	b.n	80089ca <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 80089bc:	bf00      	nop
 80089be:	e004      	b.n	80089ca <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 80089c0:	bf00      	nop
 80089c2:	e002      	b.n	80089ca <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 80089c4:	bf00      	nop
 80089c6:	e000      	b.n	80089ca <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 80089c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10d      	bne.n	80089ec <HAL_TIM_DMABurst_MultiWriteStart+0x278>
  {
    /* Configure the DMA Burst Mode */
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	6a3a      	ldr	r2, [r7, #32]
 80089d8:	430a      	orrs	r2, r1
 80089da:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable the TIM DMA Request */
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68d9      	ldr	r1, [r3, #12]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	08008f55 	.word	0x08008f55
 80089fc:	08008f83 	.word	0x08008f83
 8008a00:	08008db3 	.word	0x08008db3
 8008a04:	08008e45 	.word	0x08008e45
 8008a08:	08008eed 	.word	0x08008eed
 8008a0c:	08009a81 	.word	0x08009a81
 8008a10:	08009aa5 	.word	0x08009aa5
 8008a14:	08008f9f 	.word	0x08008f9f
 8008a18:	08008fcd 	.word	0x08008fcd

08008a1c <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch (BurstRequestSrc)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a30:	d050      	beq.n	8008ad4 <HAL_TIM_DMABurst_WriteStop+0xb8>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a38:	d852      	bhi.n	8008ae0 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a40:	d042      	beq.n	8008ac8 <HAL_TIM_DMABurst_WriteStop+0xac>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a48:	d84a      	bhi.n	8008ae0 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a50:	d034      	beq.n	8008abc <HAL_TIM_DMABurst_WriteStop+0xa0>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a58:	d842      	bhi.n	8008ae0 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a60:	d026      	beq.n	8008ab0 <HAL_TIM_DMABurst_WriteStop+0x94>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a68:	d83a      	bhi.n	8008ae0 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a70:	d018      	beq.n	8008aa4 <HAL_TIM_DMABurst_WriteStop+0x88>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a78:	d832      	bhi.n	8008ae0 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a80:	d004      	beq.n	8008a8c <HAL_TIM_DMABurst_WriteStop+0x70>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a88:	d006      	beq.n	8008a98 <HAL_TIM_DMABurst_WriteStop+0x7c>
 8008a8a:	e029      	b.n	8008ae0 <HAL_TIM_DMABurst_WriteStop+0xc4>
  {
    case TIM_DMA_UPDATE:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fc feef 	bl	8005874 <HAL_DMA_Abort_IT>
      break;
 8008a96:	e026      	b.n	8008ae6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC1:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fc fee9 	bl	8005874 <HAL_DMA_Abort_IT>
      break;
 8008aa2:	e020      	b.n	8008ae6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC2:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fc fee3 	bl	8005874 <HAL_DMA_Abort_IT>
      break;
 8008aae:	e01a      	b.n	8008ae6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC3:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fc fedd 	bl	8005874 <HAL_DMA_Abort_IT>
      break;
 8008aba:	e014      	b.n	8008ae6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC4:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fc fed7 	bl	8005874 <HAL_DMA_Abort_IT>
      break;
 8008ac6:	e00e      	b.n	8008ae6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_COM:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fc fed1 	bl	8005874 <HAL_DMA_Abort_IT>
      break;
 8008ad2:	e008      	b.n	8008ae6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_TRIGGER:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fc fecb 	bl	8005874 <HAL_DMA_Abort_IT>
      break;
 8008ade:	e002      	b.n	8008ae6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    default:
      status = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae4:	bf00      	nop
  }

  if (status == HAL_OK)
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10c      	bne.n	8008b06 <HAL_TIM_DMABurst_WriteStop+0xea>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68d9      	ldr	r1, [r3, #12]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	43da      	mvns	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	400a      	ands	r2, r1
 8008afc:	60da      	str	r2, [r3, #12]

    /* Change the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  }

  /* Return function status */
  return status;
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d101      	bne.n	8008b2c <HAL_TIM_ConfigClockSource+0x1c>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	e0b6      	b.n	8008c9a <HAL_TIM_ConfigClockSource+0x18a>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2202      	movs	r2, #2
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b68:	d03e      	beq.n	8008be8 <HAL_TIM_ConfigClockSource+0xd8>
 8008b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b6e:	f200 8087 	bhi.w	8008c80 <HAL_TIM_ConfigClockSource+0x170>
 8008b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b76:	f000 8086 	beq.w	8008c86 <HAL_TIM_ConfigClockSource+0x176>
 8008b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b7e:	d87f      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x170>
 8008b80:	2b70      	cmp	r3, #112	; 0x70
 8008b82:	d01a      	beq.n	8008bba <HAL_TIM_ConfigClockSource+0xaa>
 8008b84:	2b70      	cmp	r3, #112	; 0x70
 8008b86:	d87b      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x170>
 8008b88:	2b60      	cmp	r3, #96	; 0x60
 8008b8a:	d050      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x11e>
 8008b8c:	2b60      	cmp	r3, #96	; 0x60
 8008b8e:	d877      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x170>
 8008b90:	2b50      	cmp	r3, #80	; 0x50
 8008b92:	d03c      	beq.n	8008c0e <HAL_TIM_ConfigClockSource+0xfe>
 8008b94:	2b50      	cmp	r3, #80	; 0x50
 8008b96:	d873      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x170>
 8008b98:	2b40      	cmp	r3, #64	; 0x40
 8008b9a:	d058      	beq.n	8008c4e <HAL_TIM_ConfigClockSource+0x13e>
 8008b9c:	2b40      	cmp	r3, #64	; 0x40
 8008b9e:	d86f      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x170>
 8008ba0:	2b30      	cmp	r3, #48	; 0x30
 8008ba2:	d064      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x15e>
 8008ba4:	2b30      	cmp	r3, #48	; 0x30
 8008ba6:	d86b      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x170>
 8008ba8:	2b20      	cmp	r3, #32
 8008baa:	d060      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x15e>
 8008bac:	2b20      	cmp	r3, #32
 8008bae:	d867      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x170>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d05c      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x15e>
 8008bb4:	2b10      	cmp	r3, #16
 8008bb6:	d05a      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x15e>
 8008bb8:	e062      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	6899      	ldr	r1, [r3, #8]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f000 fe06 	bl	80097da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	609a      	str	r2, [r3, #8]
      break;
 8008be6:	e04f      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	6899      	ldr	r1, [r3, #8]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f000 fdef 	bl	80097da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c0a:	609a      	str	r2, [r3, #8]
      break;
 8008c0c:	e03c      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6818      	ldr	r0, [r3, #0]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	6859      	ldr	r1, [r3, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f000 fd63 	bl	80096e6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2150      	movs	r1, #80	; 0x50
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fdbc 	bl	80097a4 <TIM_ITRx_SetConfig>
      break;
 8008c2c:	e02c      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	6859      	ldr	r1, [r3, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f000 fd82 	bl	8009744 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2160      	movs	r1, #96	; 0x60
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 fdac 	bl	80097a4 <TIM_ITRx_SetConfig>
      break;
 8008c4c:	e01c      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6818      	ldr	r0, [r3, #0]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	6859      	ldr	r1, [r3, #4]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f000 fd43 	bl	80096e6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2140      	movs	r1, #64	; 0x40
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fd9c 	bl	80097a4 <TIM_ITRx_SetConfig>
      break;
 8008c6c:	e00c      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f000 fd93 	bl	80097a4 <TIM_ITRx_SetConfig>
      break;
 8008c7e:	e003      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	73fb      	strb	r3, [r7, #15]
      break;
 8008c84:	e000      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d101      	bne.n	8008cba <HAL_TIM_SlaveConfigSynchro+0x18>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e031      	b.n	8008d1e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fc77 	bl	80095c0 <TIM_SlaveTimer_SetConfig>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d009      	beq.n	8008cec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e018      	b.n	8008d1e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68da      	ldr	r2, [r3, #12]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cfa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68da      	ldr	r2, [r3, #12]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d0a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b083      	sub	sp, #12
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d42:	bf00      	nop
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d56:	bf00      	nop
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d76:	b480      	push	{r7}
 8008d78:	b083      	sub	sp, #12
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d7e:	bf00      	nop
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008da6:	bf00      	nop
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d107      	bne.n	8008dda <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dd8:	e02a      	b.n	8008e30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d107      	bne.n	8008df4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2202      	movs	r2, #2
 8008de8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008df2:	e01d      	b.n	8008e30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d107      	bne.n	8008e0e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2204      	movs	r2, #4
 8008e02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e0c:	e010      	b.n	8008e30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d107      	bne.n	8008e28 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e26:	e003      	b.n	8008e30 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f7ff ffb4 	bl	8008d9e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	771a      	strb	r2, [r3, #28]
}
 8008e3c:	bf00      	nop
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d10b      	bne.n	8008e74 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d136      	bne.n	8008ed8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e72:	e031      	b.n	8008ed8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d10b      	bne.n	8008e96 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2202      	movs	r2, #2
 8008e82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d125      	bne.n	8008ed8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e94:	e020      	b.n	8008ed8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d10b      	bne.n	8008eb8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2204      	movs	r2, #4
 8008ea4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d114      	bne.n	8008ed8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eb6:	e00f      	b.n	8008ed8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d10a      	bne.n	8008ed8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2208      	movs	r2, #8
 8008ec6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d103      	bne.n	8008ed8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7fa f855 	bl	8002f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	771a      	strb	r2, [r3, #28]
}
 8008ee4:	bf00      	nop
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d103      	bne.n	8008f0c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2201      	movs	r2, #1
 8008f08:	771a      	strb	r2, [r3, #28]
 8008f0a:	e019      	b.n	8008f40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d103      	bne.n	8008f1e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2202      	movs	r2, #2
 8008f1a:	771a      	strb	r2, [r3, #28]
 8008f1c:	e010      	b.n	8008f40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d103      	bne.n	8008f30 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2204      	movs	r2, #4
 8008f2c:	771a      	strb	r2, [r3, #28]
 8008f2e:	e007      	b.n	8008f40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d102      	bne.n	8008f40 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2208      	movs	r2, #8
 8008f3e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f7ff ff0e 	bl	8008d62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	771a      	strb	r2, [r3, #28]
}
 8008f4c:	bf00      	nop
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d103      	bne.n	8008f74 <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7f9 ffc5 	bl	8002f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8008f7a:	bf00      	nop
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7ff fec8 	bl	8008d26 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_TRIGGER]->Init.Mode == DMA_NORMAL)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d103      	bne.n	8008fbe <TIM_DMATriggerCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerCallback(htim);
#else
  HAL_TIM_TriggerCallback(htim);
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f7ff fed9 	bl	8008d76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8008fc4:	bf00      	nop
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <TIM_DMATriggerHalfCplt>:
  * @brief  TIM DMA Trigger half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerHalfCpltCallback(htim);
#else
  HAL_TIM_TriggerHalfCpltCallback(htim);
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f7ff fed5 	bl	8008d8a <HAL_TIM_TriggerHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8008fe0:	bf00      	nop
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a2e      	ldr	r2, [pc, #184]	; (80090b4 <TIM_Base_SetConfig+0xcc>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d007      	beq.n	8009010 <TIM_Base_SetConfig+0x28>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009006:	d003      	beq.n	8009010 <TIM_Base_SetConfig+0x28>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a2b      	ldr	r2, [pc, #172]	; (80090b8 <TIM_Base_SetConfig+0xd0>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d108      	bne.n	8009022 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a23      	ldr	r2, [pc, #140]	; (80090b4 <TIM_Base_SetConfig+0xcc>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d00f      	beq.n	800904a <TIM_Base_SetConfig+0x62>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009030:	d00b      	beq.n	800904a <TIM_Base_SetConfig+0x62>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a20      	ldr	r2, [pc, #128]	; (80090b8 <TIM_Base_SetConfig+0xd0>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d007      	beq.n	800904a <TIM_Base_SetConfig+0x62>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a1f      	ldr	r2, [pc, #124]	; (80090bc <TIM_Base_SetConfig+0xd4>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d003      	beq.n	800904a <TIM_Base_SetConfig+0x62>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a1e      	ldr	r2, [pc, #120]	; (80090c0 <TIM_Base_SetConfig+0xd8>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d108      	bne.n	800905c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	4313      	orrs	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a0c      	ldr	r2, [pc, #48]	; (80090b4 <TIM_Base_SetConfig+0xcc>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d007      	beq.n	8009098 <TIM_Base_SetConfig+0xb0>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a0c      	ldr	r2, [pc, #48]	; (80090bc <TIM_Base_SetConfig+0xd4>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d003      	beq.n	8009098 <TIM_Base_SetConfig+0xb0>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a0b      	ldr	r2, [pc, #44]	; (80090c0 <TIM_Base_SetConfig+0xd8>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d103      	bne.n	80090a0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	691a      	ldr	r2, [r3, #16]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	615a      	str	r2, [r3, #20]
}
 80090a6:	bf00      	nop
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	40012c00 	.word	0x40012c00
 80090b8:	40000400 	.word	0x40000400
 80090bc:	40014000 	.word	0x40014000
 80090c0:	40014400 	.word	0x40014400

080090c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	f023 0201 	bic.w	r2, r3, #1
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f023 0303 	bic.w	r3, r3, #3
 80090fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f023 0302 	bic.w	r3, r3, #2
 8009110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a24      	ldr	r2, [pc, #144]	; (80091b0 <TIM_OC1_SetConfig+0xec>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d007      	beq.n	8009134 <TIM_OC1_SetConfig+0x70>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a23      	ldr	r2, [pc, #140]	; (80091b4 <TIM_OC1_SetConfig+0xf0>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d003      	beq.n	8009134 <TIM_OC1_SetConfig+0x70>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a22      	ldr	r2, [pc, #136]	; (80091b8 <TIM_OC1_SetConfig+0xf4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d10c      	bne.n	800914e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f023 0308 	bic.w	r3, r3, #8
 800913a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	4313      	orrs	r3, r2
 8009144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f023 0304 	bic.w	r3, r3, #4
 800914c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a17      	ldr	r2, [pc, #92]	; (80091b0 <TIM_OC1_SetConfig+0xec>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d007      	beq.n	8009166 <TIM_OC1_SetConfig+0xa2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a16      	ldr	r2, [pc, #88]	; (80091b4 <TIM_OC1_SetConfig+0xf0>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d003      	beq.n	8009166 <TIM_OC1_SetConfig+0xa2>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a15      	ldr	r2, [pc, #84]	; (80091b8 <TIM_OC1_SetConfig+0xf4>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d111      	bne.n	800918a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800916c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	4313      	orrs	r3, r2
 800917e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4313      	orrs	r3, r2
 8009188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	621a      	str	r2, [r3, #32]
}
 80091a4:	bf00      	nop
 80091a6:	371c      	adds	r7, #28
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	40012c00 	.word	0x40012c00
 80091b4:	40014000 	.word	0x40014000
 80091b8:	40014400 	.word	0x40014400

080091bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	f023 0210 	bic.w	r2, r3, #16
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	021b      	lsls	r3, r3, #8
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	4313      	orrs	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	f023 0320 	bic.w	r3, r3, #32
 800920a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	011b      	lsls	r3, r3, #4
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	4313      	orrs	r3, r2
 8009216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a22      	ldr	r2, [pc, #136]	; (80092a4 <TIM_OC2_SetConfig+0xe8>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d10d      	bne.n	800923c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	011b      	lsls	r3, r3, #4
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	4313      	orrs	r3, r2
 8009232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800923a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a19      	ldr	r2, [pc, #100]	; (80092a4 <TIM_OC2_SetConfig+0xe8>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d007      	beq.n	8009254 <TIM_OC2_SetConfig+0x98>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a18      	ldr	r2, [pc, #96]	; (80092a8 <TIM_OC2_SetConfig+0xec>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_OC2_SetConfig+0x98>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a17      	ldr	r2, [pc, #92]	; (80092ac <TIM_OC2_SetConfig+0xf0>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d113      	bne.n	800927c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800925a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	4313      	orrs	r3, r2
 800926e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	4313      	orrs	r3, r2
 800927a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	621a      	str	r2, [r3, #32]
}
 8009296:	bf00      	nop
 8009298:	371c      	adds	r7, #28
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	40012c00 	.word	0x40012c00
 80092a8:	40014000 	.word	0x40014000
 80092ac:	40014400 	.word	0x40014400

080092b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0303 	bic.w	r3, r3, #3
 80092ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	021b      	lsls	r3, r3, #8
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a21      	ldr	r2, [pc, #132]	; (8009394 <TIM_OC3_SetConfig+0xe4>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d10d      	bne.n	800932e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	021b      	lsls	r3, r3, #8
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800932c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a18      	ldr	r2, [pc, #96]	; (8009394 <TIM_OC3_SetConfig+0xe4>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d007      	beq.n	8009346 <TIM_OC3_SetConfig+0x96>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a17      	ldr	r2, [pc, #92]	; (8009398 <TIM_OC3_SetConfig+0xe8>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d003      	beq.n	8009346 <TIM_OC3_SetConfig+0x96>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a16      	ldr	r2, [pc, #88]	; (800939c <TIM_OC3_SetConfig+0xec>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d113      	bne.n	800936e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800934c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	4313      	orrs	r3, r2
 8009360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	011b      	lsls	r3, r3, #4
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	4313      	orrs	r3, r2
 800936c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	621a      	str	r2, [r3, #32]
}
 8009388:	bf00      	nop
 800938a:	371c      	adds	r7, #28
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	40012c00 	.word	0x40012c00
 8009398:	40014000 	.word	0x40014000
 800939c:	40014400 	.word	0x40014400

080093a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	031b      	lsls	r3, r3, #12
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a14      	ldr	r2, [pc, #80]	; (8009450 <TIM_OC4_SetConfig+0xb0>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d007      	beq.n	8009414 <TIM_OC4_SetConfig+0x74>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a13      	ldr	r2, [pc, #76]	; (8009454 <TIM_OC4_SetConfig+0xb4>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d003      	beq.n	8009414 <TIM_OC4_SetConfig+0x74>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a12      	ldr	r2, [pc, #72]	; (8009458 <TIM_OC4_SetConfig+0xb8>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d109      	bne.n	8009428 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800941a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	019b      	lsls	r3, r3, #6
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	4313      	orrs	r3, r2
 8009426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	621a      	str	r2, [r3, #32]
}
 8009442:	bf00      	nop
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	40012c00 	.word	0x40012c00
 8009454:	40014000 	.word	0x40014000
 8009458:	40014400 	.word	0x40014400

0800945c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800948a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	4313      	orrs	r3, r2
 8009498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80094a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	041b      	lsls	r3, r3, #16
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a13      	ldr	r2, [pc, #76]	; (8009500 <TIM_OC5_SetConfig+0xa4>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d007      	beq.n	80094c6 <TIM_OC5_SetConfig+0x6a>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a12      	ldr	r2, [pc, #72]	; (8009504 <TIM_OC5_SetConfig+0xa8>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d003      	beq.n	80094c6 <TIM_OC5_SetConfig+0x6a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a11      	ldr	r2, [pc, #68]	; (8009508 <TIM_OC5_SetConfig+0xac>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d109      	bne.n	80094da <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	621a      	str	r2, [r3, #32]
}
 80094f4:	bf00      	nop
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	40012c00 	.word	0x40012c00
 8009504:	40014000 	.word	0x40014000
 8009508:	40014400 	.word	0x40014400

0800950c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800953a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800953e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	4313      	orrs	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	051b      	lsls	r3, r3, #20
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	4313      	orrs	r3, r2
 800955e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a14      	ldr	r2, [pc, #80]	; (80095b4 <TIM_OC6_SetConfig+0xa8>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d007      	beq.n	8009578 <TIM_OC6_SetConfig+0x6c>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a13      	ldr	r2, [pc, #76]	; (80095b8 <TIM_OC6_SetConfig+0xac>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d003      	beq.n	8009578 <TIM_OC6_SetConfig+0x6c>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a12      	ldr	r2, [pc, #72]	; (80095bc <TIM_OC6_SetConfig+0xb0>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d109      	bne.n	800958c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800957e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	029b      	lsls	r3, r3, #10
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	4313      	orrs	r3, r2
 800958a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	621a      	str	r2, [r3, #32]
}
 80095a6:	bf00      	nop
 80095a8:	371c      	adds	r7, #28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	40012c00 	.word	0x40012c00
 80095b8:	40014000 	.word	0x40014000
 80095bc:	40014400 	.word	0x40014400

080095c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ee:	f023 0307 	bic.w	r3, r3, #7
 80095f2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	2b70      	cmp	r3, #112	; 0x70
 800960c:	d01a      	beq.n	8009644 <TIM_SlaveTimer_SetConfig+0x84>
 800960e:	2b70      	cmp	r3, #112	; 0x70
 8009610:	d860      	bhi.n	80096d4 <TIM_SlaveTimer_SetConfig+0x114>
 8009612:	2b60      	cmp	r3, #96	; 0x60
 8009614:	d054      	beq.n	80096c0 <TIM_SlaveTimer_SetConfig+0x100>
 8009616:	2b60      	cmp	r3, #96	; 0x60
 8009618:	d85c      	bhi.n	80096d4 <TIM_SlaveTimer_SetConfig+0x114>
 800961a:	2b50      	cmp	r3, #80	; 0x50
 800961c:	d046      	beq.n	80096ac <TIM_SlaveTimer_SetConfig+0xec>
 800961e:	2b50      	cmp	r3, #80	; 0x50
 8009620:	d858      	bhi.n	80096d4 <TIM_SlaveTimer_SetConfig+0x114>
 8009622:	2b40      	cmp	r3, #64	; 0x40
 8009624:	d019      	beq.n	800965a <TIM_SlaveTimer_SetConfig+0x9a>
 8009626:	2b40      	cmp	r3, #64	; 0x40
 8009628:	d854      	bhi.n	80096d4 <TIM_SlaveTimer_SetConfig+0x114>
 800962a:	2b30      	cmp	r3, #48	; 0x30
 800962c:	d055      	beq.n	80096da <TIM_SlaveTimer_SetConfig+0x11a>
 800962e:	2b30      	cmp	r3, #48	; 0x30
 8009630:	d850      	bhi.n	80096d4 <TIM_SlaveTimer_SetConfig+0x114>
 8009632:	2b20      	cmp	r3, #32
 8009634:	d051      	beq.n	80096da <TIM_SlaveTimer_SetConfig+0x11a>
 8009636:	2b20      	cmp	r3, #32
 8009638:	d84c      	bhi.n	80096d4 <TIM_SlaveTimer_SetConfig+0x114>
 800963a:	2b00      	cmp	r3, #0
 800963c:	d04d      	beq.n	80096da <TIM_SlaveTimer_SetConfig+0x11a>
 800963e:	2b10      	cmp	r3, #16
 8009640:	d04b      	beq.n	80096da <TIM_SlaveTimer_SetConfig+0x11a>
 8009642:	e047      	b.n	80096d4 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	68d9      	ldr	r1, [r3, #12]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	f000 f8c1 	bl	80097da <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009658:	e040      	b.n	80096dc <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b05      	cmp	r3, #5
 8009660:	d101      	bne.n	8009666 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e03b      	b.n	80096de <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6a1b      	ldr	r3, [r3, #32]
 800966c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6a1a      	ldr	r2, [r3, #32]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 0201 	bic.w	r2, r2, #1
 800967c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800968c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	011b      	lsls	r3, r3, #4
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	4313      	orrs	r3, r2
 8009698:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	621a      	str	r2, [r3, #32]
      break;
 80096aa:	e017      	b.n	80096dc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6818      	ldr	r0, [r3, #0]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	6899      	ldr	r1, [r3, #8]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	461a      	mov	r2, r3
 80096ba:	f000 f814 	bl	80096e6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80096be:	e00d      	b.n	80096dc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6818      	ldr	r0, [r3, #0]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	6899      	ldr	r1, [r3, #8]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	461a      	mov	r2, r3
 80096ce:	f000 f839 	bl	8009744 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80096d2:	e003      	b.n	80096dc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	75fb      	strb	r3, [r7, #23]
      break;
 80096d8:	e000      	b.n	80096dc <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80096da:	bf00      	nop
  }

  return status;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b087      	sub	sp, #28
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	f023 0201 	bic.w	r2, r3, #1
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	4313      	orrs	r3, r2
 800971a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f023 030a 	bic.w	r3, r3, #10
 8009722:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	4313      	orrs	r3, r2
 800972a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	621a      	str	r2, [r3, #32]
}
 8009738:	bf00      	nop
 800973a:	371c      	adds	r7, #28
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	f023 0210 	bic.w	r2, r3, #16
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800976e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	031b      	lsls	r3, r3, #12
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	4313      	orrs	r3, r2
 8009778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009780:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	011b      	lsls	r3, r3, #4
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	4313      	orrs	r3, r2
 800978a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	621a      	str	r2, [r3, #32]
}
 8009798:	bf00      	nop
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	f043 0307 	orr.w	r3, r3, #7
 80097c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	609a      	str	r2, [r3, #8]
}
 80097ce:	bf00      	nop
 80097d0:	3714      	adds	r7, #20
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097da:	b480      	push	{r7}
 80097dc:	b087      	sub	sp, #28
 80097de:	af00      	add	r7, sp, #0
 80097e0:	60f8      	str	r0, [r7, #12]
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	607a      	str	r2, [r7, #4]
 80097e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	021a      	lsls	r2, r3, #8
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	431a      	orrs	r2, r3
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	4313      	orrs	r3, r2
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	4313      	orrs	r3, r2
 8009806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	609a      	str	r2, [r3, #8]
}
 800980e:	bf00      	nop
 8009810:	371c      	adds	r7, #28
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800981a:	b480      	push	{r7}
 800981c:	b087      	sub	sp, #28
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f003 031f 	and.w	r3, r3, #31
 800982c:	2201      	movs	r2, #1
 800982e:	fa02 f303 	lsl.w	r3, r2, r3
 8009832:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a1a      	ldr	r2, [r3, #32]
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	43db      	mvns	r3, r3
 800983c:	401a      	ands	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6a1a      	ldr	r2, [r3, #32]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	f003 031f 	and.w	r3, r3, #31
 800984c:	6879      	ldr	r1, [r7, #4]
 800984e:	fa01 f303 	lsl.w	r3, r1, r3
 8009852:	431a      	orrs	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	621a      	str	r2, [r3, #32]
}
 8009858:	bf00      	nop
 800985a:	371c      	adds	r7, #28
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009874:	2b01      	cmp	r3, #1
 8009876:	d101      	bne.n	800987c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009878:	2302      	movs	r3, #2
 800987a:	e054      	b.n	8009926 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a24      	ldr	r2, [pc, #144]	; (8009934 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d108      	bne.n	80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a17      	ldr	r2, [pc, #92]	; (8009934 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d00e      	beq.n	80098fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e4:	d009      	beq.n	80098fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a13      	ldr	r2, [pc, #76]	; (8009938 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d004      	beq.n	80098fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a11      	ldr	r2, [pc, #68]	; (800993c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d10c      	bne.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	4313      	orrs	r3, r2
 800990a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	40012c00 	.word	0x40012c00
 8009938:	40000400 	.word	0x40000400
 800993c:	40014000 	.word	0x40014000

08009940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009954:	2b01      	cmp	r3, #1
 8009956:	d101      	bne.n	800995c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009958:	2302      	movs	r3, #2
 800995a:	e060      	b.n	8009a1e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	4313      	orrs	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	4313      	orrs	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4313      	orrs	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	041b      	lsls	r3, r3, #16
 80099d2:	4313      	orrs	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a14      	ldr	r2, [pc, #80]	; (8009a2c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d115      	bne.n	8009a0c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ea:	051b      	lsls	r3, r3, #20
 80099ec:	4313      	orrs	r3, r2
 80099ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	40012c00 	.word	0x40012c00

08009a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8c:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationCallback(htim);
#else
  HAL_TIMEx_CommutCallback(htim);
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f7ff ffca 	bl	8009a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8009a9c:	bf00      	nop
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <TIMEx_DMACommutationHalfCplt>:
  * @brief  TIM DMA Commutation half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab0:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationHalfCpltCallback(htim);
#else
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f7ff ffc2 	bl	8009a44 <HAL_TIMEx_CommutHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8009ac0:	bf00      	nop
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e040      	b.n	8009b5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7f9 fc8e 	bl	800340c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2224      	movs	r2, #36	; 0x24
 8009af4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 0201 	bic.w	r2, r2, #1
 8009b04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fc0a 	bl	800a320 <UART_SetConfig>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e022      	b.n	8009b5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d002      	beq.n	8009b24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fe5a 	bl	800a7d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689a      	ldr	r2, [r3, #8]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0201 	orr.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fee1 	bl	800a91c <UART_CheckIdleState>
 8009b5a:	4603      	mov	r3, r0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08a      	sub	sp, #40	; 0x28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	d142      	bne.n	8009c00 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <HAL_UART_Receive_IT+0x22>
 8009b80:	88fb      	ldrh	r3, [r7, #6]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e03b      	b.n	8009c02 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d101      	bne.n	8009b98 <HAL_UART_Receive_IT+0x34>
 8009b94:	2302      	movs	r3, #2
 8009b96:	e034      	b.n	8009c02 <HAL_UART_Receive_IT+0x9e>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a18      	ldr	r2, [pc, #96]	; (8009c0c <HAL_UART_Receive_IT+0xa8>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d01f      	beq.n	8009bf0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d018      	beq.n	8009bf0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	e853 3f00 	ldrex	r3, [r3]
 8009bca:	613b      	str	r3, [r7, #16]
   return(result);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	461a      	mov	r2, r3
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	623b      	str	r3, [r7, #32]
 8009bde:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be0:	69f9      	ldr	r1, [r7, #28]
 8009be2:	6a3a      	ldr	r2, [r7, #32]
 8009be4:	e841 2300 	strex	r3, r2, [r1]
 8009be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1e6      	bne.n	8009bbe <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009bf0:	88fb      	ldrh	r3, [r7, #6]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	68b9      	ldr	r1, [r7, #8]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 ff9e 	bl	800ab38 <UART_Start_Receive_IT>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	e000      	b.n	8009c02 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009c00:	2302      	movs	r3, #2
  }
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3728      	adds	r7, #40	; 0x28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	40008000 	.word	0x40008000

08009c10 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b08a      	sub	sp, #40	; 0x28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c22:	2b20      	cmp	r3, #32
 8009c24:	d178      	bne.n	8009d18 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <HAL_UART_Transmit_DMA+0x22>
 8009c2c:	88fb      	ldrh	r3, [r7, #6]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e071      	b.n	8009d1a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d101      	bne.n	8009c44 <HAL_UART_Transmit_DMA+0x34>
 8009c40:	2302      	movs	r3, #2
 8009c42:	e06a      	b.n	8009d1a <HAL_UART_Transmit_DMA+0x10a>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	88fa      	ldrh	r2, [r7, #6]
 8009c56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	88fa      	ldrh	r2, [r7, #6]
 8009c5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2221      	movs	r2, #33	; 0x21
 8009c6e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d02b      	beq.n	8009cd0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c7c:	4a29      	ldr	r2, [pc, #164]	; (8009d24 <HAL_UART_Transmit_DMA+0x114>)
 8009c7e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c84:	4a28      	ldr	r2, [pc, #160]	; (8009d28 <HAL_UART_Transmit_DMA+0x118>)
 8009c86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c8c:	4a27      	ldr	r2, [pc, #156]	; (8009d2c <HAL_UART_Transmit_DMA+0x11c>)
 8009c8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c94:	2200      	movs	r2, #0
 8009c96:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3328      	adds	r3, #40	; 0x28
 8009ca8:	461a      	mov	r2, r3
 8009caa:	88fb      	ldrh	r3, [r7, #6]
 8009cac:	f7fb fd44 	bl	8005738 <HAL_DMA_Start_IT>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00c      	beq.n	8009cd0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2210      	movs	r2, #16
 8009cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e024      	b.n	8009d1a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2240      	movs	r2, #64	; 0x40
 8009cd6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	e853 3f00 	ldrex	r3, [r3]
 8009cee:	613b      	str	r3, [r7, #16]
   return(result);
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d00:	623a      	str	r2, [r7, #32]
 8009d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	69f9      	ldr	r1, [r7, #28]
 8009d06:	6a3a      	ldr	r2, [r7, #32]
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e5      	bne.n	8009ce0 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	e000      	b.n	8009d1a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009d18:	2302      	movs	r3, #2
  }
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3728      	adds	r7, #40	; 0x28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	0800addf 	.word	0x0800addf
 8009d28:	0800ae79 	.word	0x0800ae79
 8009d2c:	0800ae95 	.word	0x0800ae95

08009d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b0ba      	sub	sp, #232	; 0xe8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009d5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009d5e:	4013      	ands	r3, r2
 8009d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d115      	bne.n	8009d98 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d70:	f003 0320 	and.w	r3, r3, #32
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00f      	beq.n	8009d98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d7c:	f003 0320 	and.w	r3, r3, #32
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d009      	beq.n	8009d98 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 82a6 	beq.w	800a2da <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	4798      	blx	r3
      }
      return;
 8009d96:	e2a0      	b.n	800a2da <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 8117 	beq.w	8009fd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d106      	bne.n	8009dbc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009dae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009db2:	4b85      	ldr	r3, [pc, #532]	; (8009fc8 <HAL_UART_IRQHandler+0x298>)
 8009db4:	4013      	ands	r3, r2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 810a 	beq.w	8009fd0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d011      	beq.n	8009dec <HAL_UART_IRQHandler+0xbc>
 8009dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00b      	beq.n	8009dec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009de2:	f043 0201 	orr.w	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d011      	beq.n	8009e1c <HAL_UART_IRQHandler+0xec>
 8009df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00b      	beq.n	8009e1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2202      	movs	r2, #2
 8009e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e12:	f043 0204 	orr.w	r2, r3, #4
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e20:	f003 0304 	and.w	r3, r3, #4
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d011      	beq.n	8009e4c <HAL_UART_IRQHandler+0x11c>
 8009e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00b      	beq.n	8009e4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2204      	movs	r2, #4
 8009e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e42:	f043 0202 	orr.w	r2, r3, #2
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d017      	beq.n	8009e88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d105      	bne.n	8009e70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00b      	beq.n	8009e88 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2208      	movs	r2, #8
 8009e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e7e:	f043 0208 	orr.w	r2, r3, #8
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d012      	beq.n	8009eba <HAL_UART_IRQHandler+0x18a>
 8009e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00c      	beq.n	8009eba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eb0:	f043 0220 	orr.w	r2, r3, #32
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 820c 	beq.w	800a2de <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eca:	f003 0320 	and.w	r3, r3, #32
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00d      	beq.n	8009eee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ed6:	f003 0320 	and.w	r3, r3, #32
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d007      	beq.n	8009eee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f02:	2b40      	cmp	r3, #64	; 0x40
 8009f04:	d005      	beq.n	8009f12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d04f      	beq.n	8009fb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 ff00 	bl	800ad18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f22:	2b40      	cmp	r3, #64	; 0x40
 8009f24:	d141      	bne.n	8009faa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f34:	e853 3f00 	ldrex	r3, [r3]
 8009f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f62:	e841 2300 	strex	r3, r2, [r1]
 8009f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1d9      	bne.n	8009f26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d013      	beq.n	8009fa2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7e:	4a13      	ldr	r2, [pc, #76]	; (8009fcc <HAL_UART_IRQHandler+0x29c>)
 8009f80:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fb fc74 	bl	8005874 <HAL_DMA_Abort_IT>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d017      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa0:	e00f      	b.n	8009fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7f8 ffa4 	bl	8002ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa8:	e00b      	b.n	8009fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7f8 ffa0 	bl	8002ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb0:	e007      	b.n	8009fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7f8 ff9c 	bl	8002ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009fc0:	e18d      	b.n	800a2de <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc2:	bf00      	nop
    return;
 8009fc4:	e18b      	b.n	800a2de <HAL_UART_IRQHandler+0x5ae>
 8009fc6:	bf00      	nop
 8009fc8:	04000120 	.word	0x04000120
 8009fcc:	0800af11 	.word	0x0800af11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	f040 8146 	bne.w	800a266 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fde:	f003 0310 	and.w	r3, r3, #16
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 813f 	beq.w	800a266 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fec:	f003 0310 	and.w	r3, r3, #16
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 8138 	beq.w	800a266 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2210      	movs	r2, #16
 8009ffc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a008:	2b40      	cmp	r3, #64	; 0x40
 800a00a:	f040 80b4 	bne.w	800a176 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a01a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 815f 	beq.w	800a2e2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a02a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a02e:	429a      	cmp	r2, r3
 800a030:	f080 8157 	bcs.w	800a2e2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a03a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0320 	and.w	r3, r3, #32
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f040 8085 	bne.w	800a15a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a05c:	e853 3f00 	ldrex	r3, [r3]
 800a060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a06c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	461a      	mov	r2, r3
 800a076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a07a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a07e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a086:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1da      	bne.n	800a050 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3308      	adds	r3, #8
 800a0a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0a4:	e853 3f00 	ldrex	r3, [r3]
 800a0a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0ac:	f023 0301 	bic.w	r3, r3, #1
 800a0b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3308      	adds	r3, #8
 800a0ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0ca:	e841 2300 	strex	r3, r2, [r1]
 800a0ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1e1      	bne.n	800a09a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3308      	adds	r3, #8
 800a0dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0e0:	e853 3f00 	ldrex	r3, [r3]
 800a0e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a102:	e841 2300 	strex	r3, r2, [r1]
 800a106:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1e3      	bne.n	800a0d6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2220      	movs	r2, #32
 800a112:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a122:	e853 3f00 	ldrex	r3, [r3]
 800a126:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a12a:	f023 0310 	bic.w	r3, r3, #16
 800a12e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a13c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a13e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a144:	e841 2300 	strex	r3, r2, [r1]
 800a148:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1e4      	bne.n	800a11a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a154:	4618      	mov	r0, r3
 800a156:	f7fb fb4f 	bl	80057f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a166:	b29b      	uxth	r3, r3
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f8ca 	bl	800a308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a174:	e0b5      	b.n	800a2e2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a182:	b29b      	uxth	r3, r3
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a190:	b29b      	uxth	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 80a7 	beq.w	800a2e6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800a198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f000 80a2 	beq.w	800a2e6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a1c4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1cc:	e841 2300 	strex	r3, r2, [r1]
 800a1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e4      	bne.n	800a1a2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3308      	adds	r3, #8
 800a1de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	e853 3f00 	ldrex	r3, [r3]
 800a1e6:	623b      	str	r3, [r7, #32]
   return(result);
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	f023 0301 	bic.w	r3, r3, #1
 800a1ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1fc:	633a      	str	r2, [r7, #48]	; 0x30
 800a1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a204:	e841 2300 	strex	r3, r2, [r1]
 800a208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1e3      	bne.n	800a1d8 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2220      	movs	r2, #32
 800a214:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	e853 3f00 	ldrex	r3, [r3]
 800a22e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f023 0310 	bic.w	r3, r3, #16
 800a236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a244:	61fb      	str	r3, [r7, #28]
 800a246:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a248:	69b9      	ldr	r1, [r7, #24]
 800a24a:	69fa      	ldr	r2, [r7, #28]
 800a24c:	e841 2300 	strex	r3, r2, [r1]
 800a250:	617b      	str	r3, [r7, #20]
   return(result);
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1e4      	bne.n	800a222 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f852 	bl	800a308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a264:	e03f      	b.n	800a2e6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a26a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00e      	beq.n	800a290 <HAL_UART_IRQHandler+0x560>
 800a272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d008      	beq.n	800a290 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a286:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 ffe1 	bl	800b250 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a28e:	e02d      	b.n	800a2ec <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00e      	beq.n	800a2ba <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a29c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d008      	beq.n	800a2ba <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d01c      	beq.n	800a2ea <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	4798      	blx	r3
    }
    return;
 800a2b8:	e017      	b.n	800a2ea <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d012      	beq.n	800a2ec <HAL_UART_IRQHandler+0x5bc>
 800a2c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00c      	beq.n	800a2ec <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fe32 	bl	800af3c <UART_EndTransmit_IT>
    return;
 800a2d8:	e008      	b.n	800a2ec <HAL_UART_IRQHandler+0x5bc>
      return;
 800a2da:	bf00      	nop
 800a2dc:	e006      	b.n	800a2ec <HAL_UART_IRQHandler+0x5bc>
    return;
 800a2de:	bf00      	nop
 800a2e0:	e004      	b.n	800a2ec <HAL_UART_IRQHandler+0x5bc>
      return;
 800a2e2:	bf00      	nop
 800a2e4:	e002      	b.n	800a2ec <HAL_UART_IRQHandler+0x5bc>
      return;
 800a2e6:	bf00      	nop
 800a2e8:	e000      	b.n	800a2ec <HAL_UART_IRQHandler+0x5bc>
    return;
 800a2ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a2ec:	37e8      	adds	r7, #232	; 0xe8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop

0800a2f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a320:	b5b0      	push	{r4, r5, r7, lr}
 800a322:	b088      	sub	sp, #32
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689a      	ldr	r2, [r3, #8]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	431a      	orrs	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	69db      	ldr	r3, [r3, #28]
 800a340:	4313      	orrs	r3, r2
 800a342:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	4ba4      	ldr	r3, [pc, #656]	; (800a5dc <UART_SetConfig+0x2bc>)
 800a34c:	4013      	ands	r3, r2
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	6812      	ldr	r2, [r2, #0]
 800a352:	69f9      	ldr	r1, [r7, #28]
 800a354:	430b      	orrs	r3, r1
 800a356:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68da      	ldr	r2, [r3, #12]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	430a      	orrs	r2, r1
 800a36c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a99      	ldr	r2, [pc, #612]	; (800a5e0 <UART_SetConfig+0x2c0>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d004      	beq.n	800a388 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	69fa      	ldr	r2, [r7, #28]
 800a384:	4313      	orrs	r3, r2
 800a386:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	430a      	orrs	r2, r1
 800a39a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a90      	ldr	r2, [pc, #576]	; (800a5e4 <UART_SetConfig+0x2c4>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d121      	bne.n	800a3ea <UART_SetConfig+0xca>
 800a3a6:	4b90      	ldr	r3, [pc, #576]	; (800a5e8 <UART_SetConfig+0x2c8>)
 800a3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ac:	f003 0303 	and.w	r3, r3, #3
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d817      	bhi.n	800a3e4 <UART_SetConfig+0xc4>
 800a3b4:	a201      	add	r2, pc, #4	; (adr r2, 800a3bc <UART_SetConfig+0x9c>)
 800a3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ba:	bf00      	nop
 800a3bc:	0800a3cd 	.word	0x0800a3cd
 800a3c0:	0800a3d9 	.word	0x0800a3d9
 800a3c4:	0800a3d3 	.word	0x0800a3d3
 800a3c8:	0800a3df 	.word	0x0800a3df
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	76fb      	strb	r3, [r7, #27]
 800a3d0:	e0bc      	b.n	800a54c <UART_SetConfig+0x22c>
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	76fb      	strb	r3, [r7, #27]
 800a3d6:	e0b9      	b.n	800a54c <UART_SetConfig+0x22c>
 800a3d8:	2304      	movs	r3, #4
 800a3da:	76fb      	strb	r3, [r7, #27]
 800a3dc:	e0b6      	b.n	800a54c <UART_SetConfig+0x22c>
 800a3de:	2308      	movs	r3, #8
 800a3e0:	76fb      	strb	r3, [r7, #27]
 800a3e2:	e0b3      	b.n	800a54c <UART_SetConfig+0x22c>
 800a3e4:	2310      	movs	r3, #16
 800a3e6:	76fb      	strb	r3, [r7, #27]
 800a3e8:	e0b0      	b.n	800a54c <UART_SetConfig+0x22c>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a7f      	ldr	r2, [pc, #508]	; (800a5ec <UART_SetConfig+0x2cc>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d132      	bne.n	800a45a <UART_SetConfig+0x13a>
 800a3f4:	4b7c      	ldr	r3, [pc, #496]	; (800a5e8 <UART_SetConfig+0x2c8>)
 800a3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fa:	f003 030c 	and.w	r3, r3, #12
 800a3fe:	2b0c      	cmp	r3, #12
 800a400:	d828      	bhi.n	800a454 <UART_SetConfig+0x134>
 800a402:	a201      	add	r2, pc, #4	; (adr r2, 800a408 <UART_SetConfig+0xe8>)
 800a404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a408:	0800a43d 	.word	0x0800a43d
 800a40c:	0800a455 	.word	0x0800a455
 800a410:	0800a455 	.word	0x0800a455
 800a414:	0800a455 	.word	0x0800a455
 800a418:	0800a449 	.word	0x0800a449
 800a41c:	0800a455 	.word	0x0800a455
 800a420:	0800a455 	.word	0x0800a455
 800a424:	0800a455 	.word	0x0800a455
 800a428:	0800a443 	.word	0x0800a443
 800a42c:	0800a455 	.word	0x0800a455
 800a430:	0800a455 	.word	0x0800a455
 800a434:	0800a455 	.word	0x0800a455
 800a438:	0800a44f 	.word	0x0800a44f
 800a43c:	2300      	movs	r3, #0
 800a43e:	76fb      	strb	r3, [r7, #27]
 800a440:	e084      	b.n	800a54c <UART_SetConfig+0x22c>
 800a442:	2302      	movs	r3, #2
 800a444:	76fb      	strb	r3, [r7, #27]
 800a446:	e081      	b.n	800a54c <UART_SetConfig+0x22c>
 800a448:	2304      	movs	r3, #4
 800a44a:	76fb      	strb	r3, [r7, #27]
 800a44c:	e07e      	b.n	800a54c <UART_SetConfig+0x22c>
 800a44e:	2308      	movs	r3, #8
 800a450:	76fb      	strb	r3, [r7, #27]
 800a452:	e07b      	b.n	800a54c <UART_SetConfig+0x22c>
 800a454:	2310      	movs	r3, #16
 800a456:	76fb      	strb	r3, [r7, #27]
 800a458:	e078      	b.n	800a54c <UART_SetConfig+0x22c>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a64      	ldr	r2, [pc, #400]	; (800a5f0 <UART_SetConfig+0x2d0>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d120      	bne.n	800a4a6 <UART_SetConfig+0x186>
 800a464:	4b60      	ldr	r3, [pc, #384]	; (800a5e8 <UART_SetConfig+0x2c8>)
 800a466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a46e:	2b30      	cmp	r3, #48	; 0x30
 800a470:	d013      	beq.n	800a49a <UART_SetConfig+0x17a>
 800a472:	2b30      	cmp	r3, #48	; 0x30
 800a474:	d814      	bhi.n	800a4a0 <UART_SetConfig+0x180>
 800a476:	2b20      	cmp	r3, #32
 800a478:	d009      	beq.n	800a48e <UART_SetConfig+0x16e>
 800a47a:	2b20      	cmp	r3, #32
 800a47c:	d810      	bhi.n	800a4a0 <UART_SetConfig+0x180>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d002      	beq.n	800a488 <UART_SetConfig+0x168>
 800a482:	2b10      	cmp	r3, #16
 800a484:	d006      	beq.n	800a494 <UART_SetConfig+0x174>
 800a486:	e00b      	b.n	800a4a0 <UART_SetConfig+0x180>
 800a488:	2300      	movs	r3, #0
 800a48a:	76fb      	strb	r3, [r7, #27]
 800a48c:	e05e      	b.n	800a54c <UART_SetConfig+0x22c>
 800a48e:	2302      	movs	r3, #2
 800a490:	76fb      	strb	r3, [r7, #27]
 800a492:	e05b      	b.n	800a54c <UART_SetConfig+0x22c>
 800a494:	2304      	movs	r3, #4
 800a496:	76fb      	strb	r3, [r7, #27]
 800a498:	e058      	b.n	800a54c <UART_SetConfig+0x22c>
 800a49a:	2308      	movs	r3, #8
 800a49c:	76fb      	strb	r3, [r7, #27]
 800a49e:	e055      	b.n	800a54c <UART_SetConfig+0x22c>
 800a4a0:	2310      	movs	r3, #16
 800a4a2:	76fb      	strb	r3, [r7, #27]
 800a4a4:	e052      	b.n	800a54c <UART_SetConfig+0x22c>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a52      	ldr	r2, [pc, #328]	; (800a5f4 <UART_SetConfig+0x2d4>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d120      	bne.n	800a4f2 <UART_SetConfig+0x1d2>
 800a4b0:	4b4d      	ldr	r3, [pc, #308]	; (800a5e8 <UART_SetConfig+0x2c8>)
 800a4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a4ba:	2bc0      	cmp	r3, #192	; 0xc0
 800a4bc:	d013      	beq.n	800a4e6 <UART_SetConfig+0x1c6>
 800a4be:	2bc0      	cmp	r3, #192	; 0xc0
 800a4c0:	d814      	bhi.n	800a4ec <UART_SetConfig+0x1cc>
 800a4c2:	2b80      	cmp	r3, #128	; 0x80
 800a4c4:	d009      	beq.n	800a4da <UART_SetConfig+0x1ba>
 800a4c6:	2b80      	cmp	r3, #128	; 0x80
 800a4c8:	d810      	bhi.n	800a4ec <UART_SetConfig+0x1cc>
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <UART_SetConfig+0x1b4>
 800a4ce:	2b40      	cmp	r3, #64	; 0x40
 800a4d0:	d006      	beq.n	800a4e0 <UART_SetConfig+0x1c0>
 800a4d2:	e00b      	b.n	800a4ec <UART_SetConfig+0x1cc>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	76fb      	strb	r3, [r7, #27]
 800a4d8:	e038      	b.n	800a54c <UART_SetConfig+0x22c>
 800a4da:	2302      	movs	r3, #2
 800a4dc:	76fb      	strb	r3, [r7, #27]
 800a4de:	e035      	b.n	800a54c <UART_SetConfig+0x22c>
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	76fb      	strb	r3, [r7, #27]
 800a4e4:	e032      	b.n	800a54c <UART_SetConfig+0x22c>
 800a4e6:	2308      	movs	r3, #8
 800a4e8:	76fb      	strb	r3, [r7, #27]
 800a4ea:	e02f      	b.n	800a54c <UART_SetConfig+0x22c>
 800a4ec:	2310      	movs	r3, #16
 800a4ee:	76fb      	strb	r3, [r7, #27]
 800a4f0:	e02c      	b.n	800a54c <UART_SetConfig+0x22c>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a3a      	ldr	r2, [pc, #232]	; (800a5e0 <UART_SetConfig+0x2c0>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d125      	bne.n	800a548 <UART_SetConfig+0x228>
 800a4fc:	4b3a      	ldr	r3, [pc, #232]	; (800a5e8 <UART_SetConfig+0x2c8>)
 800a4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a502:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a506:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a50a:	d017      	beq.n	800a53c <UART_SetConfig+0x21c>
 800a50c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a510:	d817      	bhi.n	800a542 <UART_SetConfig+0x222>
 800a512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a516:	d00b      	beq.n	800a530 <UART_SetConfig+0x210>
 800a518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a51c:	d811      	bhi.n	800a542 <UART_SetConfig+0x222>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <UART_SetConfig+0x20a>
 800a522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a526:	d006      	beq.n	800a536 <UART_SetConfig+0x216>
 800a528:	e00b      	b.n	800a542 <UART_SetConfig+0x222>
 800a52a:	2300      	movs	r3, #0
 800a52c:	76fb      	strb	r3, [r7, #27]
 800a52e:	e00d      	b.n	800a54c <UART_SetConfig+0x22c>
 800a530:	2302      	movs	r3, #2
 800a532:	76fb      	strb	r3, [r7, #27]
 800a534:	e00a      	b.n	800a54c <UART_SetConfig+0x22c>
 800a536:	2304      	movs	r3, #4
 800a538:	76fb      	strb	r3, [r7, #27]
 800a53a:	e007      	b.n	800a54c <UART_SetConfig+0x22c>
 800a53c:	2308      	movs	r3, #8
 800a53e:	76fb      	strb	r3, [r7, #27]
 800a540:	e004      	b.n	800a54c <UART_SetConfig+0x22c>
 800a542:	2310      	movs	r3, #16
 800a544:	76fb      	strb	r3, [r7, #27]
 800a546:	e001      	b.n	800a54c <UART_SetConfig+0x22c>
 800a548:	2310      	movs	r3, #16
 800a54a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a23      	ldr	r2, [pc, #140]	; (800a5e0 <UART_SetConfig+0x2c0>)
 800a552:	4293      	cmp	r3, r2
 800a554:	f040 8084 	bne.w	800a660 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a558:	7efb      	ldrb	r3, [r7, #27]
 800a55a:	2b08      	cmp	r3, #8
 800a55c:	d823      	bhi.n	800a5a6 <UART_SetConfig+0x286>
 800a55e:	a201      	add	r2, pc, #4	; (adr r2, 800a564 <UART_SetConfig+0x244>)
 800a560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a564:	0800a589 	.word	0x0800a589
 800a568:	0800a5a7 	.word	0x0800a5a7
 800a56c:	0800a591 	.word	0x0800a591
 800a570:	0800a5a7 	.word	0x0800a5a7
 800a574:	0800a597 	.word	0x0800a597
 800a578:	0800a5a7 	.word	0x0800a5a7
 800a57c:	0800a5a7 	.word	0x0800a5a7
 800a580:	0800a5a7 	.word	0x0800a5a7
 800a584:	0800a59f 	.word	0x0800a59f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a588:	f7fc feee 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 800a58c:	6178      	str	r0, [r7, #20]
        break;
 800a58e:	e00f      	b.n	800a5b0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a590:	4b19      	ldr	r3, [pc, #100]	; (800a5f8 <UART_SetConfig+0x2d8>)
 800a592:	617b      	str	r3, [r7, #20]
        break;
 800a594:	e00c      	b.n	800a5b0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a596:	f7fc fe4f 	bl	8007238 <HAL_RCC_GetSysClockFreq>
 800a59a:	6178      	str	r0, [r7, #20]
        break;
 800a59c:	e008      	b.n	800a5b0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a59e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5a2:	617b      	str	r3, [r7, #20]
        break;
 800a5a4:	e004      	b.n	800a5b0 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	76bb      	strb	r3, [r7, #26]
        break;
 800a5ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 8102 	beq.w	800a7bc <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	005b      	lsls	r3, r3, #1
 800a5c0:	4413      	add	r3, r2
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d305      	bcc.n	800a5d4 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d913      	bls.n	800a5fc <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	76bb      	strb	r3, [r7, #26]
 800a5d8:	e0f0      	b.n	800a7bc <UART_SetConfig+0x49c>
 800a5da:	bf00      	nop
 800a5dc:	efff69f3 	.word	0xefff69f3
 800a5e0:	40008000 	.word	0x40008000
 800a5e4:	40013800 	.word	0x40013800
 800a5e8:	40021000 	.word	0x40021000
 800a5ec:	40004400 	.word	0x40004400
 800a5f0:	40004800 	.word	0x40004800
 800a5f4:	40004c00 	.word	0x40004c00
 800a5f8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f04f 0100 	mov.w	r1, #0
 800a604:	f04f 0200 	mov.w	r2, #0
 800a608:	f04f 0300 	mov.w	r3, #0
 800a60c:	020b      	lsls	r3, r1, #8
 800a60e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a612:	0202      	lsls	r2, r0, #8
 800a614:	6879      	ldr	r1, [r7, #4]
 800a616:	6849      	ldr	r1, [r1, #4]
 800a618:	0849      	lsrs	r1, r1, #1
 800a61a:	4608      	mov	r0, r1
 800a61c:	f04f 0100 	mov.w	r1, #0
 800a620:	1814      	adds	r4, r2, r0
 800a622:	eb43 0501 	adc.w	r5, r3, r1
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	461a      	mov	r2, r3
 800a62c:	f04f 0300 	mov.w	r3, #0
 800a630:	4620      	mov	r0, r4
 800a632:	4629      	mov	r1, r5
 800a634:	f7f5 fe3c 	bl	80002b0 <__aeabi_uldivmod>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4613      	mov	r3, r2
 800a63e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a646:	d308      	bcc.n	800a65a <UART_SetConfig+0x33a>
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a64e:	d204      	bcs.n	800a65a <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	60da      	str	r2, [r3, #12]
 800a658:	e0b0      	b.n	800a7bc <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	76bb      	strb	r3, [r7, #26]
 800a65e:	e0ad      	b.n	800a7bc <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a668:	d15b      	bne.n	800a722 <UART_SetConfig+0x402>
  {
    switch (clocksource)
 800a66a:	7efb      	ldrb	r3, [r7, #27]
 800a66c:	2b08      	cmp	r3, #8
 800a66e:	d828      	bhi.n	800a6c2 <UART_SetConfig+0x3a2>
 800a670:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <UART_SetConfig+0x358>)
 800a672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a676:	bf00      	nop
 800a678:	0800a69d 	.word	0x0800a69d
 800a67c:	0800a6a5 	.word	0x0800a6a5
 800a680:	0800a6ad 	.word	0x0800a6ad
 800a684:	0800a6c3 	.word	0x0800a6c3
 800a688:	0800a6b3 	.word	0x0800a6b3
 800a68c:	0800a6c3 	.word	0x0800a6c3
 800a690:	0800a6c3 	.word	0x0800a6c3
 800a694:	0800a6c3 	.word	0x0800a6c3
 800a698:	0800a6bb 	.word	0x0800a6bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a69c:	f7fc fe64 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 800a6a0:	6178      	str	r0, [r7, #20]
        break;
 800a6a2:	e013      	b.n	800a6cc <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6a4:	f7fc fe76 	bl	8007394 <HAL_RCC_GetPCLK2Freq>
 800a6a8:	6178      	str	r0, [r7, #20]
        break;
 800a6aa:	e00f      	b.n	800a6cc <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6ac:	4b49      	ldr	r3, [pc, #292]	; (800a7d4 <UART_SetConfig+0x4b4>)
 800a6ae:	617b      	str	r3, [r7, #20]
        break;
 800a6b0:	e00c      	b.n	800a6cc <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6b2:	f7fc fdc1 	bl	8007238 <HAL_RCC_GetSysClockFreq>
 800a6b6:	6178      	str	r0, [r7, #20]
        break;
 800a6b8:	e008      	b.n	800a6cc <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6be:	617b      	str	r3, [r7, #20]
        break;
 800a6c0:	e004      	b.n	800a6cc <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	76bb      	strb	r3, [r7, #26]
        break;
 800a6ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d074      	beq.n	800a7bc <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	005a      	lsls	r2, r3, #1
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	085b      	lsrs	r3, r3, #1
 800a6dc:	441a      	add	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	2b0f      	cmp	r3, #15
 800a6ec:	d916      	bls.n	800a71c <UART_SetConfig+0x3fc>
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f4:	d212      	bcs.n	800a71c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	f023 030f 	bic.w	r3, r3, #15
 800a6fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	085b      	lsrs	r3, r3, #1
 800a704:	b29b      	uxth	r3, r3
 800a706:	f003 0307 	and.w	r3, r3, #7
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	89fb      	ldrh	r3, [r7, #14]
 800a70e:	4313      	orrs	r3, r2
 800a710:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	89fa      	ldrh	r2, [r7, #14]
 800a718:	60da      	str	r2, [r3, #12]
 800a71a:	e04f      	b.n	800a7bc <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	76bb      	strb	r3, [r7, #26]
 800a720:	e04c      	b.n	800a7bc <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a722:	7efb      	ldrb	r3, [r7, #27]
 800a724:	2b08      	cmp	r3, #8
 800a726:	d828      	bhi.n	800a77a <UART_SetConfig+0x45a>
 800a728:	a201      	add	r2, pc, #4	; (adr r2, 800a730 <UART_SetConfig+0x410>)
 800a72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72e:	bf00      	nop
 800a730:	0800a755 	.word	0x0800a755
 800a734:	0800a75d 	.word	0x0800a75d
 800a738:	0800a765 	.word	0x0800a765
 800a73c:	0800a77b 	.word	0x0800a77b
 800a740:	0800a76b 	.word	0x0800a76b
 800a744:	0800a77b 	.word	0x0800a77b
 800a748:	0800a77b 	.word	0x0800a77b
 800a74c:	0800a77b 	.word	0x0800a77b
 800a750:	0800a773 	.word	0x0800a773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a754:	f7fc fe08 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 800a758:	6178      	str	r0, [r7, #20]
        break;
 800a75a:	e013      	b.n	800a784 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a75c:	f7fc fe1a 	bl	8007394 <HAL_RCC_GetPCLK2Freq>
 800a760:	6178      	str	r0, [r7, #20]
        break;
 800a762:	e00f      	b.n	800a784 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a764:	4b1b      	ldr	r3, [pc, #108]	; (800a7d4 <UART_SetConfig+0x4b4>)
 800a766:	617b      	str	r3, [r7, #20]
        break;
 800a768:	e00c      	b.n	800a784 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a76a:	f7fc fd65 	bl	8007238 <HAL_RCC_GetSysClockFreq>
 800a76e:	6178      	str	r0, [r7, #20]
        break;
 800a770:	e008      	b.n	800a784 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a776:	617b      	str	r3, [r7, #20]
        break;
 800a778:	e004      	b.n	800a784 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	76bb      	strb	r3, [r7, #26]
        break;
 800a782:	bf00      	nop
    }

    if (pclk != 0U)
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d018      	beq.n	800a7bc <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	085a      	lsrs	r2, r3, #1
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	441a      	add	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	fbb2 f3f3 	udiv	r3, r2, r3
 800a79c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b0f      	cmp	r3, #15
 800a7a2:	d909      	bls.n	800a7b8 <UART_SetConfig+0x498>
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7aa:	d205      	bcs.n	800a7b8 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	60da      	str	r2, [r3, #12]
 800a7b6:	e001      	b.n	800a7bc <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a7c8:	7ebb      	ldrb	r3, [r7, #26]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3720      	adds	r7, #32
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	00f42400 	.word	0x00f42400

0800a7d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	f003 0301 	and.w	r3, r3, #1
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00a      	beq.n	800a802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	430a      	orrs	r2, r1
 800a800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	f003 0302 	and.w	r3, r3, #2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00a      	beq.n	800a846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	430a      	orrs	r2, r1
 800a844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	f003 0308 	and.w	r3, r3, #8
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00a      	beq.n	800a868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	430a      	orrs	r2, r1
 800a866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	f003 0310 	and.w	r3, r3, #16
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00a      	beq.n	800a88a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	430a      	orrs	r2, r1
 800a888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	f003 0320 	and.w	r3, r3, #32
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00a      	beq.n	800a8ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d01a      	beq.n	800a8ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8d6:	d10a      	bne.n	800a8ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00a      	beq.n	800a910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	605a      	str	r2, [r3, #4]
  }
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af02      	add	r7, sp, #8
 800a922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a92c:	f7f9 f808 	bl	8003940 <HAL_GetTick>
 800a930:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0308 	and.w	r3, r3, #8
 800a93c:	2b08      	cmp	r3, #8
 800a93e:	d10e      	bne.n	800a95e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f82d 	bl	800a9ae <UART_WaitOnFlagUntilTimeout>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e023      	b.n	800a9a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0304 	and.w	r3, r3, #4
 800a968:	2b04      	cmp	r3, #4
 800a96a:	d10e      	bne.n	800a98a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a96c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f817 	bl	800a9ae <UART_WaitOnFlagUntilTimeout>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e00d      	b.n	800a9a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2220      	movs	r2, #32
 800a98e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2220      	movs	r2, #32
 800a994:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b09c      	sub	sp, #112	; 0x70
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	60f8      	str	r0, [r7, #12]
 800a9b6:	60b9      	str	r1, [r7, #8]
 800a9b8:	603b      	str	r3, [r7, #0]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9be:	e0a5      	b.n	800ab0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c6:	f000 80a1 	beq.w	800ab0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9ca:	f7f8 ffb9 	bl	8003940 <HAL_GetTick>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d302      	bcc.n	800a9e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a9da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d13e      	bne.n	800aa5e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e8:	e853 3f00 	ldrex	r3, [r3]
 800a9ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9f4:	667b      	str	r3, [r7, #100]	; 0x64
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa06:	e841 2300 	strex	r3, r2, [r1]
 800aa0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aa0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1e6      	bne.n	800a9e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3308      	adds	r3, #8
 800aa18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa1c:	e853 3f00 	ldrex	r3, [r3]
 800aa20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	f023 0301 	bic.w	r3, r3, #1
 800aa28:	663b      	str	r3, [r7, #96]	; 0x60
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3308      	adds	r3, #8
 800aa30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa32:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa3a:	e841 2300 	strex	r3, r2, [r1]
 800aa3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1e5      	bne.n	800aa12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2220      	movs	r2, #32
 800aa4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e067      	b.n	800ab2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d04f      	beq.n	800ab0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa7a:	d147      	bne.n	800ab0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa84:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8e:	e853 3f00 	ldrex	r3, [r3]
 800aa92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaa4:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aaaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaac:	e841 2300 	strex	r3, r2, [r1]
 800aab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1e6      	bne.n	800aa86 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3308      	adds	r3, #8
 800aabe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	e853 3f00 	ldrex	r3, [r3]
 800aac6:	613b      	str	r3, [r7, #16]
   return(result);
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	f023 0301 	bic.w	r3, r3, #1
 800aace:	66bb      	str	r3, [r7, #104]	; 0x68
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3308      	adds	r3, #8
 800aad6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aad8:	623a      	str	r2, [r7, #32]
 800aada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aadc:	69f9      	ldr	r1, [r7, #28]
 800aade:	6a3a      	ldr	r2, [r7, #32]
 800aae0:	e841 2300 	strex	r3, r2, [r1]
 800aae4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e5      	bne.n	800aab8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2220      	movs	r2, #32
 800aaf0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2220      	movs	r2, #32
 800aaf6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2220      	movs	r2, #32
 800aafc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	e010      	b.n	800ab2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	69da      	ldr	r2, [r3, #28]
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	4013      	ands	r3, r2
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	bf0c      	ite	eq
 800ab1c:	2301      	moveq	r3, #1
 800ab1e:	2300      	movne	r3, #0
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	461a      	mov	r2, r3
 800ab24:	79fb      	ldrb	r3, [r7, #7]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	f43f af4a 	beq.w	800a9c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3770      	adds	r7, #112	; 0x70
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
	...

0800ab38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b097      	sub	sp, #92	; 0x5c
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	4613      	mov	r3, r2
 800ab44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	88fa      	ldrh	r2, [r7, #6]
 800ab50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	88fa      	ldrh	r2, [r7, #6]
 800ab58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab6a:	d10e      	bne.n	800ab8a <UART_Start_Receive_IT+0x52>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d105      	bne.n	800ab80 <UART_Start_Receive_IT+0x48>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ab7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab7e:	e02d      	b.n	800abdc <UART_Start_Receive_IT+0xa4>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	22ff      	movs	r2, #255	; 0xff
 800ab84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab88:	e028      	b.n	800abdc <UART_Start_Receive_IT+0xa4>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10d      	bne.n	800abae <UART_Start_Receive_IT+0x76>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d104      	bne.n	800aba4 <UART_Start_Receive_IT+0x6c>
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	22ff      	movs	r2, #255	; 0xff
 800ab9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aba2:	e01b      	b.n	800abdc <UART_Start_Receive_IT+0xa4>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	227f      	movs	r2, #127	; 0x7f
 800aba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abac:	e016      	b.n	800abdc <UART_Start_Receive_IT+0xa4>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abb6:	d10d      	bne.n	800abd4 <UART_Start_Receive_IT+0x9c>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d104      	bne.n	800abca <UART_Start_Receive_IT+0x92>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	227f      	movs	r2, #127	; 0x7f
 800abc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abc8:	e008      	b.n	800abdc <UART_Start_Receive_IT+0xa4>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	223f      	movs	r2, #63	; 0x3f
 800abce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abd2:	e003      	b.n	800abdc <UART_Start_Receive_IT+0xa4>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2222      	movs	r2, #34	; 0x22
 800abe8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3308      	adds	r3, #8
 800abf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfc:	f043 0301 	orr.w	r3, r3, #1
 800ac00:	657b      	str	r3, [r7, #84]	; 0x54
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	3308      	adds	r3, #8
 800ac08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac0a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ac0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac12:	e841 2300 	strex	r3, r2, [r1]
 800ac16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ac18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1e5      	bne.n	800abea <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac26:	d107      	bne.n	800ac38 <UART_Start_Receive_IT+0x100>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d103      	bne.n	800ac38 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	4a24      	ldr	r2, [pc, #144]	; (800acc4 <UART_Start_Receive_IT+0x18c>)
 800ac34:	665a      	str	r2, [r3, #100]	; 0x64
 800ac36:	e002      	b.n	800ac3e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	4a23      	ldr	r2, [pc, #140]	; (800acc8 <UART_Start_Receive_IT+0x190>)
 800ac3c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d019      	beq.n	800ac82 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	e853 3f00 	ldrex	r3, [r3]
 800ac5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ac62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ac6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac74:	e841 2300 	strex	r3, r2, [r1]
 800ac78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1e6      	bne.n	800ac4e <UART_Start_Receive_IT+0x116>
 800ac80:	e018      	b.n	800acb4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	e853 3f00 	ldrex	r3, [r3]
 800ac8e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	f043 0320 	orr.w	r3, r3, #32
 800ac96:	653b      	str	r3, [r7, #80]	; 0x50
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca0:	623b      	str	r3, [r7, #32]
 800aca2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca4:	69f9      	ldr	r1, [r7, #28]
 800aca6:	6a3a      	ldr	r2, [r7, #32]
 800aca8:	e841 2300 	strex	r3, r2, [r1]
 800acac:	61bb      	str	r3, [r7, #24]
   return(result);
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e6      	bne.n	800ac82 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	375c      	adds	r7, #92	; 0x5c
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	0800b0f1 	.word	0x0800b0f1
 800acc8:	0800af91 	.word	0x0800af91

0800accc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800accc:	b480      	push	{r7}
 800acce:	b089      	sub	sp, #36	; 0x24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	e853 3f00 	ldrex	r3, [r3]
 800ace0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ace8:	61fb      	str	r3, [r7, #28]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	61bb      	str	r3, [r7, #24]
 800acf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf6:	6979      	ldr	r1, [r7, #20]
 800acf8:	69ba      	ldr	r2, [r7, #24]
 800acfa:	e841 2300 	strex	r3, r2, [r1]
 800acfe:	613b      	str	r3, [r7, #16]
   return(result);
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1e6      	bne.n	800acd4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2220      	movs	r2, #32
 800ad0a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800ad0c:	bf00      	nop
 800ad0e:	3724      	adds	r7, #36	; 0x24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b095      	sub	sp, #84	; 0x54
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad28:	e853 3f00 	ldrex	r3, [r3]
 800ad2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad3e:	643b      	str	r3, [r7, #64]	; 0x40
 800ad40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad46:	e841 2300 	strex	r3, r2, [r1]
 800ad4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e6      	bne.n	800ad20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3308      	adds	r3, #8
 800ad58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	6a3b      	ldr	r3, [r7, #32]
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	f023 0301 	bic.w	r3, r3, #1
 800ad68:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3308      	adds	r3, #8
 800ad70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad72:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e5      	bne.n	800ad52 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d118      	bne.n	800adc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	e853 3f00 	ldrex	r3, [r3]
 800ad9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	f023 0310 	bic.w	r3, r3, #16
 800ada2:	647b      	str	r3, [r7, #68]	; 0x44
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	461a      	mov	r2, r3
 800adaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adac:	61bb      	str	r3, [r7, #24]
 800adae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb0:	6979      	ldr	r1, [r7, #20]
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	e841 2300 	strex	r3, r2, [r1]
 800adb8:	613b      	str	r3, [r7, #16]
   return(result);
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1e6      	bne.n	800ad8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2220      	movs	r2, #32
 800adc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800add2:	bf00      	nop
 800add4:	3754      	adds	r7, #84	; 0x54
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b090      	sub	sp, #64	; 0x40
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0320 	and.w	r3, r3, #32
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d137      	bne.n	800ae6a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800adfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adfc:	2200      	movs	r2, #0
 800adfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	3308      	adds	r3, #8
 800ae08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	e853 3f00 	ldrex	r3, [r3]
 800ae10:	623b      	str	r3, [r7, #32]
   return(result);
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae18:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	3308      	adds	r3, #8
 800ae20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae22:	633a      	str	r2, [r7, #48]	; 0x30
 800ae24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae2a:	e841 2300 	strex	r3, r2, [r1]
 800ae2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1e5      	bne.n	800ae02 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	e853 3f00 	ldrex	r3, [r3]
 800ae42:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	461a      	mov	r2, r3
 800ae52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae54:	61fb      	str	r3, [r7, #28]
 800ae56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae58:	69b9      	ldr	r1, [r7, #24]
 800ae5a:	69fa      	ldr	r2, [r7, #28]
 800ae5c:	e841 2300 	strex	r3, r2, [r1]
 800ae60:	617b      	str	r3, [r7, #20]
   return(result);
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1e6      	bne.n	800ae36 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae68:	e002      	b.n	800ae70 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ae6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ae6c:	f7f7 ffec 	bl	8002e48 <HAL_UART_TxCpltCallback>
}
 800ae70:	bf00      	nop
 800ae72:	3740      	adds	r7, #64	; 0x40
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae84:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f7ff fa34 	bl	800a2f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae8c:	bf00      	nop
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aea6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aeac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeb8:	2b80      	cmp	r3, #128	; 0x80
 800aeba:	d109      	bne.n	800aed0 <UART_DMAError+0x3c>
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2b21      	cmp	r3, #33	; 0x21
 800aec0:	d106      	bne.n	800aed0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800aeca:	6978      	ldr	r0, [r7, #20]
 800aecc:	f7ff fefe 	bl	800accc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeda:	2b40      	cmp	r3, #64	; 0x40
 800aedc:	d109      	bne.n	800aef2 <UART_DMAError+0x5e>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b22      	cmp	r3, #34	; 0x22
 800aee2:	d106      	bne.n	800aef2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800aeec:	6978      	ldr	r0, [r7, #20]
 800aeee:	f7ff ff13 	bl	800ad18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aef8:	f043 0210 	orr.w	r2, r3, #16
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af02:	6978      	ldr	r0, [r7, #20]
 800af04:	f7f7 fff4 	bl	8002ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af08:	bf00      	nop
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f7f7 ffde 	bl	8002ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af34:	bf00      	nop
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b088      	sub	sp, #32
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	e853 3f00 	ldrex	r3, [r3]
 800af50:	60bb      	str	r3, [r7, #8]
   return(result);
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af58:	61fb      	str	r3, [r7, #28]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	461a      	mov	r2, r3
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	61bb      	str	r3, [r7, #24]
 800af64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af66:	6979      	ldr	r1, [r7, #20]
 800af68:	69ba      	ldr	r2, [r7, #24]
 800af6a:	e841 2300 	strex	r3, r2, [r1]
 800af6e:	613b      	str	r3, [r7, #16]
   return(result);
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1e6      	bne.n	800af44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2220      	movs	r2, #32
 800af7a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7f7 ff60 	bl	8002e48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af88:	bf00      	nop
 800af8a:	3720      	adds	r7, #32
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b096      	sub	sp, #88	; 0x58
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afa6:	2b22      	cmp	r3, #34	; 0x22
 800afa8:	f040 8094 	bne.w	800b0d4 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800afb2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800afb6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800afba:	b2d9      	uxtb	r1, r3
 800afbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc6:	400a      	ands	r2, r1
 800afc8:	b2d2      	uxtb	r2, r2
 800afca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd0:	1c5a      	adds	r2, r3, #1
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800afdc:	b29b      	uxth	r3, r3
 800afde:	3b01      	subs	r3, #1
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800afee:	b29b      	uxth	r3, r3
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d179      	bne.n	800b0e8 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	e853 3f00 	ldrex	r3, [r3]
 800b000:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b008:	653b      	str	r3, [r7, #80]	; 0x50
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b012:	647b      	str	r3, [r7, #68]	; 0x44
 800b014:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b016:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b01a:	e841 2300 	strex	r3, r2, [r1]
 800b01e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1e6      	bne.n	800aff4 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	3308      	adds	r3, #8
 800b02c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	e853 3f00 	ldrex	r3, [r3]
 800b034:	623b      	str	r3, [r7, #32]
   return(result);
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	f023 0301 	bic.w	r3, r3, #1
 800b03c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3308      	adds	r3, #8
 800b044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b046:	633a      	str	r2, [r7, #48]	; 0x30
 800b048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b04e:	e841 2300 	strex	r3, r2, [r1]
 800b052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1e5      	bne.n	800b026 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2220      	movs	r2, #32
 800b05e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d12e      	bne.n	800b0cc <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	e853 3f00 	ldrex	r3, [r3]
 800b080:	60fb      	str	r3, [r7, #12]
   return(result);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f023 0310 	bic.w	r3, r3, #16
 800b088:	64bb      	str	r3, [r7, #72]	; 0x48
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	461a      	mov	r2, r3
 800b090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b092:	61fb      	str	r3, [r7, #28]
 800b094:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b096:	69b9      	ldr	r1, [r7, #24]
 800b098:	69fa      	ldr	r2, [r7, #28]
 800b09a:	e841 2300 	strex	r3, r2, [r1]
 800b09e:	617b      	str	r3, [r7, #20]
   return(result);
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1e6      	bne.n	800b074 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	f003 0310 	and.w	r3, r3, #16
 800b0b0:	2b10      	cmp	r3, #16
 800b0b2:	d103      	bne.n	800b0bc <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2210      	movs	r2, #16
 800b0ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7ff f91f 	bl	800a308 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0ca:	e00d      	b.n	800b0e8 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7f7 fecf 	bl	8002e70 <HAL_UART_RxCpltCallback>
}
 800b0d2:	e009      	b.n	800b0e8 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	8b1b      	ldrh	r3, [r3, #24]
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f042 0208 	orr.w	r2, r2, #8
 800b0e4:	b292      	uxth	r2, r2
 800b0e6:	831a      	strh	r2, [r3, #24]
}
 800b0e8:	bf00      	nop
 800b0ea:	3758      	adds	r7, #88	; 0x58
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b096      	sub	sp, #88	; 0x58
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b106:	2b22      	cmp	r3, #34	; 0x22
 800b108:	f040 8094 	bne.w	800b234 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b112:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b11a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b11c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b120:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b124:	4013      	ands	r3, r2
 800b126:	b29a      	uxth	r2, r3
 800b128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b12a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b130:	1c9a      	adds	r2, r3, #2
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	3b01      	subs	r3, #1
 800b140:	b29a      	uxth	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b14e:	b29b      	uxth	r3, r3
 800b150:	2b00      	cmp	r3, #0
 800b152:	d179      	bne.n	800b248 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15c:	e853 3f00 	ldrex	r3, [r3]
 800b160:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	461a      	mov	r2, r3
 800b170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b172:	643b      	str	r3, [r7, #64]	; 0x40
 800b174:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b176:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b17a:	e841 2300 	strex	r3, r2, [r1]
 800b17e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1e6      	bne.n	800b154 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	3308      	adds	r3, #8
 800b18c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18e:	6a3b      	ldr	r3, [r7, #32]
 800b190:	e853 3f00 	ldrex	r3, [r3]
 800b194:	61fb      	str	r3, [r7, #28]
   return(result);
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	f023 0301 	bic.w	r3, r3, #1
 800b19c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ae:	e841 2300 	strex	r3, r2, [r1]
 800b1b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1e5      	bne.n	800b186 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2220      	movs	r2, #32
 800b1be:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d12e      	bne.n	800b22c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	f023 0310 	bic.w	r3, r3, #16
 800b1e8:	647b      	str	r3, [r7, #68]	; 0x44
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1f2:	61bb      	str	r3, [r7, #24]
 800b1f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	6979      	ldr	r1, [r7, #20]
 800b1f8:	69ba      	ldr	r2, [r7, #24]
 800b1fa:	e841 2300 	strex	r3, r2, [r1]
 800b1fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1e6      	bne.n	800b1d4 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	69db      	ldr	r3, [r3, #28]
 800b20c:	f003 0310 	and.w	r3, r3, #16
 800b210:	2b10      	cmp	r3, #16
 800b212:	d103      	bne.n	800b21c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2210      	movs	r2, #16
 800b21a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff f86f 	bl	800a308 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b22a:	e00d      	b.n	800b248 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7f7 fe1f 	bl	8002e70 <HAL_UART_RxCpltCallback>
}
 800b232:	e009      	b.n	800b248 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	8b1b      	ldrh	r3, [r3, #24]
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f042 0208 	orr.w	r2, r2, #8
 800b244:	b292      	uxth	r2, r2
 800b246:	831a      	strh	r2, [r3, #24]
}
 800b248:	bf00      	nop
 800b24a:	3758      	adds	r7, #88	; 0x58
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b258:	bf00      	nop
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <__errno>:
 800b264:	4b01      	ldr	r3, [pc, #4]	; (800b26c <__errno+0x8>)
 800b266:	6818      	ldr	r0, [r3, #0]
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	20000198 	.word	0x20000198

0800b270 <__libc_init_array>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	4d0d      	ldr	r5, [pc, #52]	; (800b2a8 <__libc_init_array+0x38>)
 800b274:	4c0d      	ldr	r4, [pc, #52]	; (800b2ac <__libc_init_array+0x3c>)
 800b276:	1b64      	subs	r4, r4, r5
 800b278:	10a4      	asrs	r4, r4, #2
 800b27a:	2600      	movs	r6, #0
 800b27c:	42a6      	cmp	r6, r4
 800b27e:	d109      	bne.n	800b294 <__libc_init_array+0x24>
 800b280:	4d0b      	ldr	r5, [pc, #44]	; (800b2b0 <__libc_init_array+0x40>)
 800b282:	4c0c      	ldr	r4, [pc, #48]	; (800b2b4 <__libc_init_array+0x44>)
 800b284:	f001 faa6 	bl	800c7d4 <_init>
 800b288:	1b64      	subs	r4, r4, r5
 800b28a:	10a4      	asrs	r4, r4, #2
 800b28c:	2600      	movs	r6, #0
 800b28e:	42a6      	cmp	r6, r4
 800b290:	d105      	bne.n	800b29e <__libc_init_array+0x2e>
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	f855 3b04 	ldr.w	r3, [r5], #4
 800b298:	4798      	blx	r3
 800b29a:	3601      	adds	r6, #1
 800b29c:	e7ee      	b.n	800b27c <__libc_init_array+0xc>
 800b29e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2a2:	4798      	blx	r3
 800b2a4:	3601      	adds	r6, #1
 800b2a6:	e7f2      	b.n	800b28e <__libc_init_array+0x1e>
 800b2a8:	0800ce28 	.word	0x0800ce28
 800b2ac:	0800ce28 	.word	0x0800ce28
 800b2b0:	0800ce28 	.word	0x0800ce28
 800b2b4:	0800ce2c 	.word	0x0800ce2c

0800b2b8 <memcpy>:
 800b2b8:	440a      	add	r2, r1
 800b2ba:	4291      	cmp	r1, r2
 800b2bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2c0:	d100      	bne.n	800b2c4 <memcpy+0xc>
 800b2c2:	4770      	bx	lr
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ce:	4291      	cmp	r1, r2
 800b2d0:	d1f9      	bne.n	800b2c6 <memcpy+0xe>
 800b2d2:	bd10      	pop	{r4, pc}

0800b2d4 <memset>:
 800b2d4:	4402      	add	r2, r0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d100      	bne.n	800b2de <memset+0xa>
 800b2dc:	4770      	bx	lr
 800b2de:	f803 1b01 	strb.w	r1, [r3], #1
 800b2e2:	e7f9      	b.n	800b2d8 <memset+0x4>

0800b2e4 <siprintf>:
 800b2e4:	b40e      	push	{r1, r2, r3}
 800b2e6:	b500      	push	{lr}
 800b2e8:	b09c      	sub	sp, #112	; 0x70
 800b2ea:	ab1d      	add	r3, sp, #116	; 0x74
 800b2ec:	9002      	str	r0, [sp, #8]
 800b2ee:	9006      	str	r0, [sp, #24]
 800b2f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b2f4:	4809      	ldr	r0, [pc, #36]	; (800b31c <siprintf+0x38>)
 800b2f6:	9107      	str	r1, [sp, #28]
 800b2f8:	9104      	str	r1, [sp, #16]
 800b2fa:	4909      	ldr	r1, [pc, #36]	; (800b320 <siprintf+0x3c>)
 800b2fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b300:	9105      	str	r1, [sp, #20]
 800b302:	6800      	ldr	r0, [r0, #0]
 800b304:	9301      	str	r3, [sp, #4]
 800b306:	a902      	add	r1, sp, #8
 800b308:	f000 fa3c 	bl	800b784 <_svfiprintf_r>
 800b30c:	9b02      	ldr	r3, [sp, #8]
 800b30e:	2200      	movs	r2, #0
 800b310:	701a      	strb	r2, [r3, #0]
 800b312:	b01c      	add	sp, #112	; 0x70
 800b314:	f85d eb04 	ldr.w	lr, [sp], #4
 800b318:	b003      	add	sp, #12
 800b31a:	4770      	bx	lr
 800b31c:	20000198 	.word	0x20000198
 800b320:	ffff0208 	.word	0xffff0208

0800b324 <strcat>:
 800b324:	b510      	push	{r4, lr}
 800b326:	4602      	mov	r2, r0
 800b328:	7814      	ldrb	r4, [r2, #0]
 800b32a:	4613      	mov	r3, r2
 800b32c:	3201      	adds	r2, #1
 800b32e:	2c00      	cmp	r4, #0
 800b330:	d1fa      	bne.n	800b328 <strcat+0x4>
 800b332:	3b01      	subs	r3, #1
 800b334:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b338:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b33c:	2a00      	cmp	r2, #0
 800b33e:	d1f9      	bne.n	800b334 <strcat+0x10>
 800b340:	bd10      	pop	{r4, pc}
	...

0800b344 <strtok>:
 800b344:	4b16      	ldr	r3, [pc, #88]	; (800b3a0 <strtok+0x5c>)
 800b346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b348:	681e      	ldr	r6, [r3, #0]
 800b34a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b34c:	4605      	mov	r5, r0
 800b34e:	b9fc      	cbnz	r4, 800b390 <strtok+0x4c>
 800b350:	2050      	movs	r0, #80	; 0x50
 800b352:	9101      	str	r1, [sp, #4]
 800b354:	f000 f908 	bl	800b568 <malloc>
 800b358:	9901      	ldr	r1, [sp, #4]
 800b35a:	65b0      	str	r0, [r6, #88]	; 0x58
 800b35c:	4602      	mov	r2, r0
 800b35e:	b920      	cbnz	r0, 800b36a <strtok+0x26>
 800b360:	4b10      	ldr	r3, [pc, #64]	; (800b3a4 <strtok+0x60>)
 800b362:	4811      	ldr	r0, [pc, #68]	; (800b3a8 <strtok+0x64>)
 800b364:	2157      	movs	r1, #87	; 0x57
 800b366:	f000 f8cf 	bl	800b508 <__assert_func>
 800b36a:	e9c0 4400 	strd	r4, r4, [r0]
 800b36e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b372:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b376:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b37a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b37e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b382:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b386:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b38a:	6184      	str	r4, [r0, #24]
 800b38c:	7704      	strb	r4, [r0, #28]
 800b38e:	6244      	str	r4, [r0, #36]	; 0x24
 800b390:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b392:	2301      	movs	r3, #1
 800b394:	4628      	mov	r0, r5
 800b396:	b002      	add	sp, #8
 800b398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b39c:	f000 b806 	b.w	800b3ac <__strtok_r>
 800b3a0:	20000198 	.word	0x20000198
 800b3a4:	0800cbd8 	.word	0x0800cbd8
 800b3a8:	0800cbef 	.word	0x0800cbef

0800b3ac <__strtok_r>:
 800b3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ae:	b908      	cbnz	r0, 800b3b4 <__strtok_r+0x8>
 800b3b0:	6810      	ldr	r0, [r2, #0]
 800b3b2:	b188      	cbz	r0, 800b3d8 <__strtok_r+0x2c>
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b3bc:	460f      	mov	r7, r1
 800b3be:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b3c2:	b91e      	cbnz	r6, 800b3cc <__strtok_r+0x20>
 800b3c4:	b965      	cbnz	r5, 800b3e0 <__strtok_r+0x34>
 800b3c6:	6015      	str	r5, [r2, #0]
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	e005      	b.n	800b3d8 <__strtok_r+0x2c>
 800b3cc:	42b5      	cmp	r5, r6
 800b3ce:	d1f6      	bne.n	800b3be <__strtok_r+0x12>
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1f0      	bne.n	800b3b6 <__strtok_r+0xa>
 800b3d4:	6014      	str	r4, [r2, #0]
 800b3d6:	7003      	strb	r3, [r0, #0]
 800b3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3da:	461c      	mov	r4, r3
 800b3dc:	e00c      	b.n	800b3f8 <__strtok_r+0x4c>
 800b3de:	b915      	cbnz	r5, 800b3e6 <__strtok_r+0x3a>
 800b3e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b3e4:	460e      	mov	r6, r1
 800b3e6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b3ea:	42ab      	cmp	r3, r5
 800b3ec:	d1f7      	bne.n	800b3de <__strtok_r+0x32>
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0f3      	beq.n	800b3da <__strtok_r+0x2e>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b3f8:	6014      	str	r4, [r2, #0]
 800b3fa:	e7ed      	b.n	800b3d8 <__strtok_r+0x2c>

0800b3fc <_strtoul_l.isra.0>:
 800b3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b400:	4e3b      	ldr	r6, [pc, #236]	; (800b4f0 <_strtoul_l.isra.0+0xf4>)
 800b402:	4686      	mov	lr, r0
 800b404:	468c      	mov	ip, r1
 800b406:	4660      	mov	r0, ip
 800b408:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b40c:	5da5      	ldrb	r5, [r4, r6]
 800b40e:	f015 0508 	ands.w	r5, r5, #8
 800b412:	d1f8      	bne.n	800b406 <_strtoul_l.isra.0+0xa>
 800b414:	2c2d      	cmp	r4, #45	; 0x2d
 800b416:	d134      	bne.n	800b482 <_strtoul_l.isra.0+0x86>
 800b418:	f89c 4000 	ldrb.w	r4, [ip]
 800b41c:	f04f 0801 	mov.w	r8, #1
 800b420:	f100 0c02 	add.w	ip, r0, #2
 800b424:	2b00      	cmp	r3, #0
 800b426:	d05e      	beq.n	800b4e6 <_strtoul_l.isra.0+0xea>
 800b428:	2b10      	cmp	r3, #16
 800b42a:	d10c      	bne.n	800b446 <_strtoul_l.isra.0+0x4a>
 800b42c:	2c30      	cmp	r4, #48	; 0x30
 800b42e:	d10a      	bne.n	800b446 <_strtoul_l.isra.0+0x4a>
 800b430:	f89c 0000 	ldrb.w	r0, [ip]
 800b434:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b438:	2858      	cmp	r0, #88	; 0x58
 800b43a:	d14f      	bne.n	800b4dc <_strtoul_l.isra.0+0xe0>
 800b43c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b440:	2310      	movs	r3, #16
 800b442:	f10c 0c02 	add.w	ip, ip, #2
 800b446:	f04f 37ff 	mov.w	r7, #4294967295
 800b44a:	2500      	movs	r5, #0
 800b44c:	fbb7 f7f3 	udiv	r7, r7, r3
 800b450:	fb03 f907 	mul.w	r9, r3, r7
 800b454:	ea6f 0909 	mvn.w	r9, r9
 800b458:	4628      	mov	r0, r5
 800b45a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b45e:	2e09      	cmp	r6, #9
 800b460:	d818      	bhi.n	800b494 <_strtoul_l.isra.0+0x98>
 800b462:	4634      	mov	r4, r6
 800b464:	42a3      	cmp	r3, r4
 800b466:	dd24      	ble.n	800b4b2 <_strtoul_l.isra.0+0xb6>
 800b468:	2d00      	cmp	r5, #0
 800b46a:	db1f      	blt.n	800b4ac <_strtoul_l.isra.0+0xb0>
 800b46c:	4287      	cmp	r7, r0
 800b46e:	d31d      	bcc.n	800b4ac <_strtoul_l.isra.0+0xb0>
 800b470:	d101      	bne.n	800b476 <_strtoul_l.isra.0+0x7a>
 800b472:	45a1      	cmp	r9, r4
 800b474:	db1a      	blt.n	800b4ac <_strtoul_l.isra.0+0xb0>
 800b476:	fb00 4003 	mla	r0, r0, r3, r4
 800b47a:	2501      	movs	r5, #1
 800b47c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b480:	e7eb      	b.n	800b45a <_strtoul_l.isra.0+0x5e>
 800b482:	2c2b      	cmp	r4, #43	; 0x2b
 800b484:	bf08      	it	eq
 800b486:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b48a:	46a8      	mov	r8, r5
 800b48c:	bf08      	it	eq
 800b48e:	f100 0c02 	addeq.w	ip, r0, #2
 800b492:	e7c7      	b.n	800b424 <_strtoul_l.isra.0+0x28>
 800b494:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b498:	2e19      	cmp	r6, #25
 800b49a:	d801      	bhi.n	800b4a0 <_strtoul_l.isra.0+0xa4>
 800b49c:	3c37      	subs	r4, #55	; 0x37
 800b49e:	e7e1      	b.n	800b464 <_strtoul_l.isra.0+0x68>
 800b4a0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b4a4:	2e19      	cmp	r6, #25
 800b4a6:	d804      	bhi.n	800b4b2 <_strtoul_l.isra.0+0xb6>
 800b4a8:	3c57      	subs	r4, #87	; 0x57
 800b4aa:	e7db      	b.n	800b464 <_strtoul_l.isra.0+0x68>
 800b4ac:	f04f 35ff 	mov.w	r5, #4294967295
 800b4b0:	e7e4      	b.n	800b47c <_strtoul_l.isra.0+0x80>
 800b4b2:	2d00      	cmp	r5, #0
 800b4b4:	da07      	bge.n	800b4c6 <_strtoul_l.isra.0+0xca>
 800b4b6:	2322      	movs	r3, #34	; 0x22
 800b4b8:	f8ce 3000 	str.w	r3, [lr]
 800b4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c0:	b942      	cbnz	r2, 800b4d4 <_strtoul_l.isra.0+0xd8>
 800b4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4c6:	f1b8 0f00 	cmp.w	r8, #0
 800b4ca:	d000      	beq.n	800b4ce <_strtoul_l.isra.0+0xd2>
 800b4cc:	4240      	negs	r0, r0
 800b4ce:	2a00      	cmp	r2, #0
 800b4d0:	d0f7      	beq.n	800b4c2 <_strtoul_l.isra.0+0xc6>
 800b4d2:	b10d      	cbz	r5, 800b4d8 <_strtoul_l.isra.0+0xdc>
 800b4d4:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b4d8:	6011      	str	r1, [r2, #0]
 800b4da:	e7f2      	b.n	800b4c2 <_strtoul_l.isra.0+0xc6>
 800b4dc:	2430      	movs	r4, #48	; 0x30
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1b1      	bne.n	800b446 <_strtoul_l.isra.0+0x4a>
 800b4e2:	2308      	movs	r3, #8
 800b4e4:	e7af      	b.n	800b446 <_strtoul_l.isra.0+0x4a>
 800b4e6:	2c30      	cmp	r4, #48	; 0x30
 800b4e8:	d0a2      	beq.n	800b430 <_strtoul_l.isra.0+0x34>
 800b4ea:	230a      	movs	r3, #10
 800b4ec:	e7ab      	b.n	800b446 <_strtoul_l.isra.0+0x4a>
 800b4ee:	bf00      	nop
 800b4f0:	0800cc8d 	.word	0x0800cc8d

0800b4f4 <strtoul>:
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	460a      	mov	r2, r1
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	4802      	ldr	r0, [pc, #8]	; (800b504 <strtoul+0x10>)
 800b4fc:	6800      	ldr	r0, [r0, #0]
 800b4fe:	f7ff bf7d 	b.w	800b3fc <_strtoul_l.isra.0>
 800b502:	bf00      	nop
 800b504:	20000198 	.word	0x20000198

0800b508 <__assert_func>:
 800b508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b50a:	4614      	mov	r4, r2
 800b50c:	461a      	mov	r2, r3
 800b50e:	4b09      	ldr	r3, [pc, #36]	; (800b534 <__assert_func+0x2c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4605      	mov	r5, r0
 800b514:	68d8      	ldr	r0, [r3, #12]
 800b516:	b14c      	cbz	r4, 800b52c <__assert_func+0x24>
 800b518:	4b07      	ldr	r3, [pc, #28]	; (800b538 <__assert_func+0x30>)
 800b51a:	9100      	str	r1, [sp, #0]
 800b51c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b520:	4906      	ldr	r1, [pc, #24]	; (800b53c <__assert_func+0x34>)
 800b522:	462b      	mov	r3, r5
 800b524:	f000 f80e 	bl	800b544 <fiprintf>
 800b528:	f000 fdea 	bl	800c100 <abort>
 800b52c:	4b04      	ldr	r3, [pc, #16]	; (800b540 <__assert_func+0x38>)
 800b52e:	461c      	mov	r4, r3
 800b530:	e7f3      	b.n	800b51a <__assert_func+0x12>
 800b532:	bf00      	nop
 800b534:	20000198 	.word	0x20000198
 800b538:	0800cc50 	.word	0x0800cc50
 800b53c:	0800cc5d 	.word	0x0800cc5d
 800b540:	0800cc8b 	.word	0x0800cc8b

0800b544 <fiprintf>:
 800b544:	b40e      	push	{r1, r2, r3}
 800b546:	b503      	push	{r0, r1, lr}
 800b548:	4601      	mov	r1, r0
 800b54a:	ab03      	add	r3, sp, #12
 800b54c:	4805      	ldr	r0, [pc, #20]	; (800b564 <fiprintf+0x20>)
 800b54e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b552:	6800      	ldr	r0, [r0, #0]
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	f000 fa3f 	bl	800b9d8 <_vfiprintf_r>
 800b55a:	b002      	add	sp, #8
 800b55c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b560:	b003      	add	sp, #12
 800b562:	4770      	bx	lr
 800b564:	20000198 	.word	0x20000198

0800b568 <malloc>:
 800b568:	4b02      	ldr	r3, [pc, #8]	; (800b574 <malloc+0xc>)
 800b56a:	4601      	mov	r1, r0
 800b56c:	6818      	ldr	r0, [r3, #0]
 800b56e:	f000 b853 	b.w	800b618 <_malloc_r>
 800b572:	bf00      	nop
 800b574:	20000198 	.word	0x20000198

0800b578 <_free_r>:
 800b578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b57a:	2900      	cmp	r1, #0
 800b57c:	d048      	beq.n	800b610 <_free_r+0x98>
 800b57e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b582:	9001      	str	r0, [sp, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	f1a1 0404 	sub.w	r4, r1, #4
 800b58a:	bfb8      	it	lt
 800b58c:	18e4      	addlt	r4, r4, r3
 800b58e:	f000 fff7 	bl	800c580 <__malloc_lock>
 800b592:	4a20      	ldr	r2, [pc, #128]	; (800b614 <_free_r+0x9c>)
 800b594:	9801      	ldr	r0, [sp, #4]
 800b596:	6813      	ldr	r3, [r2, #0]
 800b598:	4615      	mov	r5, r2
 800b59a:	b933      	cbnz	r3, 800b5aa <_free_r+0x32>
 800b59c:	6063      	str	r3, [r4, #4]
 800b59e:	6014      	str	r4, [r2, #0]
 800b5a0:	b003      	add	sp, #12
 800b5a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5a6:	f000 bff1 	b.w	800c58c <__malloc_unlock>
 800b5aa:	42a3      	cmp	r3, r4
 800b5ac:	d90b      	bls.n	800b5c6 <_free_r+0x4e>
 800b5ae:	6821      	ldr	r1, [r4, #0]
 800b5b0:	1862      	adds	r2, r4, r1
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	bf04      	itt	eq
 800b5b6:	681a      	ldreq	r2, [r3, #0]
 800b5b8:	685b      	ldreq	r3, [r3, #4]
 800b5ba:	6063      	str	r3, [r4, #4]
 800b5bc:	bf04      	itt	eq
 800b5be:	1852      	addeq	r2, r2, r1
 800b5c0:	6022      	streq	r2, [r4, #0]
 800b5c2:	602c      	str	r4, [r5, #0]
 800b5c4:	e7ec      	b.n	800b5a0 <_free_r+0x28>
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	b10b      	cbz	r3, 800b5d0 <_free_r+0x58>
 800b5cc:	42a3      	cmp	r3, r4
 800b5ce:	d9fa      	bls.n	800b5c6 <_free_r+0x4e>
 800b5d0:	6811      	ldr	r1, [r2, #0]
 800b5d2:	1855      	adds	r5, r2, r1
 800b5d4:	42a5      	cmp	r5, r4
 800b5d6:	d10b      	bne.n	800b5f0 <_free_r+0x78>
 800b5d8:	6824      	ldr	r4, [r4, #0]
 800b5da:	4421      	add	r1, r4
 800b5dc:	1854      	adds	r4, r2, r1
 800b5de:	42a3      	cmp	r3, r4
 800b5e0:	6011      	str	r1, [r2, #0]
 800b5e2:	d1dd      	bne.n	800b5a0 <_free_r+0x28>
 800b5e4:	681c      	ldr	r4, [r3, #0]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	6053      	str	r3, [r2, #4]
 800b5ea:	4421      	add	r1, r4
 800b5ec:	6011      	str	r1, [r2, #0]
 800b5ee:	e7d7      	b.n	800b5a0 <_free_r+0x28>
 800b5f0:	d902      	bls.n	800b5f8 <_free_r+0x80>
 800b5f2:	230c      	movs	r3, #12
 800b5f4:	6003      	str	r3, [r0, #0]
 800b5f6:	e7d3      	b.n	800b5a0 <_free_r+0x28>
 800b5f8:	6825      	ldr	r5, [r4, #0]
 800b5fa:	1961      	adds	r1, r4, r5
 800b5fc:	428b      	cmp	r3, r1
 800b5fe:	bf04      	itt	eq
 800b600:	6819      	ldreq	r1, [r3, #0]
 800b602:	685b      	ldreq	r3, [r3, #4]
 800b604:	6063      	str	r3, [r4, #4]
 800b606:	bf04      	itt	eq
 800b608:	1949      	addeq	r1, r1, r5
 800b60a:	6021      	streq	r1, [r4, #0]
 800b60c:	6054      	str	r4, [r2, #4]
 800b60e:	e7c7      	b.n	800b5a0 <_free_r+0x28>
 800b610:	b003      	add	sp, #12
 800b612:	bd30      	pop	{r4, r5, pc}
 800b614:	2000022c 	.word	0x2000022c

0800b618 <_malloc_r>:
 800b618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61a:	1ccd      	adds	r5, r1, #3
 800b61c:	f025 0503 	bic.w	r5, r5, #3
 800b620:	3508      	adds	r5, #8
 800b622:	2d0c      	cmp	r5, #12
 800b624:	bf38      	it	cc
 800b626:	250c      	movcc	r5, #12
 800b628:	2d00      	cmp	r5, #0
 800b62a:	4606      	mov	r6, r0
 800b62c:	db01      	blt.n	800b632 <_malloc_r+0x1a>
 800b62e:	42a9      	cmp	r1, r5
 800b630:	d903      	bls.n	800b63a <_malloc_r+0x22>
 800b632:	230c      	movs	r3, #12
 800b634:	6033      	str	r3, [r6, #0]
 800b636:	2000      	movs	r0, #0
 800b638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b63a:	f000 ffa1 	bl	800c580 <__malloc_lock>
 800b63e:	4921      	ldr	r1, [pc, #132]	; (800b6c4 <_malloc_r+0xac>)
 800b640:	680a      	ldr	r2, [r1, #0]
 800b642:	4614      	mov	r4, r2
 800b644:	b99c      	cbnz	r4, 800b66e <_malloc_r+0x56>
 800b646:	4f20      	ldr	r7, [pc, #128]	; (800b6c8 <_malloc_r+0xb0>)
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	b923      	cbnz	r3, 800b656 <_malloc_r+0x3e>
 800b64c:	4621      	mov	r1, r4
 800b64e:	4630      	mov	r0, r6
 800b650:	f000 fc86 	bl	800bf60 <_sbrk_r>
 800b654:	6038      	str	r0, [r7, #0]
 800b656:	4629      	mov	r1, r5
 800b658:	4630      	mov	r0, r6
 800b65a:	f000 fc81 	bl	800bf60 <_sbrk_r>
 800b65e:	1c43      	adds	r3, r0, #1
 800b660:	d123      	bne.n	800b6aa <_malloc_r+0x92>
 800b662:	230c      	movs	r3, #12
 800b664:	6033      	str	r3, [r6, #0]
 800b666:	4630      	mov	r0, r6
 800b668:	f000 ff90 	bl	800c58c <__malloc_unlock>
 800b66c:	e7e3      	b.n	800b636 <_malloc_r+0x1e>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	1b5b      	subs	r3, r3, r5
 800b672:	d417      	bmi.n	800b6a4 <_malloc_r+0x8c>
 800b674:	2b0b      	cmp	r3, #11
 800b676:	d903      	bls.n	800b680 <_malloc_r+0x68>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	441c      	add	r4, r3
 800b67c:	6025      	str	r5, [r4, #0]
 800b67e:	e004      	b.n	800b68a <_malloc_r+0x72>
 800b680:	6863      	ldr	r3, [r4, #4]
 800b682:	42a2      	cmp	r2, r4
 800b684:	bf0c      	ite	eq
 800b686:	600b      	streq	r3, [r1, #0]
 800b688:	6053      	strne	r3, [r2, #4]
 800b68a:	4630      	mov	r0, r6
 800b68c:	f000 ff7e 	bl	800c58c <__malloc_unlock>
 800b690:	f104 000b 	add.w	r0, r4, #11
 800b694:	1d23      	adds	r3, r4, #4
 800b696:	f020 0007 	bic.w	r0, r0, #7
 800b69a:	1ac2      	subs	r2, r0, r3
 800b69c:	d0cc      	beq.n	800b638 <_malloc_r+0x20>
 800b69e:	1a1b      	subs	r3, r3, r0
 800b6a0:	50a3      	str	r3, [r4, r2]
 800b6a2:	e7c9      	b.n	800b638 <_malloc_r+0x20>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	6864      	ldr	r4, [r4, #4]
 800b6a8:	e7cc      	b.n	800b644 <_malloc_r+0x2c>
 800b6aa:	1cc4      	adds	r4, r0, #3
 800b6ac:	f024 0403 	bic.w	r4, r4, #3
 800b6b0:	42a0      	cmp	r0, r4
 800b6b2:	d0e3      	beq.n	800b67c <_malloc_r+0x64>
 800b6b4:	1a21      	subs	r1, r4, r0
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f000 fc52 	bl	800bf60 <_sbrk_r>
 800b6bc:	3001      	adds	r0, #1
 800b6be:	d1dd      	bne.n	800b67c <_malloc_r+0x64>
 800b6c0:	e7cf      	b.n	800b662 <_malloc_r+0x4a>
 800b6c2:	bf00      	nop
 800b6c4:	2000022c 	.word	0x2000022c
 800b6c8:	20000230 	.word	0x20000230

0800b6cc <__ssputs_r>:
 800b6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d0:	688e      	ldr	r6, [r1, #8]
 800b6d2:	429e      	cmp	r6, r3
 800b6d4:	4682      	mov	sl, r0
 800b6d6:	460c      	mov	r4, r1
 800b6d8:	4690      	mov	r8, r2
 800b6da:	461f      	mov	r7, r3
 800b6dc:	d838      	bhi.n	800b750 <__ssputs_r+0x84>
 800b6de:	898a      	ldrh	r2, [r1, #12]
 800b6e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6e4:	d032      	beq.n	800b74c <__ssputs_r+0x80>
 800b6e6:	6825      	ldr	r5, [r4, #0]
 800b6e8:	6909      	ldr	r1, [r1, #16]
 800b6ea:	eba5 0901 	sub.w	r9, r5, r1
 800b6ee:	6965      	ldr	r5, [r4, #20]
 800b6f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	444b      	add	r3, r9
 800b6fc:	106d      	asrs	r5, r5, #1
 800b6fe:	429d      	cmp	r5, r3
 800b700:	bf38      	it	cc
 800b702:	461d      	movcc	r5, r3
 800b704:	0553      	lsls	r3, r2, #21
 800b706:	d531      	bpl.n	800b76c <__ssputs_r+0xa0>
 800b708:	4629      	mov	r1, r5
 800b70a:	f7ff ff85 	bl	800b618 <_malloc_r>
 800b70e:	4606      	mov	r6, r0
 800b710:	b950      	cbnz	r0, 800b728 <__ssputs_r+0x5c>
 800b712:	230c      	movs	r3, #12
 800b714:	f8ca 3000 	str.w	r3, [sl]
 800b718:	89a3      	ldrh	r3, [r4, #12]
 800b71a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b71e:	81a3      	strh	r3, [r4, #12]
 800b720:	f04f 30ff 	mov.w	r0, #4294967295
 800b724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b728:	6921      	ldr	r1, [r4, #16]
 800b72a:	464a      	mov	r2, r9
 800b72c:	f7ff fdc4 	bl	800b2b8 <memcpy>
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b73a:	81a3      	strh	r3, [r4, #12]
 800b73c:	6126      	str	r6, [r4, #16]
 800b73e:	6165      	str	r5, [r4, #20]
 800b740:	444e      	add	r6, r9
 800b742:	eba5 0509 	sub.w	r5, r5, r9
 800b746:	6026      	str	r6, [r4, #0]
 800b748:	60a5      	str	r5, [r4, #8]
 800b74a:	463e      	mov	r6, r7
 800b74c:	42be      	cmp	r6, r7
 800b74e:	d900      	bls.n	800b752 <__ssputs_r+0x86>
 800b750:	463e      	mov	r6, r7
 800b752:	4632      	mov	r2, r6
 800b754:	6820      	ldr	r0, [r4, #0]
 800b756:	4641      	mov	r1, r8
 800b758:	f000 fef8 	bl	800c54c <memmove>
 800b75c:	68a3      	ldr	r3, [r4, #8]
 800b75e:	6822      	ldr	r2, [r4, #0]
 800b760:	1b9b      	subs	r3, r3, r6
 800b762:	4432      	add	r2, r6
 800b764:	60a3      	str	r3, [r4, #8]
 800b766:	6022      	str	r2, [r4, #0]
 800b768:	2000      	movs	r0, #0
 800b76a:	e7db      	b.n	800b724 <__ssputs_r+0x58>
 800b76c:	462a      	mov	r2, r5
 800b76e:	f000 ff13 	bl	800c598 <_realloc_r>
 800b772:	4606      	mov	r6, r0
 800b774:	2800      	cmp	r0, #0
 800b776:	d1e1      	bne.n	800b73c <__ssputs_r+0x70>
 800b778:	6921      	ldr	r1, [r4, #16]
 800b77a:	4650      	mov	r0, sl
 800b77c:	f7ff fefc 	bl	800b578 <_free_r>
 800b780:	e7c7      	b.n	800b712 <__ssputs_r+0x46>
	...

0800b784 <_svfiprintf_r>:
 800b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	4698      	mov	r8, r3
 800b78a:	898b      	ldrh	r3, [r1, #12]
 800b78c:	061b      	lsls	r3, r3, #24
 800b78e:	b09d      	sub	sp, #116	; 0x74
 800b790:	4607      	mov	r7, r0
 800b792:	460d      	mov	r5, r1
 800b794:	4614      	mov	r4, r2
 800b796:	d50e      	bpl.n	800b7b6 <_svfiprintf_r+0x32>
 800b798:	690b      	ldr	r3, [r1, #16]
 800b79a:	b963      	cbnz	r3, 800b7b6 <_svfiprintf_r+0x32>
 800b79c:	2140      	movs	r1, #64	; 0x40
 800b79e:	f7ff ff3b 	bl	800b618 <_malloc_r>
 800b7a2:	6028      	str	r0, [r5, #0]
 800b7a4:	6128      	str	r0, [r5, #16]
 800b7a6:	b920      	cbnz	r0, 800b7b2 <_svfiprintf_r+0x2e>
 800b7a8:	230c      	movs	r3, #12
 800b7aa:	603b      	str	r3, [r7, #0]
 800b7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b0:	e0d1      	b.n	800b956 <_svfiprintf_r+0x1d2>
 800b7b2:	2340      	movs	r3, #64	; 0x40
 800b7b4:	616b      	str	r3, [r5, #20]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ba:	2320      	movs	r3, #32
 800b7bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7c4:	2330      	movs	r3, #48	; 0x30
 800b7c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b970 <_svfiprintf_r+0x1ec>
 800b7ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7ce:	f04f 0901 	mov.w	r9, #1
 800b7d2:	4623      	mov	r3, r4
 800b7d4:	469a      	mov	sl, r3
 800b7d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7da:	b10a      	cbz	r2, 800b7e0 <_svfiprintf_r+0x5c>
 800b7dc:	2a25      	cmp	r2, #37	; 0x25
 800b7de:	d1f9      	bne.n	800b7d4 <_svfiprintf_r+0x50>
 800b7e0:	ebba 0b04 	subs.w	fp, sl, r4
 800b7e4:	d00b      	beq.n	800b7fe <_svfiprintf_r+0x7a>
 800b7e6:	465b      	mov	r3, fp
 800b7e8:	4622      	mov	r2, r4
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	f7ff ff6d 	bl	800b6cc <__ssputs_r>
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	f000 80aa 	beq.w	800b94c <_svfiprintf_r+0x1c8>
 800b7f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7fa:	445a      	add	r2, fp
 800b7fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b802:	2b00      	cmp	r3, #0
 800b804:	f000 80a2 	beq.w	800b94c <_svfiprintf_r+0x1c8>
 800b808:	2300      	movs	r3, #0
 800b80a:	f04f 32ff 	mov.w	r2, #4294967295
 800b80e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b812:	f10a 0a01 	add.w	sl, sl, #1
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	9307      	str	r3, [sp, #28]
 800b81a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b81e:	931a      	str	r3, [sp, #104]	; 0x68
 800b820:	4654      	mov	r4, sl
 800b822:	2205      	movs	r2, #5
 800b824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b828:	4851      	ldr	r0, [pc, #324]	; (800b970 <_svfiprintf_r+0x1ec>)
 800b82a:	f7f4 fcf1 	bl	8000210 <memchr>
 800b82e:	9a04      	ldr	r2, [sp, #16]
 800b830:	b9d8      	cbnz	r0, 800b86a <_svfiprintf_r+0xe6>
 800b832:	06d0      	lsls	r0, r2, #27
 800b834:	bf44      	itt	mi
 800b836:	2320      	movmi	r3, #32
 800b838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b83c:	0711      	lsls	r1, r2, #28
 800b83e:	bf44      	itt	mi
 800b840:	232b      	movmi	r3, #43	; 0x2b
 800b842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b846:	f89a 3000 	ldrb.w	r3, [sl]
 800b84a:	2b2a      	cmp	r3, #42	; 0x2a
 800b84c:	d015      	beq.n	800b87a <_svfiprintf_r+0xf6>
 800b84e:	9a07      	ldr	r2, [sp, #28]
 800b850:	4654      	mov	r4, sl
 800b852:	2000      	movs	r0, #0
 800b854:	f04f 0c0a 	mov.w	ip, #10
 800b858:	4621      	mov	r1, r4
 800b85a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b85e:	3b30      	subs	r3, #48	; 0x30
 800b860:	2b09      	cmp	r3, #9
 800b862:	d94e      	bls.n	800b902 <_svfiprintf_r+0x17e>
 800b864:	b1b0      	cbz	r0, 800b894 <_svfiprintf_r+0x110>
 800b866:	9207      	str	r2, [sp, #28]
 800b868:	e014      	b.n	800b894 <_svfiprintf_r+0x110>
 800b86a:	eba0 0308 	sub.w	r3, r0, r8
 800b86e:	fa09 f303 	lsl.w	r3, r9, r3
 800b872:	4313      	orrs	r3, r2
 800b874:	9304      	str	r3, [sp, #16]
 800b876:	46a2      	mov	sl, r4
 800b878:	e7d2      	b.n	800b820 <_svfiprintf_r+0x9c>
 800b87a:	9b03      	ldr	r3, [sp, #12]
 800b87c:	1d19      	adds	r1, r3, #4
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	9103      	str	r1, [sp, #12]
 800b882:	2b00      	cmp	r3, #0
 800b884:	bfbb      	ittet	lt
 800b886:	425b      	neglt	r3, r3
 800b888:	f042 0202 	orrlt.w	r2, r2, #2
 800b88c:	9307      	strge	r3, [sp, #28]
 800b88e:	9307      	strlt	r3, [sp, #28]
 800b890:	bfb8      	it	lt
 800b892:	9204      	strlt	r2, [sp, #16]
 800b894:	7823      	ldrb	r3, [r4, #0]
 800b896:	2b2e      	cmp	r3, #46	; 0x2e
 800b898:	d10c      	bne.n	800b8b4 <_svfiprintf_r+0x130>
 800b89a:	7863      	ldrb	r3, [r4, #1]
 800b89c:	2b2a      	cmp	r3, #42	; 0x2a
 800b89e:	d135      	bne.n	800b90c <_svfiprintf_r+0x188>
 800b8a0:	9b03      	ldr	r3, [sp, #12]
 800b8a2:	1d1a      	adds	r2, r3, #4
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	9203      	str	r2, [sp, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	bfb8      	it	lt
 800b8ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8b0:	3402      	adds	r4, #2
 800b8b2:	9305      	str	r3, [sp, #20]
 800b8b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b980 <_svfiprintf_r+0x1fc>
 800b8b8:	7821      	ldrb	r1, [r4, #0]
 800b8ba:	2203      	movs	r2, #3
 800b8bc:	4650      	mov	r0, sl
 800b8be:	f7f4 fca7 	bl	8000210 <memchr>
 800b8c2:	b140      	cbz	r0, 800b8d6 <_svfiprintf_r+0x152>
 800b8c4:	2340      	movs	r3, #64	; 0x40
 800b8c6:	eba0 000a 	sub.w	r0, r0, sl
 800b8ca:	fa03 f000 	lsl.w	r0, r3, r0
 800b8ce:	9b04      	ldr	r3, [sp, #16]
 800b8d0:	4303      	orrs	r3, r0
 800b8d2:	3401      	adds	r4, #1
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8da:	4826      	ldr	r0, [pc, #152]	; (800b974 <_svfiprintf_r+0x1f0>)
 800b8dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8e0:	2206      	movs	r2, #6
 800b8e2:	f7f4 fc95 	bl	8000210 <memchr>
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d038      	beq.n	800b95c <_svfiprintf_r+0x1d8>
 800b8ea:	4b23      	ldr	r3, [pc, #140]	; (800b978 <_svfiprintf_r+0x1f4>)
 800b8ec:	bb1b      	cbnz	r3, 800b936 <_svfiprintf_r+0x1b2>
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	3307      	adds	r3, #7
 800b8f2:	f023 0307 	bic.w	r3, r3, #7
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	9303      	str	r3, [sp, #12]
 800b8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8fc:	4433      	add	r3, r6
 800b8fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b900:	e767      	b.n	800b7d2 <_svfiprintf_r+0x4e>
 800b902:	fb0c 3202 	mla	r2, ip, r2, r3
 800b906:	460c      	mov	r4, r1
 800b908:	2001      	movs	r0, #1
 800b90a:	e7a5      	b.n	800b858 <_svfiprintf_r+0xd4>
 800b90c:	2300      	movs	r3, #0
 800b90e:	3401      	adds	r4, #1
 800b910:	9305      	str	r3, [sp, #20]
 800b912:	4619      	mov	r1, r3
 800b914:	f04f 0c0a 	mov.w	ip, #10
 800b918:	4620      	mov	r0, r4
 800b91a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b91e:	3a30      	subs	r2, #48	; 0x30
 800b920:	2a09      	cmp	r2, #9
 800b922:	d903      	bls.n	800b92c <_svfiprintf_r+0x1a8>
 800b924:	2b00      	cmp	r3, #0
 800b926:	d0c5      	beq.n	800b8b4 <_svfiprintf_r+0x130>
 800b928:	9105      	str	r1, [sp, #20]
 800b92a:	e7c3      	b.n	800b8b4 <_svfiprintf_r+0x130>
 800b92c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b930:	4604      	mov	r4, r0
 800b932:	2301      	movs	r3, #1
 800b934:	e7f0      	b.n	800b918 <_svfiprintf_r+0x194>
 800b936:	ab03      	add	r3, sp, #12
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	462a      	mov	r2, r5
 800b93c:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <_svfiprintf_r+0x1f8>)
 800b93e:	a904      	add	r1, sp, #16
 800b940:	4638      	mov	r0, r7
 800b942:	f3af 8000 	nop.w
 800b946:	1c42      	adds	r2, r0, #1
 800b948:	4606      	mov	r6, r0
 800b94a:	d1d6      	bne.n	800b8fa <_svfiprintf_r+0x176>
 800b94c:	89ab      	ldrh	r3, [r5, #12]
 800b94e:	065b      	lsls	r3, r3, #25
 800b950:	f53f af2c 	bmi.w	800b7ac <_svfiprintf_r+0x28>
 800b954:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b956:	b01d      	add	sp, #116	; 0x74
 800b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95c:	ab03      	add	r3, sp, #12
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	462a      	mov	r2, r5
 800b962:	4b06      	ldr	r3, [pc, #24]	; (800b97c <_svfiprintf_r+0x1f8>)
 800b964:	a904      	add	r1, sp, #16
 800b966:	4638      	mov	r0, r7
 800b968:	f000 f9d4 	bl	800bd14 <_printf_i>
 800b96c:	e7eb      	b.n	800b946 <_svfiprintf_r+0x1c2>
 800b96e:	bf00      	nop
 800b970:	0800cd8d 	.word	0x0800cd8d
 800b974:	0800cd97 	.word	0x0800cd97
 800b978:	00000000 	.word	0x00000000
 800b97c:	0800b6cd 	.word	0x0800b6cd
 800b980:	0800cd93 	.word	0x0800cd93

0800b984 <__sfputc_r>:
 800b984:	6893      	ldr	r3, [r2, #8]
 800b986:	3b01      	subs	r3, #1
 800b988:	2b00      	cmp	r3, #0
 800b98a:	b410      	push	{r4}
 800b98c:	6093      	str	r3, [r2, #8]
 800b98e:	da08      	bge.n	800b9a2 <__sfputc_r+0x1e>
 800b990:	6994      	ldr	r4, [r2, #24]
 800b992:	42a3      	cmp	r3, r4
 800b994:	db01      	blt.n	800b99a <__sfputc_r+0x16>
 800b996:	290a      	cmp	r1, #10
 800b998:	d103      	bne.n	800b9a2 <__sfputc_r+0x1e>
 800b99a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b99e:	f000 baef 	b.w	800bf80 <__swbuf_r>
 800b9a2:	6813      	ldr	r3, [r2, #0]
 800b9a4:	1c58      	adds	r0, r3, #1
 800b9a6:	6010      	str	r0, [r2, #0]
 800b9a8:	7019      	strb	r1, [r3, #0]
 800b9aa:	4608      	mov	r0, r1
 800b9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <__sfputs_r>:
 800b9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	460f      	mov	r7, r1
 800b9b8:	4614      	mov	r4, r2
 800b9ba:	18d5      	adds	r5, r2, r3
 800b9bc:	42ac      	cmp	r4, r5
 800b9be:	d101      	bne.n	800b9c4 <__sfputs_r+0x12>
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	e007      	b.n	800b9d4 <__sfputs_r+0x22>
 800b9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c8:	463a      	mov	r2, r7
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f7ff ffda 	bl	800b984 <__sfputc_r>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d1f3      	bne.n	800b9bc <__sfputs_r+0xa>
 800b9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9d8 <_vfiprintf_r>:
 800b9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9dc:	460d      	mov	r5, r1
 800b9de:	b09d      	sub	sp, #116	; 0x74
 800b9e0:	4614      	mov	r4, r2
 800b9e2:	4698      	mov	r8, r3
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	b118      	cbz	r0, 800b9f0 <_vfiprintf_r+0x18>
 800b9e8:	6983      	ldr	r3, [r0, #24]
 800b9ea:	b90b      	cbnz	r3, 800b9f0 <_vfiprintf_r+0x18>
 800b9ec:	f000 fcaa 	bl	800c344 <__sinit>
 800b9f0:	4b89      	ldr	r3, [pc, #548]	; (800bc18 <_vfiprintf_r+0x240>)
 800b9f2:	429d      	cmp	r5, r3
 800b9f4:	d11b      	bne.n	800ba2e <_vfiprintf_r+0x56>
 800b9f6:	6875      	ldr	r5, [r6, #4]
 800b9f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9fa:	07d9      	lsls	r1, r3, #31
 800b9fc:	d405      	bmi.n	800ba0a <_vfiprintf_r+0x32>
 800b9fe:	89ab      	ldrh	r3, [r5, #12]
 800ba00:	059a      	lsls	r2, r3, #22
 800ba02:	d402      	bmi.n	800ba0a <_vfiprintf_r+0x32>
 800ba04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba06:	f000 fd3b 	bl	800c480 <__retarget_lock_acquire_recursive>
 800ba0a:	89ab      	ldrh	r3, [r5, #12]
 800ba0c:	071b      	lsls	r3, r3, #28
 800ba0e:	d501      	bpl.n	800ba14 <_vfiprintf_r+0x3c>
 800ba10:	692b      	ldr	r3, [r5, #16]
 800ba12:	b9eb      	cbnz	r3, 800ba50 <_vfiprintf_r+0x78>
 800ba14:	4629      	mov	r1, r5
 800ba16:	4630      	mov	r0, r6
 800ba18:	f000 fb04 	bl	800c024 <__swsetup_r>
 800ba1c:	b1c0      	cbz	r0, 800ba50 <_vfiprintf_r+0x78>
 800ba1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba20:	07dc      	lsls	r4, r3, #31
 800ba22:	d50e      	bpl.n	800ba42 <_vfiprintf_r+0x6a>
 800ba24:	f04f 30ff 	mov.w	r0, #4294967295
 800ba28:	b01d      	add	sp, #116	; 0x74
 800ba2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2e:	4b7b      	ldr	r3, [pc, #492]	; (800bc1c <_vfiprintf_r+0x244>)
 800ba30:	429d      	cmp	r5, r3
 800ba32:	d101      	bne.n	800ba38 <_vfiprintf_r+0x60>
 800ba34:	68b5      	ldr	r5, [r6, #8]
 800ba36:	e7df      	b.n	800b9f8 <_vfiprintf_r+0x20>
 800ba38:	4b79      	ldr	r3, [pc, #484]	; (800bc20 <_vfiprintf_r+0x248>)
 800ba3a:	429d      	cmp	r5, r3
 800ba3c:	bf08      	it	eq
 800ba3e:	68f5      	ldreq	r5, [r6, #12]
 800ba40:	e7da      	b.n	800b9f8 <_vfiprintf_r+0x20>
 800ba42:	89ab      	ldrh	r3, [r5, #12]
 800ba44:	0598      	lsls	r0, r3, #22
 800ba46:	d4ed      	bmi.n	800ba24 <_vfiprintf_r+0x4c>
 800ba48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba4a:	f000 fd1a 	bl	800c482 <__retarget_lock_release_recursive>
 800ba4e:	e7e9      	b.n	800ba24 <_vfiprintf_r+0x4c>
 800ba50:	2300      	movs	r3, #0
 800ba52:	9309      	str	r3, [sp, #36]	; 0x24
 800ba54:	2320      	movs	r3, #32
 800ba56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba5e:	2330      	movs	r3, #48	; 0x30
 800ba60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc24 <_vfiprintf_r+0x24c>
 800ba64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba68:	f04f 0901 	mov.w	r9, #1
 800ba6c:	4623      	mov	r3, r4
 800ba6e:	469a      	mov	sl, r3
 800ba70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba74:	b10a      	cbz	r2, 800ba7a <_vfiprintf_r+0xa2>
 800ba76:	2a25      	cmp	r2, #37	; 0x25
 800ba78:	d1f9      	bne.n	800ba6e <_vfiprintf_r+0x96>
 800ba7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ba7e:	d00b      	beq.n	800ba98 <_vfiprintf_r+0xc0>
 800ba80:	465b      	mov	r3, fp
 800ba82:	4622      	mov	r2, r4
 800ba84:	4629      	mov	r1, r5
 800ba86:	4630      	mov	r0, r6
 800ba88:	f7ff ff93 	bl	800b9b2 <__sfputs_r>
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	f000 80aa 	beq.w	800bbe6 <_vfiprintf_r+0x20e>
 800ba92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba94:	445a      	add	r2, fp
 800ba96:	9209      	str	r2, [sp, #36]	; 0x24
 800ba98:	f89a 3000 	ldrb.w	r3, [sl]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 80a2 	beq.w	800bbe6 <_vfiprintf_r+0x20e>
 800baa2:	2300      	movs	r3, #0
 800baa4:	f04f 32ff 	mov.w	r2, #4294967295
 800baa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baac:	f10a 0a01 	add.w	sl, sl, #1
 800bab0:	9304      	str	r3, [sp, #16]
 800bab2:	9307      	str	r3, [sp, #28]
 800bab4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bab8:	931a      	str	r3, [sp, #104]	; 0x68
 800baba:	4654      	mov	r4, sl
 800babc:	2205      	movs	r2, #5
 800babe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac2:	4858      	ldr	r0, [pc, #352]	; (800bc24 <_vfiprintf_r+0x24c>)
 800bac4:	f7f4 fba4 	bl	8000210 <memchr>
 800bac8:	9a04      	ldr	r2, [sp, #16]
 800baca:	b9d8      	cbnz	r0, 800bb04 <_vfiprintf_r+0x12c>
 800bacc:	06d1      	lsls	r1, r2, #27
 800bace:	bf44      	itt	mi
 800bad0:	2320      	movmi	r3, #32
 800bad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bad6:	0713      	lsls	r3, r2, #28
 800bad8:	bf44      	itt	mi
 800bada:	232b      	movmi	r3, #43	; 0x2b
 800badc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae0:	f89a 3000 	ldrb.w	r3, [sl]
 800bae4:	2b2a      	cmp	r3, #42	; 0x2a
 800bae6:	d015      	beq.n	800bb14 <_vfiprintf_r+0x13c>
 800bae8:	9a07      	ldr	r2, [sp, #28]
 800baea:	4654      	mov	r4, sl
 800baec:	2000      	movs	r0, #0
 800baee:	f04f 0c0a 	mov.w	ip, #10
 800baf2:	4621      	mov	r1, r4
 800baf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baf8:	3b30      	subs	r3, #48	; 0x30
 800bafa:	2b09      	cmp	r3, #9
 800bafc:	d94e      	bls.n	800bb9c <_vfiprintf_r+0x1c4>
 800bafe:	b1b0      	cbz	r0, 800bb2e <_vfiprintf_r+0x156>
 800bb00:	9207      	str	r2, [sp, #28]
 800bb02:	e014      	b.n	800bb2e <_vfiprintf_r+0x156>
 800bb04:	eba0 0308 	sub.w	r3, r0, r8
 800bb08:	fa09 f303 	lsl.w	r3, r9, r3
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	9304      	str	r3, [sp, #16]
 800bb10:	46a2      	mov	sl, r4
 800bb12:	e7d2      	b.n	800baba <_vfiprintf_r+0xe2>
 800bb14:	9b03      	ldr	r3, [sp, #12]
 800bb16:	1d19      	adds	r1, r3, #4
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	9103      	str	r1, [sp, #12]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	bfbb      	ittet	lt
 800bb20:	425b      	neglt	r3, r3
 800bb22:	f042 0202 	orrlt.w	r2, r2, #2
 800bb26:	9307      	strge	r3, [sp, #28]
 800bb28:	9307      	strlt	r3, [sp, #28]
 800bb2a:	bfb8      	it	lt
 800bb2c:	9204      	strlt	r2, [sp, #16]
 800bb2e:	7823      	ldrb	r3, [r4, #0]
 800bb30:	2b2e      	cmp	r3, #46	; 0x2e
 800bb32:	d10c      	bne.n	800bb4e <_vfiprintf_r+0x176>
 800bb34:	7863      	ldrb	r3, [r4, #1]
 800bb36:	2b2a      	cmp	r3, #42	; 0x2a
 800bb38:	d135      	bne.n	800bba6 <_vfiprintf_r+0x1ce>
 800bb3a:	9b03      	ldr	r3, [sp, #12]
 800bb3c:	1d1a      	adds	r2, r3, #4
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	9203      	str	r2, [sp, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	bfb8      	it	lt
 800bb46:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb4a:	3402      	adds	r4, #2
 800bb4c:	9305      	str	r3, [sp, #20]
 800bb4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc34 <_vfiprintf_r+0x25c>
 800bb52:	7821      	ldrb	r1, [r4, #0]
 800bb54:	2203      	movs	r2, #3
 800bb56:	4650      	mov	r0, sl
 800bb58:	f7f4 fb5a 	bl	8000210 <memchr>
 800bb5c:	b140      	cbz	r0, 800bb70 <_vfiprintf_r+0x198>
 800bb5e:	2340      	movs	r3, #64	; 0x40
 800bb60:	eba0 000a 	sub.w	r0, r0, sl
 800bb64:	fa03 f000 	lsl.w	r0, r3, r0
 800bb68:	9b04      	ldr	r3, [sp, #16]
 800bb6a:	4303      	orrs	r3, r0
 800bb6c:	3401      	adds	r4, #1
 800bb6e:	9304      	str	r3, [sp, #16]
 800bb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb74:	482c      	ldr	r0, [pc, #176]	; (800bc28 <_vfiprintf_r+0x250>)
 800bb76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb7a:	2206      	movs	r2, #6
 800bb7c:	f7f4 fb48 	bl	8000210 <memchr>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d03f      	beq.n	800bc04 <_vfiprintf_r+0x22c>
 800bb84:	4b29      	ldr	r3, [pc, #164]	; (800bc2c <_vfiprintf_r+0x254>)
 800bb86:	bb1b      	cbnz	r3, 800bbd0 <_vfiprintf_r+0x1f8>
 800bb88:	9b03      	ldr	r3, [sp, #12]
 800bb8a:	3307      	adds	r3, #7
 800bb8c:	f023 0307 	bic.w	r3, r3, #7
 800bb90:	3308      	adds	r3, #8
 800bb92:	9303      	str	r3, [sp, #12]
 800bb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb96:	443b      	add	r3, r7
 800bb98:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9a:	e767      	b.n	800ba6c <_vfiprintf_r+0x94>
 800bb9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bba0:	460c      	mov	r4, r1
 800bba2:	2001      	movs	r0, #1
 800bba4:	e7a5      	b.n	800baf2 <_vfiprintf_r+0x11a>
 800bba6:	2300      	movs	r3, #0
 800bba8:	3401      	adds	r4, #1
 800bbaa:	9305      	str	r3, [sp, #20]
 800bbac:	4619      	mov	r1, r3
 800bbae:	f04f 0c0a 	mov.w	ip, #10
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbb8:	3a30      	subs	r2, #48	; 0x30
 800bbba:	2a09      	cmp	r2, #9
 800bbbc:	d903      	bls.n	800bbc6 <_vfiprintf_r+0x1ee>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0c5      	beq.n	800bb4e <_vfiprintf_r+0x176>
 800bbc2:	9105      	str	r1, [sp, #20]
 800bbc4:	e7c3      	b.n	800bb4e <_vfiprintf_r+0x176>
 800bbc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbca:	4604      	mov	r4, r0
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e7f0      	b.n	800bbb2 <_vfiprintf_r+0x1da>
 800bbd0:	ab03      	add	r3, sp, #12
 800bbd2:	9300      	str	r3, [sp, #0]
 800bbd4:	462a      	mov	r2, r5
 800bbd6:	4b16      	ldr	r3, [pc, #88]	; (800bc30 <_vfiprintf_r+0x258>)
 800bbd8:	a904      	add	r1, sp, #16
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f3af 8000 	nop.w
 800bbe0:	4607      	mov	r7, r0
 800bbe2:	1c78      	adds	r0, r7, #1
 800bbe4:	d1d6      	bne.n	800bb94 <_vfiprintf_r+0x1bc>
 800bbe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbe8:	07d9      	lsls	r1, r3, #31
 800bbea:	d405      	bmi.n	800bbf8 <_vfiprintf_r+0x220>
 800bbec:	89ab      	ldrh	r3, [r5, #12]
 800bbee:	059a      	lsls	r2, r3, #22
 800bbf0:	d402      	bmi.n	800bbf8 <_vfiprintf_r+0x220>
 800bbf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbf4:	f000 fc45 	bl	800c482 <__retarget_lock_release_recursive>
 800bbf8:	89ab      	ldrh	r3, [r5, #12]
 800bbfa:	065b      	lsls	r3, r3, #25
 800bbfc:	f53f af12 	bmi.w	800ba24 <_vfiprintf_r+0x4c>
 800bc00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc02:	e711      	b.n	800ba28 <_vfiprintf_r+0x50>
 800bc04:	ab03      	add	r3, sp, #12
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	462a      	mov	r2, r5
 800bc0a:	4b09      	ldr	r3, [pc, #36]	; (800bc30 <_vfiprintf_r+0x258>)
 800bc0c:	a904      	add	r1, sp, #16
 800bc0e:	4630      	mov	r0, r6
 800bc10:	f000 f880 	bl	800bd14 <_printf_i>
 800bc14:	e7e4      	b.n	800bbe0 <_vfiprintf_r+0x208>
 800bc16:	bf00      	nop
 800bc18:	0800cde0 	.word	0x0800cde0
 800bc1c:	0800ce00 	.word	0x0800ce00
 800bc20:	0800cdc0 	.word	0x0800cdc0
 800bc24:	0800cd8d 	.word	0x0800cd8d
 800bc28:	0800cd97 	.word	0x0800cd97
 800bc2c:	00000000 	.word	0x00000000
 800bc30:	0800b9b3 	.word	0x0800b9b3
 800bc34:	0800cd93 	.word	0x0800cd93

0800bc38 <_printf_common>:
 800bc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc3c:	4616      	mov	r6, r2
 800bc3e:	4699      	mov	r9, r3
 800bc40:	688a      	ldr	r2, [r1, #8]
 800bc42:	690b      	ldr	r3, [r1, #16]
 800bc44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	bfb8      	it	lt
 800bc4c:	4613      	movlt	r3, r2
 800bc4e:	6033      	str	r3, [r6, #0]
 800bc50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc54:	4607      	mov	r7, r0
 800bc56:	460c      	mov	r4, r1
 800bc58:	b10a      	cbz	r2, 800bc5e <_printf_common+0x26>
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	6033      	str	r3, [r6, #0]
 800bc5e:	6823      	ldr	r3, [r4, #0]
 800bc60:	0699      	lsls	r1, r3, #26
 800bc62:	bf42      	ittt	mi
 800bc64:	6833      	ldrmi	r3, [r6, #0]
 800bc66:	3302      	addmi	r3, #2
 800bc68:	6033      	strmi	r3, [r6, #0]
 800bc6a:	6825      	ldr	r5, [r4, #0]
 800bc6c:	f015 0506 	ands.w	r5, r5, #6
 800bc70:	d106      	bne.n	800bc80 <_printf_common+0x48>
 800bc72:	f104 0a19 	add.w	sl, r4, #25
 800bc76:	68e3      	ldr	r3, [r4, #12]
 800bc78:	6832      	ldr	r2, [r6, #0]
 800bc7a:	1a9b      	subs	r3, r3, r2
 800bc7c:	42ab      	cmp	r3, r5
 800bc7e:	dc26      	bgt.n	800bcce <_printf_common+0x96>
 800bc80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc84:	1e13      	subs	r3, r2, #0
 800bc86:	6822      	ldr	r2, [r4, #0]
 800bc88:	bf18      	it	ne
 800bc8a:	2301      	movne	r3, #1
 800bc8c:	0692      	lsls	r2, r2, #26
 800bc8e:	d42b      	bmi.n	800bce8 <_printf_common+0xb0>
 800bc90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc94:	4649      	mov	r1, r9
 800bc96:	4638      	mov	r0, r7
 800bc98:	47c0      	blx	r8
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	d01e      	beq.n	800bcdc <_printf_common+0xa4>
 800bc9e:	6823      	ldr	r3, [r4, #0]
 800bca0:	68e5      	ldr	r5, [r4, #12]
 800bca2:	6832      	ldr	r2, [r6, #0]
 800bca4:	f003 0306 	and.w	r3, r3, #6
 800bca8:	2b04      	cmp	r3, #4
 800bcaa:	bf08      	it	eq
 800bcac:	1aad      	subeq	r5, r5, r2
 800bcae:	68a3      	ldr	r3, [r4, #8]
 800bcb0:	6922      	ldr	r2, [r4, #16]
 800bcb2:	bf0c      	ite	eq
 800bcb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcb8:	2500      	movne	r5, #0
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	bfc4      	itt	gt
 800bcbe:	1a9b      	subgt	r3, r3, r2
 800bcc0:	18ed      	addgt	r5, r5, r3
 800bcc2:	2600      	movs	r6, #0
 800bcc4:	341a      	adds	r4, #26
 800bcc6:	42b5      	cmp	r5, r6
 800bcc8:	d11a      	bne.n	800bd00 <_printf_common+0xc8>
 800bcca:	2000      	movs	r0, #0
 800bccc:	e008      	b.n	800bce0 <_printf_common+0xa8>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	4652      	mov	r2, sl
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	4638      	mov	r0, r7
 800bcd6:	47c0      	blx	r8
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d103      	bne.n	800bce4 <_printf_common+0xac>
 800bcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce4:	3501      	adds	r5, #1
 800bce6:	e7c6      	b.n	800bc76 <_printf_common+0x3e>
 800bce8:	18e1      	adds	r1, r4, r3
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	2030      	movs	r0, #48	; 0x30
 800bcee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcf2:	4422      	add	r2, r4
 800bcf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcfc:	3302      	adds	r3, #2
 800bcfe:	e7c7      	b.n	800bc90 <_printf_common+0x58>
 800bd00:	2301      	movs	r3, #1
 800bd02:	4622      	mov	r2, r4
 800bd04:	4649      	mov	r1, r9
 800bd06:	4638      	mov	r0, r7
 800bd08:	47c0      	blx	r8
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	d0e6      	beq.n	800bcdc <_printf_common+0xa4>
 800bd0e:	3601      	adds	r6, #1
 800bd10:	e7d9      	b.n	800bcc6 <_printf_common+0x8e>
	...

0800bd14 <_printf_i>:
 800bd14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd18:	460c      	mov	r4, r1
 800bd1a:	4691      	mov	r9, r2
 800bd1c:	7e27      	ldrb	r7, [r4, #24]
 800bd1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bd20:	2f78      	cmp	r7, #120	; 0x78
 800bd22:	4680      	mov	r8, r0
 800bd24:	469a      	mov	sl, r3
 800bd26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd2a:	d807      	bhi.n	800bd3c <_printf_i+0x28>
 800bd2c:	2f62      	cmp	r7, #98	; 0x62
 800bd2e:	d80a      	bhi.n	800bd46 <_printf_i+0x32>
 800bd30:	2f00      	cmp	r7, #0
 800bd32:	f000 80d8 	beq.w	800bee6 <_printf_i+0x1d2>
 800bd36:	2f58      	cmp	r7, #88	; 0x58
 800bd38:	f000 80a3 	beq.w	800be82 <_printf_i+0x16e>
 800bd3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd44:	e03a      	b.n	800bdbc <_printf_i+0xa8>
 800bd46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd4a:	2b15      	cmp	r3, #21
 800bd4c:	d8f6      	bhi.n	800bd3c <_printf_i+0x28>
 800bd4e:	a001      	add	r0, pc, #4	; (adr r0, 800bd54 <_printf_i+0x40>)
 800bd50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bd54:	0800bdad 	.word	0x0800bdad
 800bd58:	0800bdc1 	.word	0x0800bdc1
 800bd5c:	0800bd3d 	.word	0x0800bd3d
 800bd60:	0800bd3d 	.word	0x0800bd3d
 800bd64:	0800bd3d 	.word	0x0800bd3d
 800bd68:	0800bd3d 	.word	0x0800bd3d
 800bd6c:	0800bdc1 	.word	0x0800bdc1
 800bd70:	0800bd3d 	.word	0x0800bd3d
 800bd74:	0800bd3d 	.word	0x0800bd3d
 800bd78:	0800bd3d 	.word	0x0800bd3d
 800bd7c:	0800bd3d 	.word	0x0800bd3d
 800bd80:	0800becd 	.word	0x0800becd
 800bd84:	0800bdf1 	.word	0x0800bdf1
 800bd88:	0800beaf 	.word	0x0800beaf
 800bd8c:	0800bd3d 	.word	0x0800bd3d
 800bd90:	0800bd3d 	.word	0x0800bd3d
 800bd94:	0800beef 	.word	0x0800beef
 800bd98:	0800bd3d 	.word	0x0800bd3d
 800bd9c:	0800bdf1 	.word	0x0800bdf1
 800bda0:	0800bd3d 	.word	0x0800bd3d
 800bda4:	0800bd3d 	.word	0x0800bd3d
 800bda8:	0800beb7 	.word	0x0800beb7
 800bdac:	680b      	ldr	r3, [r1, #0]
 800bdae:	1d1a      	adds	r2, r3, #4
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	600a      	str	r2, [r1, #0]
 800bdb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bdb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e0a3      	b.n	800bf08 <_printf_i+0x1f4>
 800bdc0:	6825      	ldr	r5, [r4, #0]
 800bdc2:	6808      	ldr	r0, [r1, #0]
 800bdc4:	062e      	lsls	r6, r5, #24
 800bdc6:	f100 0304 	add.w	r3, r0, #4
 800bdca:	d50a      	bpl.n	800bde2 <_printf_i+0xce>
 800bdcc:	6805      	ldr	r5, [r0, #0]
 800bdce:	600b      	str	r3, [r1, #0]
 800bdd0:	2d00      	cmp	r5, #0
 800bdd2:	da03      	bge.n	800bddc <_printf_i+0xc8>
 800bdd4:	232d      	movs	r3, #45	; 0x2d
 800bdd6:	426d      	negs	r5, r5
 800bdd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bddc:	485e      	ldr	r0, [pc, #376]	; (800bf58 <_printf_i+0x244>)
 800bdde:	230a      	movs	r3, #10
 800bde0:	e019      	b.n	800be16 <_printf_i+0x102>
 800bde2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bde6:	6805      	ldr	r5, [r0, #0]
 800bde8:	600b      	str	r3, [r1, #0]
 800bdea:	bf18      	it	ne
 800bdec:	b22d      	sxthne	r5, r5
 800bdee:	e7ef      	b.n	800bdd0 <_printf_i+0xbc>
 800bdf0:	680b      	ldr	r3, [r1, #0]
 800bdf2:	6825      	ldr	r5, [r4, #0]
 800bdf4:	1d18      	adds	r0, r3, #4
 800bdf6:	6008      	str	r0, [r1, #0]
 800bdf8:	0628      	lsls	r0, r5, #24
 800bdfa:	d501      	bpl.n	800be00 <_printf_i+0xec>
 800bdfc:	681d      	ldr	r5, [r3, #0]
 800bdfe:	e002      	b.n	800be06 <_printf_i+0xf2>
 800be00:	0669      	lsls	r1, r5, #25
 800be02:	d5fb      	bpl.n	800bdfc <_printf_i+0xe8>
 800be04:	881d      	ldrh	r5, [r3, #0]
 800be06:	4854      	ldr	r0, [pc, #336]	; (800bf58 <_printf_i+0x244>)
 800be08:	2f6f      	cmp	r7, #111	; 0x6f
 800be0a:	bf0c      	ite	eq
 800be0c:	2308      	moveq	r3, #8
 800be0e:	230a      	movne	r3, #10
 800be10:	2100      	movs	r1, #0
 800be12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be16:	6866      	ldr	r6, [r4, #4]
 800be18:	60a6      	str	r6, [r4, #8]
 800be1a:	2e00      	cmp	r6, #0
 800be1c:	bfa2      	ittt	ge
 800be1e:	6821      	ldrge	r1, [r4, #0]
 800be20:	f021 0104 	bicge.w	r1, r1, #4
 800be24:	6021      	strge	r1, [r4, #0]
 800be26:	b90d      	cbnz	r5, 800be2c <_printf_i+0x118>
 800be28:	2e00      	cmp	r6, #0
 800be2a:	d04d      	beq.n	800bec8 <_printf_i+0x1b4>
 800be2c:	4616      	mov	r6, r2
 800be2e:	fbb5 f1f3 	udiv	r1, r5, r3
 800be32:	fb03 5711 	mls	r7, r3, r1, r5
 800be36:	5dc7      	ldrb	r7, [r0, r7]
 800be38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be3c:	462f      	mov	r7, r5
 800be3e:	42bb      	cmp	r3, r7
 800be40:	460d      	mov	r5, r1
 800be42:	d9f4      	bls.n	800be2e <_printf_i+0x11a>
 800be44:	2b08      	cmp	r3, #8
 800be46:	d10b      	bne.n	800be60 <_printf_i+0x14c>
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	07df      	lsls	r7, r3, #31
 800be4c:	d508      	bpl.n	800be60 <_printf_i+0x14c>
 800be4e:	6923      	ldr	r3, [r4, #16]
 800be50:	6861      	ldr	r1, [r4, #4]
 800be52:	4299      	cmp	r1, r3
 800be54:	bfde      	ittt	le
 800be56:	2330      	movle	r3, #48	; 0x30
 800be58:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be60:	1b92      	subs	r2, r2, r6
 800be62:	6122      	str	r2, [r4, #16]
 800be64:	f8cd a000 	str.w	sl, [sp]
 800be68:	464b      	mov	r3, r9
 800be6a:	aa03      	add	r2, sp, #12
 800be6c:	4621      	mov	r1, r4
 800be6e:	4640      	mov	r0, r8
 800be70:	f7ff fee2 	bl	800bc38 <_printf_common>
 800be74:	3001      	adds	r0, #1
 800be76:	d14c      	bne.n	800bf12 <_printf_i+0x1fe>
 800be78:	f04f 30ff 	mov.w	r0, #4294967295
 800be7c:	b004      	add	sp, #16
 800be7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be82:	4835      	ldr	r0, [pc, #212]	; (800bf58 <_printf_i+0x244>)
 800be84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	680e      	ldr	r6, [r1, #0]
 800be8c:	061f      	lsls	r7, r3, #24
 800be8e:	f856 5b04 	ldr.w	r5, [r6], #4
 800be92:	600e      	str	r6, [r1, #0]
 800be94:	d514      	bpl.n	800bec0 <_printf_i+0x1ac>
 800be96:	07d9      	lsls	r1, r3, #31
 800be98:	bf44      	itt	mi
 800be9a:	f043 0320 	orrmi.w	r3, r3, #32
 800be9e:	6023      	strmi	r3, [r4, #0]
 800bea0:	b91d      	cbnz	r5, 800beaa <_printf_i+0x196>
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	f023 0320 	bic.w	r3, r3, #32
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	2310      	movs	r3, #16
 800beac:	e7b0      	b.n	800be10 <_printf_i+0xfc>
 800beae:	6823      	ldr	r3, [r4, #0]
 800beb0:	f043 0320 	orr.w	r3, r3, #32
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	2378      	movs	r3, #120	; 0x78
 800beb8:	4828      	ldr	r0, [pc, #160]	; (800bf5c <_printf_i+0x248>)
 800beba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bebe:	e7e3      	b.n	800be88 <_printf_i+0x174>
 800bec0:	065e      	lsls	r6, r3, #25
 800bec2:	bf48      	it	mi
 800bec4:	b2ad      	uxthmi	r5, r5
 800bec6:	e7e6      	b.n	800be96 <_printf_i+0x182>
 800bec8:	4616      	mov	r6, r2
 800beca:	e7bb      	b.n	800be44 <_printf_i+0x130>
 800becc:	680b      	ldr	r3, [r1, #0]
 800bece:	6826      	ldr	r6, [r4, #0]
 800bed0:	6960      	ldr	r0, [r4, #20]
 800bed2:	1d1d      	adds	r5, r3, #4
 800bed4:	600d      	str	r5, [r1, #0]
 800bed6:	0635      	lsls	r5, r6, #24
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	d501      	bpl.n	800bee0 <_printf_i+0x1cc>
 800bedc:	6018      	str	r0, [r3, #0]
 800bede:	e002      	b.n	800bee6 <_printf_i+0x1d2>
 800bee0:	0671      	lsls	r1, r6, #25
 800bee2:	d5fb      	bpl.n	800bedc <_printf_i+0x1c8>
 800bee4:	8018      	strh	r0, [r3, #0]
 800bee6:	2300      	movs	r3, #0
 800bee8:	6123      	str	r3, [r4, #16]
 800beea:	4616      	mov	r6, r2
 800beec:	e7ba      	b.n	800be64 <_printf_i+0x150>
 800beee:	680b      	ldr	r3, [r1, #0]
 800bef0:	1d1a      	adds	r2, r3, #4
 800bef2:	600a      	str	r2, [r1, #0]
 800bef4:	681e      	ldr	r6, [r3, #0]
 800bef6:	6862      	ldr	r2, [r4, #4]
 800bef8:	2100      	movs	r1, #0
 800befa:	4630      	mov	r0, r6
 800befc:	f7f4 f988 	bl	8000210 <memchr>
 800bf00:	b108      	cbz	r0, 800bf06 <_printf_i+0x1f2>
 800bf02:	1b80      	subs	r0, r0, r6
 800bf04:	6060      	str	r0, [r4, #4]
 800bf06:	6863      	ldr	r3, [r4, #4]
 800bf08:	6123      	str	r3, [r4, #16]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf10:	e7a8      	b.n	800be64 <_printf_i+0x150>
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	4632      	mov	r2, r6
 800bf16:	4649      	mov	r1, r9
 800bf18:	4640      	mov	r0, r8
 800bf1a:	47d0      	blx	sl
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	d0ab      	beq.n	800be78 <_printf_i+0x164>
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	079b      	lsls	r3, r3, #30
 800bf24:	d413      	bmi.n	800bf4e <_printf_i+0x23a>
 800bf26:	68e0      	ldr	r0, [r4, #12]
 800bf28:	9b03      	ldr	r3, [sp, #12]
 800bf2a:	4298      	cmp	r0, r3
 800bf2c:	bfb8      	it	lt
 800bf2e:	4618      	movlt	r0, r3
 800bf30:	e7a4      	b.n	800be7c <_printf_i+0x168>
 800bf32:	2301      	movs	r3, #1
 800bf34:	4632      	mov	r2, r6
 800bf36:	4649      	mov	r1, r9
 800bf38:	4640      	mov	r0, r8
 800bf3a:	47d0      	blx	sl
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d09b      	beq.n	800be78 <_printf_i+0x164>
 800bf40:	3501      	adds	r5, #1
 800bf42:	68e3      	ldr	r3, [r4, #12]
 800bf44:	9903      	ldr	r1, [sp, #12]
 800bf46:	1a5b      	subs	r3, r3, r1
 800bf48:	42ab      	cmp	r3, r5
 800bf4a:	dcf2      	bgt.n	800bf32 <_printf_i+0x21e>
 800bf4c:	e7eb      	b.n	800bf26 <_printf_i+0x212>
 800bf4e:	2500      	movs	r5, #0
 800bf50:	f104 0619 	add.w	r6, r4, #25
 800bf54:	e7f5      	b.n	800bf42 <_printf_i+0x22e>
 800bf56:	bf00      	nop
 800bf58:	0800cd9e 	.word	0x0800cd9e
 800bf5c:	0800cdaf 	.word	0x0800cdaf

0800bf60 <_sbrk_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4d06      	ldr	r5, [pc, #24]	; (800bf7c <_sbrk_r+0x1c>)
 800bf64:	2300      	movs	r3, #0
 800bf66:	4604      	mov	r4, r0
 800bf68:	4608      	mov	r0, r1
 800bf6a:	602b      	str	r3, [r5, #0]
 800bf6c:	f7f7 fbee 	bl	800374c <_sbrk>
 800bf70:	1c43      	adds	r3, r0, #1
 800bf72:	d102      	bne.n	800bf7a <_sbrk_r+0x1a>
 800bf74:	682b      	ldr	r3, [r5, #0]
 800bf76:	b103      	cbz	r3, 800bf7a <_sbrk_r+0x1a>
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	bd38      	pop	{r3, r4, r5, pc}
 800bf7c:	2000a380 	.word	0x2000a380

0800bf80 <__swbuf_r>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	460e      	mov	r6, r1
 800bf84:	4614      	mov	r4, r2
 800bf86:	4605      	mov	r5, r0
 800bf88:	b118      	cbz	r0, 800bf92 <__swbuf_r+0x12>
 800bf8a:	6983      	ldr	r3, [r0, #24]
 800bf8c:	b90b      	cbnz	r3, 800bf92 <__swbuf_r+0x12>
 800bf8e:	f000 f9d9 	bl	800c344 <__sinit>
 800bf92:	4b21      	ldr	r3, [pc, #132]	; (800c018 <__swbuf_r+0x98>)
 800bf94:	429c      	cmp	r4, r3
 800bf96:	d12b      	bne.n	800bff0 <__swbuf_r+0x70>
 800bf98:	686c      	ldr	r4, [r5, #4]
 800bf9a:	69a3      	ldr	r3, [r4, #24]
 800bf9c:	60a3      	str	r3, [r4, #8]
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	071a      	lsls	r2, r3, #28
 800bfa2:	d52f      	bpl.n	800c004 <__swbuf_r+0x84>
 800bfa4:	6923      	ldr	r3, [r4, #16]
 800bfa6:	b36b      	cbz	r3, 800c004 <__swbuf_r+0x84>
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	6820      	ldr	r0, [r4, #0]
 800bfac:	1ac0      	subs	r0, r0, r3
 800bfae:	6963      	ldr	r3, [r4, #20]
 800bfb0:	b2f6      	uxtb	r6, r6
 800bfb2:	4283      	cmp	r3, r0
 800bfb4:	4637      	mov	r7, r6
 800bfb6:	dc04      	bgt.n	800bfc2 <__swbuf_r+0x42>
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f000 f92e 	bl	800c21c <_fflush_r>
 800bfc0:	bb30      	cbnz	r0, 800c010 <__swbuf_r+0x90>
 800bfc2:	68a3      	ldr	r3, [r4, #8]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	60a3      	str	r3, [r4, #8]
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	6022      	str	r2, [r4, #0]
 800bfce:	701e      	strb	r6, [r3, #0]
 800bfd0:	6963      	ldr	r3, [r4, #20]
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	4283      	cmp	r3, r0
 800bfd6:	d004      	beq.n	800bfe2 <__swbuf_r+0x62>
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	07db      	lsls	r3, r3, #31
 800bfdc:	d506      	bpl.n	800bfec <__swbuf_r+0x6c>
 800bfde:	2e0a      	cmp	r6, #10
 800bfe0:	d104      	bne.n	800bfec <__swbuf_r+0x6c>
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f000 f919 	bl	800c21c <_fflush_r>
 800bfea:	b988      	cbnz	r0, 800c010 <__swbuf_r+0x90>
 800bfec:	4638      	mov	r0, r7
 800bfee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bff0:	4b0a      	ldr	r3, [pc, #40]	; (800c01c <__swbuf_r+0x9c>)
 800bff2:	429c      	cmp	r4, r3
 800bff4:	d101      	bne.n	800bffa <__swbuf_r+0x7a>
 800bff6:	68ac      	ldr	r4, [r5, #8]
 800bff8:	e7cf      	b.n	800bf9a <__swbuf_r+0x1a>
 800bffa:	4b09      	ldr	r3, [pc, #36]	; (800c020 <__swbuf_r+0xa0>)
 800bffc:	429c      	cmp	r4, r3
 800bffe:	bf08      	it	eq
 800c000:	68ec      	ldreq	r4, [r5, #12]
 800c002:	e7ca      	b.n	800bf9a <__swbuf_r+0x1a>
 800c004:	4621      	mov	r1, r4
 800c006:	4628      	mov	r0, r5
 800c008:	f000 f80c 	bl	800c024 <__swsetup_r>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d0cb      	beq.n	800bfa8 <__swbuf_r+0x28>
 800c010:	f04f 37ff 	mov.w	r7, #4294967295
 800c014:	e7ea      	b.n	800bfec <__swbuf_r+0x6c>
 800c016:	bf00      	nop
 800c018:	0800cde0 	.word	0x0800cde0
 800c01c:	0800ce00 	.word	0x0800ce00
 800c020:	0800cdc0 	.word	0x0800cdc0

0800c024 <__swsetup_r>:
 800c024:	4b32      	ldr	r3, [pc, #200]	; (800c0f0 <__swsetup_r+0xcc>)
 800c026:	b570      	push	{r4, r5, r6, lr}
 800c028:	681d      	ldr	r5, [r3, #0]
 800c02a:	4606      	mov	r6, r0
 800c02c:	460c      	mov	r4, r1
 800c02e:	b125      	cbz	r5, 800c03a <__swsetup_r+0x16>
 800c030:	69ab      	ldr	r3, [r5, #24]
 800c032:	b913      	cbnz	r3, 800c03a <__swsetup_r+0x16>
 800c034:	4628      	mov	r0, r5
 800c036:	f000 f985 	bl	800c344 <__sinit>
 800c03a:	4b2e      	ldr	r3, [pc, #184]	; (800c0f4 <__swsetup_r+0xd0>)
 800c03c:	429c      	cmp	r4, r3
 800c03e:	d10f      	bne.n	800c060 <__swsetup_r+0x3c>
 800c040:	686c      	ldr	r4, [r5, #4]
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c048:	0719      	lsls	r1, r3, #28
 800c04a:	d42c      	bmi.n	800c0a6 <__swsetup_r+0x82>
 800c04c:	06dd      	lsls	r5, r3, #27
 800c04e:	d411      	bmi.n	800c074 <__swsetup_r+0x50>
 800c050:	2309      	movs	r3, #9
 800c052:	6033      	str	r3, [r6, #0]
 800c054:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c058:	81a3      	strh	r3, [r4, #12]
 800c05a:	f04f 30ff 	mov.w	r0, #4294967295
 800c05e:	e03e      	b.n	800c0de <__swsetup_r+0xba>
 800c060:	4b25      	ldr	r3, [pc, #148]	; (800c0f8 <__swsetup_r+0xd4>)
 800c062:	429c      	cmp	r4, r3
 800c064:	d101      	bne.n	800c06a <__swsetup_r+0x46>
 800c066:	68ac      	ldr	r4, [r5, #8]
 800c068:	e7eb      	b.n	800c042 <__swsetup_r+0x1e>
 800c06a:	4b24      	ldr	r3, [pc, #144]	; (800c0fc <__swsetup_r+0xd8>)
 800c06c:	429c      	cmp	r4, r3
 800c06e:	bf08      	it	eq
 800c070:	68ec      	ldreq	r4, [r5, #12]
 800c072:	e7e6      	b.n	800c042 <__swsetup_r+0x1e>
 800c074:	0758      	lsls	r0, r3, #29
 800c076:	d512      	bpl.n	800c09e <__swsetup_r+0x7a>
 800c078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c07a:	b141      	cbz	r1, 800c08e <__swsetup_r+0x6a>
 800c07c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c080:	4299      	cmp	r1, r3
 800c082:	d002      	beq.n	800c08a <__swsetup_r+0x66>
 800c084:	4630      	mov	r0, r6
 800c086:	f7ff fa77 	bl	800b578 <_free_r>
 800c08a:	2300      	movs	r3, #0
 800c08c:	6363      	str	r3, [r4, #52]	; 0x34
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c094:	81a3      	strh	r3, [r4, #12]
 800c096:	2300      	movs	r3, #0
 800c098:	6063      	str	r3, [r4, #4]
 800c09a:	6923      	ldr	r3, [r4, #16]
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	f043 0308 	orr.w	r3, r3, #8
 800c0a4:	81a3      	strh	r3, [r4, #12]
 800c0a6:	6923      	ldr	r3, [r4, #16]
 800c0a8:	b94b      	cbnz	r3, 800c0be <__swsetup_r+0x9a>
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0b4:	d003      	beq.n	800c0be <__swsetup_r+0x9a>
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	f000 fa07 	bl	800c4cc <__smakebuf_r>
 800c0be:	89a0      	ldrh	r0, [r4, #12]
 800c0c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0c4:	f010 0301 	ands.w	r3, r0, #1
 800c0c8:	d00a      	beq.n	800c0e0 <__swsetup_r+0xbc>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	60a3      	str	r3, [r4, #8]
 800c0ce:	6963      	ldr	r3, [r4, #20]
 800c0d0:	425b      	negs	r3, r3
 800c0d2:	61a3      	str	r3, [r4, #24]
 800c0d4:	6923      	ldr	r3, [r4, #16]
 800c0d6:	b943      	cbnz	r3, 800c0ea <__swsetup_r+0xc6>
 800c0d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0dc:	d1ba      	bne.n	800c054 <__swsetup_r+0x30>
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	0781      	lsls	r1, r0, #30
 800c0e2:	bf58      	it	pl
 800c0e4:	6963      	ldrpl	r3, [r4, #20]
 800c0e6:	60a3      	str	r3, [r4, #8]
 800c0e8:	e7f4      	b.n	800c0d4 <__swsetup_r+0xb0>
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	e7f7      	b.n	800c0de <__swsetup_r+0xba>
 800c0ee:	bf00      	nop
 800c0f0:	20000198 	.word	0x20000198
 800c0f4:	0800cde0 	.word	0x0800cde0
 800c0f8:	0800ce00 	.word	0x0800ce00
 800c0fc:	0800cdc0 	.word	0x0800cdc0

0800c100 <abort>:
 800c100:	b508      	push	{r3, lr}
 800c102:	2006      	movs	r0, #6
 800c104:	f000 fa96 	bl	800c634 <raise>
 800c108:	2001      	movs	r0, #1
 800c10a:	f7f7 faa7 	bl	800365c <_exit>
	...

0800c110 <__sflush_r>:
 800c110:	898a      	ldrh	r2, [r1, #12]
 800c112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c116:	4605      	mov	r5, r0
 800c118:	0710      	lsls	r0, r2, #28
 800c11a:	460c      	mov	r4, r1
 800c11c:	d458      	bmi.n	800c1d0 <__sflush_r+0xc0>
 800c11e:	684b      	ldr	r3, [r1, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	dc05      	bgt.n	800c130 <__sflush_r+0x20>
 800c124:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c126:	2b00      	cmp	r3, #0
 800c128:	dc02      	bgt.n	800c130 <__sflush_r+0x20>
 800c12a:	2000      	movs	r0, #0
 800c12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c132:	2e00      	cmp	r6, #0
 800c134:	d0f9      	beq.n	800c12a <__sflush_r+0x1a>
 800c136:	2300      	movs	r3, #0
 800c138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c13c:	682f      	ldr	r7, [r5, #0]
 800c13e:	602b      	str	r3, [r5, #0]
 800c140:	d032      	beq.n	800c1a8 <__sflush_r+0x98>
 800c142:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	075a      	lsls	r2, r3, #29
 800c148:	d505      	bpl.n	800c156 <__sflush_r+0x46>
 800c14a:	6863      	ldr	r3, [r4, #4]
 800c14c:	1ac0      	subs	r0, r0, r3
 800c14e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c150:	b10b      	cbz	r3, 800c156 <__sflush_r+0x46>
 800c152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c154:	1ac0      	subs	r0, r0, r3
 800c156:	2300      	movs	r3, #0
 800c158:	4602      	mov	r2, r0
 800c15a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c15c:	6a21      	ldr	r1, [r4, #32]
 800c15e:	4628      	mov	r0, r5
 800c160:	47b0      	blx	r6
 800c162:	1c43      	adds	r3, r0, #1
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	d106      	bne.n	800c176 <__sflush_r+0x66>
 800c168:	6829      	ldr	r1, [r5, #0]
 800c16a:	291d      	cmp	r1, #29
 800c16c:	d82c      	bhi.n	800c1c8 <__sflush_r+0xb8>
 800c16e:	4a2a      	ldr	r2, [pc, #168]	; (800c218 <__sflush_r+0x108>)
 800c170:	40ca      	lsrs	r2, r1
 800c172:	07d6      	lsls	r6, r2, #31
 800c174:	d528      	bpl.n	800c1c8 <__sflush_r+0xb8>
 800c176:	2200      	movs	r2, #0
 800c178:	6062      	str	r2, [r4, #4]
 800c17a:	04d9      	lsls	r1, r3, #19
 800c17c:	6922      	ldr	r2, [r4, #16]
 800c17e:	6022      	str	r2, [r4, #0]
 800c180:	d504      	bpl.n	800c18c <__sflush_r+0x7c>
 800c182:	1c42      	adds	r2, r0, #1
 800c184:	d101      	bne.n	800c18a <__sflush_r+0x7a>
 800c186:	682b      	ldr	r3, [r5, #0]
 800c188:	b903      	cbnz	r3, 800c18c <__sflush_r+0x7c>
 800c18a:	6560      	str	r0, [r4, #84]	; 0x54
 800c18c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c18e:	602f      	str	r7, [r5, #0]
 800c190:	2900      	cmp	r1, #0
 800c192:	d0ca      	beq.n	800c12a <__sflush_r+0x1a>
 800c194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c198:	4299      	cmp	r1, r3
 800c19a:	d002      	beq.n	800c1a2 <__sflush_r+0x92>
 800c19c:	4628      	mov	r0, r5
 800c19e:	f7ff f9eb 	bl	800b578 <_free_r>
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	6360      	str	r0, [r4, #52]	; 0x34
 800c1a6:	e7c1      	b.n	800c12c <__sflush_r+0x1c>
 800c1a8:	6a21      	ldr	r1, [r4, #32]
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	47b0      	blx	r6
 800c1b0:	1c41      	adds	r1, r0, #1
 800c1b2:	d1c7      	bne.n	800c144 <__sflush_r+0x34>
 800c1b4:	682b      	ldr	r3, [r5, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d0c4      	beq.n	800c144 <__sflush_r+0x34>
 800c1ba:	2b1d      	cmp	r3, #29
 800c1bc:	d001      	beq.n	800c1c2 <__sflush_r+0xb2>
 800c1be:	2b16      	cmp	r3, #22
 800c1c0:	d101      	bne.n	800c1c6 <__sflush_r+0xb6>
 800c1c2:	602f      	str	r7, [r5, #0]
 800c1c4:	e7b1      	b.n	800c12a <__sflush_r+0x1a>
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1cc:	81a3      	strh	r3, [r4, #12]
 800c1ce:	e7ad      	b.n	800c12c <__sflush_r+0x1c>
 800c1d0:	690f      	ldr	r7, [r1, #16]
 800c1d2:	2f00      	cmp	r7, #0
 800c1d4:	d0a9      	beq.n	800c12a <__sflush_r+0x1a>
 800c1d6:	0793      	lsls	r3, r2, #30
 800c1d8:	680e      	ldr	r6, [r1, #0]
 800c1da:	bf08      	it	eq
 800c1dc:	694b      	ldreq	r3, [r1, #20]
 800c1de:	600f      	str	r7, [r1, #0]
 800c1e0:	bf18      	it	ne
 800c1e2:	2300      	movne	r3, #0
 800c1e4:	eba6 0807 	sub.w	r8, r6, r7
 800c1e8:	608b      	str	r3, [r1, #8]
 800c1ea:	f1b8 0f00 	cmp.w	r8, #0
 800c1ee:	dd9c      	ble.n	800c12a <__sflush_r+0x1a>
 800c1f0:	6a21      	ldr	r1, [r4, #32]
 800c1f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1f4:	4643      	mov	r3, r8
 800c1f6:	463a      	mov	r2, r7
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	47b0      	blx	r6
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	dc06      	bgt.n	800c20e <__sflush_r+0xfe>
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	f04f 30ff 	mov.w	r0, #4294967295
 800c20c:	e78e      	b.n	800c12c <__sflush_r+0x1c>
 800c20e:	4407      	add	r7, r0
 800c210:	eba8 0800 	sub.w	r8, r8, r0
 800c214:	e7e9      	b.n	800c1ea <__sflush_r+0xda>
 800c216:	bf00      	nop
 800c218:	20400001 	.word	0x20400001

0800c21c <_fflush_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	690b      	ldr	r3, [r1, #16]
 800c220:	4605      	mov	r5, r0
 800c222:	460c      	mov	r4, r1
 800c224:	b913      	cbnz	r3, 800c22c <_fflush_r+0x10>
 800c226:	2500      	movs	r5, #0
 800c228:	4628      	mov	r0, r5
 800c22a:	bd38      	pop	{r3, r4, r5, pc}
 800c22c:	b118      	cbz	r0, 800c236 <_fflush_r+0x1a>
 800c22e:	6983      	ldr	r3, [r0, #24]
 800c230:	b90b      	cbnz	r3, 800c236 <_fflush_r+0x1a>
 800c232:	f000 f887 	bl	800c344 <__sinit>
 800c236:	4b14      	ldr	r3, [pc, #80]	; (800c288 <_fflush_r+0x6c>)
 800c238:	429c      	cmp	r4, r3
 800c23a:	d11b      	bne.n	800c274 <_fflush_r+0x58>
 800c23c:	686c      	ldr	r4, [r5, #4]
 800c23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d0ef      	beq.n	800c226 <_fflush_r+0xa>
 800c246:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c248:	07d0      	lsls	r0, r2, #31
 800c24a:	d404      	bmi.n	800c256 <_fflush_r+0x3a>
 800c24c:	0599      	lsls	r1, r3, #22
 800c24e:	d402      	bmi.n	800c256 <_fflush_r+0x3a>
 800c250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c252:	f000 f915 	bl	800c480 <__retarget_lock_acquire_recursive>
 800c256:	4628      	mov	r0, r5
 800c258:	4621      	mov	r1, r4
 800c25a:	f7ff ff59 	bl	800c110 <__sflush_r>
 800c25e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c260:	07da      	lsls	r2, r3, #31
 800c262:	4605      	mov	r5, r0
 800c264:	d4e0      	bmi.n	800c228 <_fflush_r+0xc>
 800c266:	89a3      	ldrh	r3, [r4, #12]
 800c268:	059b      	lsls	r3, r3, #22
 800c26a:	d4dd      	bmi.n	800c228 <_fflush_r+0xc>
 800c26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c26e:	f000 f908 	bl	800c482 <__retarget_lock_release_recursive>
 800c272:	e7d9      	b.n	800c228 <_fflush_r+0xc>
 800c274:	4b05      	ldr	r3, [pc, #20]	; (800c28c <_fflush_r+0x70>)
 800c276:	429c      	cmp	r4, r3
 800c278:	d101      	bne.n	800c27e <_fflush_r+0x62>
 800c27a:	68ac      	ldr	r4, [r5, #8]
 800c27c:	e7df      	b.n	800c23e <_fflush_r+0x22>
 800c27e:	4b04      	ldr	r3, [pc, #16]	; (800c290 <_fflush_r+0x74>)
 800c280:	429c      	cmp	r4, r3
 800c282:	bf08      	it	eq
 800c284:	68ec      	ldreq	r4, [r5, #12]
 800c286:	e7da      	b.n	800c23e <_fflush_r+0x22>
 800c288:	0800cde0 	.word	0x0800cde0
 800c28c:	0800ce00 	.word	0x0800ce00
 800c290:	0800cdc0 	.word	0x0800cdc0

0800c294 <std>:
 800c294:	2300      	movs	r3, #0
 800c296:	b510      	push	{r4, lr}
 800c298:	4604      	mov	r4, r0
 800c29a:	e9c0 3300 	strd	r3, r3, [r0]
 800c29e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2a2:	6083      	str	r3, [r0, #8]
 800c2a4:	8181      	strh	r1, [r0, #12]
 800c2a6:	6643      	str	r3, [r0, #100]	; 0x64
 800c2a8:	81c2      	strh	r2, [r0, #14]
 800c2aa:	6183      	str	r3, [r0, #24]
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	2208      	movs	r2, #8
 800c2b0:	305c      	adds	r0, #92	; 0x5c
 800c2b2:	f7ff f80f 	bl	800b2d4 <memset>
 800c2b6:	4b05      	ldr	r3, [pc, #20]	; (800c2cc <std+0x38>)
 800c2b8:	6263      	str	r3, [r4, #36]	; 0x24
 800c2ba:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <std+0x3c>)
 800c2bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2be:	4b05      	ldr	r3, [pc, #20]	; (800c2d4 <std+0x40>)
 800c2c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2c2:	4b05      	ldr	r3, [pc, #20]	; (800c2d8 <std+0x44>)
 800c2c4:	6224      	str	r4, [r4, #32]
 800c2c6:	6323      	str	r3, [r4, #48]	; 0x30
 800c2c8:	bd10      	pop	{r4, pc}
 800c2ca:	bf00      	nop
 800c2cc:	0800c66d 	.word	0x0800c66d
 800c2d0:	0800c68f 	.word	0x0800c68f
 800c2d4:	0800c6c7 	.word	0x0800c6c7
 800c2d8:	0800c6eb 	.word	0x0800c6eb

0800c2dc <_cleanup_r>:
 800c2dc:	4901      	ldr	r1, [pc, #4]	; (800c2e4 <_cleanup_r+0x8>)
 800c2de:	f000 b8af 	b.w	800c440 <_fwalk_reent>
 800c2e2:	bf00      	nop
 800c2e4:	0800c21d 	.word	0x0800c21d

0800c2e8 <__sfmoreglue>:
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	1e4a      	subs	r2, r1, #1
 800c2ec:	2568      	movs	r5, #104	; 0x68
 800c2ee:	4355      	muls	r5, r2
 800c2f0:	460e      	mov	r6, r1
 800c2f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2f6:	f7ff f98f 	bl	800b618 <_malloc_r>
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	b140      	cbz	r0, 800c310 <__sfmoreglue+0x28>
 800c2fe:	2100      	movs	r1, #0
 800c300:	e9c0 1600 	strd	r1, r6, [r0]
 800c304:	300c      	adds	r0, #12
 800c306:	60a0      	str	r0, [r4, #8]
 800c308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c30c:	f7fe ffe2 	bl	800b2d4 <memset>
 800c310:	4620      	mov	r0, r4
 800c312:	bd70      	pop	{r4, r5, r6, pc}

0800c314 <__sfp_lock_acquire>:
 800c314:	4801      	ldr	r0, [pc, #4]	; (800c31c <__sfp_lock_acquire+0x8>)
 800c316:	f000 b8b3 	b.w	800c480 <__retarget_lock_acquire_recursive>
 800c31a:	bf00      	nop
 800c31c:	2000a37c 	.word	0x2000a37c

0800c320 <__sfp_lock_release>:
 800c320:	4801      	ldr	r0, [pc, #4]	; (800c328 <__sfp_lock_release+0x8>)
 800c322:	f000 b8ae 	b.w	800c482 <__retarget_lock_release_recursive>
 800c326:	bf00      	nop
 800c328:	2000a37c 	.word	0x2000a37c

0800c32c <__sinit_lock_acquire>:
 800c32c:	4801      	ldr	r0, [pc, #4]	; (800c334 <__sinit_lock_acquire+0x8>)
 800c32e:	f000 b8a7 	b.w	800c480 <__retarget_lock_acquire_recursive>
 800c332:	bf00      	nop
 800c334:	2000a377 	.word	0x2000a377

0800c338 <__sinit_lock_release>:
 800c338:	4801      	ldr	r0, [pc, #4]	; (800c340 <__sinit_lock_release+0x8>)
 800c33a:	f000 b8a2 	b.w	800c482 <__retarget_lock_release_recursive>
 800c33e:	bf00      	nop
 800c340:	2000a377 	.word	0x2000a377

0800c344 <__sinit>:
 800c344:	b510      	push	{r4, lr}
 800c346:	4604      	mov	r4, r0
 800c348:	f7ff fff0 	bl	800c32c <__sinit_lock_acquire>
 800c34c:	69a3      	ldr	r3, [r4, #24]
 800c34e:	b11b      	cbz	r3, 800c358 <__sinit+0x14>
 800c350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c354:	f7ff bff0 	b.w	800c338 <__sinit_lock_release>
 800c358:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c35c:	6523      	str	r3, [r4, #80]	; 0x50
 800c35e:	4b13      	ldr	r3, [pc, #76]	; (800c3ac <__sinit+0x68>)
 800c360:	4a13      	ldr	r2, [pc, #76]	; (800c3b0 <__sinit+0x6c>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	62a2      	str	r2, [r4, #40]	; 0x28
 800c366:	42a3      	cmp	r3, r4
 800c368:	bf04      	itt	eq
 800c36a:	2301      	moveq	r3, #1
 800c36c:	61a3      	streq	r3, [r4, #24]
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 f820 	bl	800c3b4 <__sfp>
 800c374:	6060      	str	r0, [r4, #4]
 800c376:	4620      	mov	r0, r4
 800c378:	f000 f81c 	bl	800c3b4 <__sfp>
 800c37c:	60a0      	str	r0, [r4, #8]
 800c37e:	4620      	mov	r0, r4
 800c380:	f000 f818 	bl	800c3b4 <__sfp>
 800c384:	2200      	movs	r2, #0
 800c386:	60e0      	str	r0, [r4, #12]
 800c388:	2104      	movs	r1, #4
 800c38a:	6860      	ldr	r0, [r4, #4]
 800c38c:	f7ff ff82 	bl	800c294 <std>
 800c390:	68a0      	ldr	r0, [r4, #8]
 800c392:	2201      	movs	r2, #1
 800c394:	2109      	movs	r1, #9
 800c396:	f7ff ff7d 	bl	800c294 <std>
 800c39a:	68e0      	ldr	r0, [r4, #12]
 800c39c:	2202      	movs	r2, #2
 800c39e:	2112      	movs	r1, #18
 800c3a0:	f7ff ff78 	bl	800c294 <std>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	61a3      	str	r3, [r4, #24]
 800c3a8:	e7d2      	b.n	800c350 <__sinit+0xc>
 800c3aa:	bf00      	nop
 800c3ac:	0800cbd4 	.word	0x0800cbd4
 800c3b0:	0800c2dd 	.word	0x0800c2dd

0800c3b4 <__sfp>:
 800c3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b6:	4607      	mov	r7, r0
 800c3b8:	f7ff ffac 	bl	800c314 <__sfp_lock_acquire>
 800c3bc:	4b1e      	ldr	r3, [pc, #120]	; (800c438 <__sfp+0x84>)
 800c3be:	681e      	ldr	r6, [r3, #0]
 800c3c0:	69b3      	ldr	r3, [r6, #24]
 800c3c2:	b913      	cbnz	r3, 800c3ca <__sfp+0x16>
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f7ff ffbd 	bl	800c344 <__sinit>
 800c3ca:	3648      	adds	r6, #72	; 0x48
 800c3cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	d503      	bpl.n	800c3dc <__sfp+0x28>
 800c3d4:	6833      	ldr	r3, [r6, #0]
 800c3d6:	b30b      	cbz	r3, 800c41c <__sfp+0x68>
 800c3d8:	6836      	ldr	r6, [r6, #0]
 800c3da:	e7f7      	b.n	800c3cc <__sfp+0x18>
 800c3dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3e0:	b9d5      	cbnz	r5, 800c418 <__sfp+0x64>
 800c3e2:	4b16      	ldr	r3, [pc, #88]	; (800c43c <__sfp+0x88>)
 800c3e4:	60e3      	str	r3, [r4, #12]
 800c3e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3ea:	6665      	str	r5, [r4, #100]	; 0x64
 800c3ec:	f000 f847 	bl	800c47e <__retarget_lock_init_recursive>
 800c3f0:	f7ff ff96 	bl	800c320 <__sfp_lock_release>
 800c3f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3fc:	6025      	str	r5, [r4, #0]
 800c3fe:	61a5      	str	r5, [r4, #24]
 800c400:	2208      	movs	r2, #8
 800c402:	4629      	mov	r1, r5
 800c404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c408:	f7fe ff64 	bl	800b2d4 <memset>
 800c40c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c414:	4620      	mov	r0, r4
 800c416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c418:	3468      	adds	r4, #104	; 0x68
 800c41a:	e7d9      	b.n	800c3d0 <__sfp+0x1c>
 800c41c:	2104      	movs	r1, #4
 800c41e:	4638      	mov	r0, r7
 800c420:	f7ff ff62 	bl	800c2e8 <__sfmoreglue>
 800c424:	4604      	mov	r4, r0
 800c426:	6030      	str	r0, [r6, #0]
 800c428:	2800      	cmp	r0, #0
 800c42a:	d1d5      	bne.n	800c3d8 <__sfp+0x24>
 800c42c:	f7ff ff78 	bl	800c320 <__sfp_lock_release>
 800c430:	230c      	movs	r3, #12
 800c432:	603b      	str	r3, [r7, #0]
 800c434:	e7ee      	b.n	800c414 <__sfp+0x60>
 800c436:	bf00      	nop
 800c438:	0800cbd4 	.word	0x0800cbd4
 800c43c:	ffff0001 	.word	0xffff0001

0800c440 <_fwalk_reent>:
 800c440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c444:	4606      	mov	r6, r0
 800c446:	4688      	mov	r8, r1
 800c448:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c44c:	2700      	movs	r7, #0
 800c44e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c452:	f1b9 0901 	subs.w	r9, r9, #1
 800c456:	d505      	bpl.n	800c464 <_fwalk_reent+0x24>
 800c458:	6824      	ldr	r4, [r4, #0]
 800c45a:	2c00      	cmp	r4, #0
 800c45c:	d1f7      	bne.n	800c44e <_fwalk_reent+0xe>
 800c45e:	4638      	mov	r0, r7
 800c460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c464:	89ab      	ldrh	r3, [r5, #12]
 800c466:	2b01      	cmp	r3, #1
 800c468:	d907      	bls.n	800c47a <_fwalk_reent+0x3a>
 800c46a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c46e:	3301      	adds	r3, #1
 800c470:	d003      	beq.n	800c47a <_fwalk_reent+0x3a>
 800c472:	4629      	mov	r1, r5
 800c474:	4630      	mov	r0, r6
 800c476:	47c0      	blx	r8
 800c478:	4307      	orrs	r7, r0
 800c47a:	3568      	adds	r5, #104	; 0x68
 800c47c:	e7e9      	b.n	800c452 <_fwalk_reent+0x12>

0800c47e <__retarget_lock_init_recursive>:
 800c47e:	4770      	bx	lr

0800c480 <__retarget_lock_acquire_recursive>:
 800c480:	4770      	bx	lr

0800c482 <__retarget_lock_release_recursive>:
 800c482:	4770      	bx	lr

0800c484 <__swhatbuf_r>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	460e      	mov	r6, r1
 800c488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c48c:	2900      	cmp	r1, #0
 800c48e:	b096      	sub	sp, #88	; 0x58
 800c490:	4614      	mov	r4, r2
 800c492:	461d      	mov	r5, r3
 800c494:	da07      	bge.n	800c4a6 <__swhatbuf_r+0x22>
 800c496:	2300      	movs	r3, #0
 800c498:	602b      	str	r3, [r5, #0]
 800c49a:	89b3      	ldrh	r3, [r6, #12]
 800c49c:	061a      	lsls	r2, r3, #24
 800c49e:	d410      	bmi.n	800c4c2 <__swhatbuf_r+0x3e>
 800c4a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4a4:	e00e      	b.n	800c4c4 <__swhatbuf_r+0x40>
 800c4a6:	466a      	mov	r2, sp
 800c4a8:	f000 f946 	bl	800c738 <_fstat_r>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	dbf2      	blt.n	800c496 <__swhatbuf_r+0x12>
 800c4b0:	9a01      	ldr	r2, [sp, #4]
 800c4b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4ba:	425a      	negs	r2, r3
 800c4bc:	415a      	adcs	r2, r3
 800c4be:	602a      	str	r2, [r5, #0]
 800c4c0:	e7ee      	b.n	800c4a0 <__swhatbuf_r+0x1c>
 800c4c2:	2340      	movs	r3, #64	; 0x40
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	6023      	str	r3, [r4, #0]
 800c4c8:	b016      	add	sp, #88	; 0x58
 800c4ca:	bd70      	pop	{r4, r5, r6, pc}

0800c4cc <__smakebuf_r>:
 800c4cc:	898b      	ldrh	r3, [r1, #12]
 800c4ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4d0:	079d      	lsls	r5, r3, #30
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	460c      	mov	r4, r1
 800c4d6:	d507      	bpl.n	800c4e8 <__smakebuf_r+0x1c>
 800c4d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	6123      	str	r3, [r4, #16]
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	6163      	str	r3, [r4, #20]
 800c4e4:	b002      	add	sp, #8
 800c4e6:	bd70      	pop	{r4, r5, r6, pc}
 800c4e8:	ab01      	add	r3, sp, #4
 800c4ea:	466a      	mov	r2, sp
 800c4ec:	f7ff ffca 	bl	800c484 <__swhatbuf_r>
 800c4f0:	9900      	ldr	r1, [sp, #0]
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f7ff f88f 	bl	800b618 <_malloc_r>
 800c4fa:	b948      	cbnz	r0, 800c510 <__smakebuf_r+0x44>
 800c4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c500:	059a      	lsls	r2, r3, #22
 800c502:	d4ef      	bmi.n	800c4e4 <__smakebuf_r+0x18>
 800c504:	f023 0303 	bic.w	r3, r3, #3
 800c508:	f043 0302 	orr.w	r3, r3, #2
 800c50c:	81a3      	strh	r3, [r4, #12]
 800c50e:	e7e3      	b.n	800c4d8 <__smakebuf_r+0xc>
 800c510:	4b0d      	ldr	r3, [pc, #52]	; (800c548 <__smakebuf_r+0x7c>)
 800c512:	62b3      	str	r3, [r6, #40]	; 0x28
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	6020      	str	r0, [r4, #0]
 800c518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	9b00      	ldr	r3, [sp, #0]
 800c520:	6163      	str	r3, [r4, #20]
 800c522:	9b01      	ldr	r3, [sp, #4]
 800c524:	6120      	str	r0, [r4, #16]
 800c526:	b15b      	cbz	r3, 800c540 <__smakebuf_r+0x74>
 800c528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c52c:	4630      	mov	r0, r6
 800c52e:	f000 f915 	bl	800c75c <_isatty_r>
 800c532:	b128      	cbz	r0, 800c540 <__smakebuf_r+0x74>
 800c534:	89a3      	ldrh	r3, [r4, #12]
 800c536:	f023 0303 	bic.w	r3, r3, #3
 800c53a:	f043 0301 	orr.w	r3, r3, #1
 800c53e:	81a3      	strh	r3, [r4, #12]
 800c540:	89a0      	ldrh	r0, [r4, #12]
 800c542:	4305      	orrs	r5, r0
 800c544:	81a5      	strh	r5, [r4, #12]
 800c546:	e7cd      	b.n	800c4e4 <__smakebuf_r+0x18>
 800c548:	0800c2dd 	.word	0x0800c2dd

0800c54c <memmove>:
 800c54c:	4288      	cmp	r0, r1
 800c54e:	b510      	push	{r4, lr}
 800c550:	eb01 0402 	add.w	r4, r1, r2
 800c554:	d902      	bls.n	800c55c <memmove+0x10>
 800c556:	4284      	cmp	r4, r0
 800c558:	4623      	mov	r3, r4
 800c55a:	d807      	bhi.n	800c56c <memmove+0x20>
 800c55c:	1e43      	subs	r3, r0, #1
 800c55e:	42a1      	cmp	r1, r4
 800c560:	d008      	beq.n	800c574 <memmove+0x28>
 800c562:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c56a:	e7f8      	b.n	800c55e <memmove+0x12>
 800c56c:	4402      	add	r2, r0
 800c56e:	4601      	mov	r1, r0
 800c570:	428a      	cmp	r2, r1
 800c572:	d100      	bne.n	800c576 <memmove+0x2a>
 800c574:	bd10      	pop	{r4, pc}
 800c576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c57a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c57e:	e7f7      	b.n	800c570 <memmove+0x24>

0800c580 <__malloc_lock>:
 800c580:	4801      	ldr	r0, [pc, #4]	; (800c588 <__malloc_lock+0x8>)
 800c582:	f7ff bf7d 	b.w	800c480 <__retarget_lock_acquire_recursive>
 800c586:	bf00      	nop
 800c588:	2000a378 	.word	0x2000a378

0800c58c <__malloc_unlock>:
 800c58c:	4801      	ldr	r0, [pc, #4]	; (800c594 <__malloc_unlock+0x8>)
 800c58e:	f7ff bf78 	b.w	800c482 <__retarget_lock_release_recursive>
 800c592:	bf00      	nop
 800c594:	2000a378 	.word	0x2000a378

0800c598 <_realloc_r>:
 800c598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59a:	4607      	mov	r7, r0
 800c59c:	4614      	mov	r4, r2
 800c59e:	460e      	mov	r6, r1
 800c5a0:	b921      	cbnz	r1, 800c5ac <_realloc_r+0x14>
 800c5a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	f7ff b836 	b.w	800b618 <_malloc_r>
 800c5ac:	b922      	cbnz	r2, 800c5b8 <_realloc_r+0x20>
 800c5ae:	f7fe ffe3 	bl	800b578 <_free_r>
 800c5b2:	4625      	mov	r5, r4
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5b8:	f000 f8f2 	bl	800c7a0 <_malloc_usable_size_r>
 800c5bc:	42a0      	cmp	r0, r4
 800c5be:	d20f      	bcs.n	800c5e0 <_realloc_r+0x48>
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	f7ff f828 	bl	800b618 <_malloc_r>
 800c5c8:	4605      	mov	r5, r0
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d0f2      	beq.n	800c5b4 <_realloc_r+0x1c>
 800c5ce:	4631      	mov	r1, r6
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	f7fe fe71 	bl	800b2b8 <memcpy>
 800c5d6:	4631      	mov	r1, r6
 800c5d8:	4638      	mov	r0, r7
 800c5da:	f7fe ffcd 	bl	800b578 <_free_r>
 800c5de:	e7e9      	b.n	800c5b4 <_realloc_r+0x1c>
 800c5e0:	4635      	mov	r5, r6
 800c5e2:	e7e7      	b.n	800c5b4 <_realloc_r+0x1c>

0800c5e4 <_raise_r>:
 800c5e4:	291f      	cmp	r1, #31
 800c5e6:	b538      	push	{r3, r4, r5, lr}
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	460d      	mov	r5, r1
 800c5ec:	d904      	bls.n	800c5f8 <_raise_r+0x14>
 800c5ee:	2316      	movs	r3, #22
 800c5f0:	6003      	str	r3, [r0, #0]
 800c5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f6:	bd38      	pop	{r3, r4, r5, pc}
 800c5f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5fa:	b112      	cbz	r2, 800c602 <_raise_r+0x1e>
 800c5fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c600:	b94b      	cbnz	r3, 800c616 <_raise_r+0x32>
 800c602:	4620      	mov	r0, r4
 800c604:	f000 f830 	bl	800c668 <_getpid_r>
 800c608:	462a      	mov	r2, r5
 800c60a:	4601      	mov	r1, r0
 800c60c:	4620      	mov	r0, r4
 800c60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c612:	f000 b817 	b.w	800c644 <_kill_r>
 800c616:	2b01      	cmp	r3, #1
 800c618:	d00a      	beq.n	800c630 <_raise_r+0x4c>
 800c61a:	1c59      	adds	r1, r3, #1
 800c61c:	d103      	bne.n	800c626 <_raise_r+0x42>
 800c61e:	2316      	movs	r3, #22
 800c620:	6003      	str	r3, [r0, #0]
 800c622:	2001      	movs	r0, #1
 800c624:	e7e7      	b.n	800c5f6 <_raise_r+0x12>
 800c626:	2400      	movs	r4, #0
 800c628:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c62c:	4628      	mov	r0, r5
 800c62e:	4798      	blx	r3
 800c630:	2000      	movs	r0, #0
 800c632:	e7e0      	b.n	800c5f6 <_raise_r+0x12>

0800c634 <raise>:
 800c634:	4b02      	ldr	r3, [pc, #8]	; (800c640 <raise+0xc>)
 800c636:	4601      	mov	r1, r0
 800c638:	6818      	ldr	r0, [r3, #0]
 800c63a:	f7ff bfd3 	b.w	800c5e4 <_raise_r>
 800c63e:	bf00      	nop
 800c640:	20000198 	.word	0x20000198

0800c644 <_kill_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4d07      	ldr	r5, [pc, #28]	; (800c664 <_kill_r+0x20>)
 800c648:	2300      	movs	r3, #0
 800c64a:	4604      	mov	r4, r0
 800c64c:	4608      	mov	r0, r1
 800c64e:	4611      	mov	r1, r2
 800c650:	602b      	str	r3, [r5, #0]
 800c652:	f7f6 fff3 	bl	800363c <_kill>
 800c656:	1c43      	adds	r3, r0, #1
 800c658:	d102      	bne.n	800c660 <_kill_r+0x1c>
 800c65a:	682b      	ldr	r3, [r5, #0]
 800c65c:	b103      	cbz	r3, 800c660 <_kill_r+0x1c>
 800c65e:	6023      	str	r3, [r4, #0]
 800c660:	bd38      	pop	{r3, r4, r5, pc}
 800c662:	bf00      	nop
 800c664:	2000a380 	.word	0x2000a380

0800c668 <_getpid_r>:
 800c668:	f7f6 bfe0 	b.w	800362c <_getpid>

0800c66c <__sread>:
 800c66c:	b510      	push	{r4, lr}
 800c66e:	460c      	mov	r4, r1
 800c670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c674:	f000 f89c 	bl	800c7b0 <_read_r>
 800c678:	2800      	cmp	r0, #0
 800c67a:	bfab      	itete	ge
 800c67c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c67e:	89a3      	ldrhlt	r3, [r4, #12]
 800c680:	181b      	addge	r3, r3, r0
 800c682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c686:	bfac      	ite	ge
 800c688:	6563      	strge	r3, [r4, #84]	; 0x54
 800c68a:	81a3      	strhlt	r3, [r4, #12]
 800c68c:	bd10      	pop	{r4, pc}

0800c68e <__swrite>:
 800c68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c692:	461f      	mov	r7, r3
 800c694:	898b      	ldrh	r3, [r1, #12]
 800c696:	05db      	lsls	r3, r3, #23
 800c698:	4605      	mov	r5, r0
 800c69a:	460c      	mov	r4, r1
 800c69c:	4616      	mov	r6, r2
 800c69e:	d505      	bpl.n	800c6ac <__swrite+0x1e>
 800c6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f000 f868 	bl	800c77c <_lseek_r>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6b6:	81a3      	strh	r3, [r4, #12]
 800c6b8:	4632      	mov	r2, r6
 800c6ba:	463b      	mov	r3, r7
 800c6bc:	4628      	mov	r0, r5
 800c6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c2:	f000 b817 	b.w	800c6f4 <_write_r>

0800c6c6 <__sseek>:
 800c6c6:	b510      	push	{r4, lr}
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ce:	f000 f855 	bl	800c77c <_lseek_r>
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	bf15      	itete	ne
 800c6d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c6da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c6de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c6e2:	81a3      	strheq	r3, [r4, #12]
 800c6e4:	bf18      	it	ne
 800c6e6:	81a3      	strhne	r3, [r4, #12]
 800c6e8:	bd10      	pop	{r4, pc}

0800c6ea <__sclose>:
 800c6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ee:	f000 b813 	b.w	800c718 <_close_r>
	...

0800c6f4 <_write_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4d07      	ldr	r5, [pc, #28]	; (800c714 <_write_r+0x20>)
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	4608      	mov	r0, r1
 800c6fc:	4611      	mov	r1, r2
 800c6fe:	2200      	movs	r2, #0
 800c700:	602a      	str	r2, [r5, #0]
 800c702:	461a      	mov	r2, r3
 800c704:	f7f6 ffd1 	bl	80036aa <_write>
 800c708:	1c43      	adds	r3, r0, #1
 800c70a:	d102      	bne.n	800c712 <_write_r+0x1e>
 800c70c:	682b      	ldr	r3, [r5, #0]
 800c70e:	b103      	cbz	r3, 800c712 <_write_r+0x1e>
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	bd38      	pop	{r3, r4, r5, pc}
 800c714:	2000a380 	.word	0x2000a380

0800c718 <_close_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	4d06      	ldr	r5, [pc, #24]	; (800c734 <_close_r+0x1c>)
 800c71c:	2300      	movs	r3, #0
 800c71e:	4604      	mov	r4, r0
 800c720:	4608      	mov	r0, r1
 800c722:	602b      	str	r3, [r5, #0]
 800c724:	f7f6 ffdd 	bl	80036e2 <_close>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d102      	bne.n	800c732 <_close_r+0x1a>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	b103      	cbz	r3, 800c732 <_close_r+0x1a>
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	bd38      	pop	{r3, r4, r5, pc}
 800c734:	2000a380 	.word	0x2000a380

0800c738 <_fstat_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	4d07      	ldr	r5, [pc, #28]	; (800c758 <_fstat_r+0x20>)
 800c73c:	2300      	movs	r3, #0
 800c73e:	4604      	mov	r4, r0
 800c740:	4608      	mov	r0, r1
 800c742:	4611      	mov	r1, r2
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	f7f6 ffd8 	bl	80036fa <_fstat>
 800c74a:	1c43      	adds	r3, r0, #1
 800c74c:	d102      	bne.n	800c754 <_fstat_r+0x1c>
 800c74e:	682b      	ldr	r3, [r5, #0]
 800c750:	b103      	cbz	r3, 800c754 <_fstat_r+0x1c>
 800c752:	6023      	str	r3, [r4, #0]
 800c754:	bd38      	pop	{r3, r4, r5, pc}
 800c756:	bf00      	nop
 800c758:	2000a380 	.word	0x2000a380

0800c75c <_isatty_r>:
 800c75c:	b538      	push	{r3, r4, r5, lr}
 800c75e:	4d06      	ldr	r5, [pc, #24]	; (800c778 <_isatty_r+0x1c>)
 800c760:	2300      	movs	r3, #0
 800c762:	4604      	mov	r4, r0
 800c764:	4608      	mov	r0, r1
 800c766:	602b      	str	r3, [r5, #0]
 800c768:	f7f6 ffd7 	bl	800371a <_isatty>
 800c76c:	1c43      	adds	r3, r0, #1
 800c76e:	d102      	bne.n	800c776 <_isatty_r+0x1a>
 800c770:	682b      	ldr	r3, [r5, #0]
 800c772:	b103      	cbz	r3, 800c776 <_isatty_r+0x1a>
 800c774:	6023      	str	r3, [r4, #0]
 800c776:	bd38      	pop	{r3, r4, r5, pc}
 800c778:	2000a380 	.word	0x2000a380

0800c77c <_lseek_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4d07      	ldr	r5, [pc, #28]	; (800c79c <_lseek_r+0x20>)
 800c780:	4604      	mov	r4, r0
 800c782:	4608      	mov	r0, r1
 800c784:	4611      	mov	r1, r2
 800c786:	2200      	movs	r2, #0
 800c788:	602a      	str	r2, [r5, #0]
 800c78a:	461a      	mov	r2, r3
 800c78c:	f7f6 ffd0 	bl	8003730 <_lseek>
 800c790:	1c43      	adds	r3, r0, #1
 800c792:	d102      	bne.n	800c79a <_lseek_r+0x1e>
 800c794:	682b      	ldr	r3, [r5, #0]
 800c796:	b103      	cbz	r3, 800c79a <_lseek_r+0x1e>
 800c798:	6023      	str	r3, [r4, #0]
 800c79a:	bd38      	pop	{r3, r4, r5, pc}
 800c79c:	2000a380 	.word	0x2000a380

0800c7a0 <_malloc_usable_size_r>:
 800c7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7a4:	1f18      	subs	r0, r3, #4
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	bfbc      	itt	lt
 800c7aa:	580b      	ldrlt	r3, [r1, r0]
 800c7ac:	18c0      	addlt	r0, r0, r3
 800c7ae:	4770      	bx	lr

0800c7b0 <_read_r>:
 800c7b0:	b538      	push	{r3, r4, r5, lr}
 800c7b2:	4d07      	ldr	r5, [pc, #28]	; (800c7d0 <_read_r+0x20>)
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	4608      	mov	r0, r1
 800c7b8:	4611      	mov	r1, r2
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	602a      	str	r2, [r5, #0]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	f7f6 ff56 	bl	8003670 <_read>
 800c7c4:	1c43      	adds	r3, r0, #1
 800c7c6:	d102      	bne.n	800c7ce <_read_r+0x1e>
 800c7c8:	682b      	ldr	r3, [r5, #0]
 800c7ca:	b103      	cbz	r3, 800c7ce <_read_r+0x1e>
 800c7cc:	6023      	str	r3, [r4, #0]
 800c7ce:	bd38      	pop	{r3, r4, r5, pc}
 800c7d0:	2000a380 	.word	0x2000a380

0800c7d4 <_init>:
 800c7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d6:	bf00      	nop
 800c7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7da:	bc08      	pop	{r3}
 800c7dc:	469e      	mov	lr, r3
 800c7de:	4770      	bx	lr

0800c7e0 <_fini>:
 800c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e2:	bf00      	nop
 800c7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7e6:	bc08      	pop	{r3}
 800c7e8:	469e      	mov	lr, r3
 800c7ea:	4770      	bx	lr
